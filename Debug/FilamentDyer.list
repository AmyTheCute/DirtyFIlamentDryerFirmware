
FilamentDyer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008354  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001ef0  08008468  08008468  00009468  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a358  0800a358  0000c204  2**0
                  CONTENTS
  4 .ARM          00000008  0800a358  0800a358  0000b358  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a360  0800a360  0000c204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a360  0800a360  0000b360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a364  0800a364  0000b364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000204  20000000  0800a368  0000c000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000520  20000208  0800a56c  0000c208  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000728  0800a56c  0000c728  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000c204  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f4b4  00000000  00000000  0000c22d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a05  00000000  00000000  0001b6e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001028  00000000  00000000  0001e0e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000c7c  00000000  00000000  0001f110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019e7f  00000000  00000000  0001fd8c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013add  00000000  00000000  00039c0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000926cf  00000000  00000000  0004d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dfdb7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005658  00000000  00000000  000dfdfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000058  00000000  00000000  000e5454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000208 	.word	0x20000208
 800012c:	00000000 	.word	0x00000000
 8000130:	0800844c 	.word	0x0800844c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000020c 	.word	0x2000020c
 800014c:	0800844c 	.word	0x0800844c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	@ 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	@ 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000dd6:	2afd      	cmp	r2, #253	@ 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	@ 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	@ 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	@ 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <PID_GetDutyCycle>:
double PID_P = 55.0, PID_I = 0.004, PID_D = 0.002; //50Kp/0Ki/0Kd stable at 58.75/60
double integralSum = 0.0;
double porportionalValue = 0.0;
double last_input = 0.0;

double PID_GetDutyCycle(float current, float target) {
 8001110:	b580      	push	{r7, lr}
 8001112:	b088      	sub	sp, #32
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
	double error = target - current;
 800111a:	6879      	ldr	r1, [r7, #4]
 800111c:	6838      	ldr	r0, [r7, #0]
 800111e:	f7ff fd27 	bl	8000b70 <__aeabi_fsub>
 8001122:	4603      	mov	r3, r0
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff f97f 	bl	8000428 <__aeabi_f2d>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	e9c7 2304 	strd	r2, r3, [r7, #16]

	/* P and I control computer */
	porportionalValue = (PID_P * error);
 8001132:	4b59      	ldr	r3, [pc, #356]	@ (8001298 <PID_GetDutyCycle+0x188>)
 8001134:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001138:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800113c:	f7ff f9cc 	bl	80004d8 <__aeabi_dmul>
 8001140:	4602      	mov	r2, r0
 8001142:	460b      	mov	r3, r1
 8001144:	4955      	ldr	r1, [pc, #340]	@ (800129c <PID_GetDutyCycle+0x18c>)
 8001146:	e9c1 2300 	strd	r2, r3, [r1]

	double derivative = PID_D * (current - last_input);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff f96c 	bl	8000428 <__aeabi_f2d>
 8001150:	4b53      	ldr	r3, [pc, #332]	@ (80012a0 <PID_GetDutyCycle+0x190>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff f807 	bl	8000168 <__aeabi_dsub>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4610      	mov	r0, r2
 8001160:	4619      	mov	r1, r3
 8001162:	4b50      	ldr	r3, [pc, #320]	@ (80012a4 <PID_GetDutyCycle+0x194>)
 8001164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001168:	f7ff f9b6 	bl	80004d8 <__aeabi_dmul>
 800116c:	4602      	mov	r2, r0
 800116e:	460b      	mov	r3, r1
 8001170:	e9c7 2302 	strd	r2, r3, [r7, #8]
	integralSum -= derivative;
 8001174:	4b4c      	ldr	r3, [pc, #304]	@ (80012a8 <PID_GetDutyCycle+0x198>)
 8001176:	e9d3 0100 	ldrd	r0, r1, [r3]
 800117a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800117e:	f7fe fff3 	bl	8000168 <__aeabi_dsub>
 8001182:	4602      	mov	r2, r0
 8001184:	460b      	mov	r3, r1
 8001186:	4948      	ldr	r1, [pc, #288]	@ (80012a8 <PID_GetDutyCycle+0x198>)
 8001188:	e9c1 2300 	strd	r2, r3, [r1]

	if(porportionalValue < 100.0){
 800118c:	4b43      	ldr	r3, [pc, #268]	@ (800129c <PID_GetDutyCycle+0x18c>)
 800118e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8001192:	f04f 0200 	mov.w	r2, #0
 8001196:	4b45      	ldr	r3, [pc, #276]	@ (80012ac <PID_GetDutyCycle+0x19c>)
 8001198:	f7ff fc10 	bl	80009bc <__aeabi_dcmplt>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d014      	beq.n	80011cc <PID_GetDutyCycle+0xbc>
		integralSum += (PID_I * error); // ToDO: Take time elapsed into consideration.
 80011a2:	4b43      	ldr	r3, [pc, #268]	@ (80012b0 <PID_GetDutyCycle+0x1a0>)
 80011a4:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011a8:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80011ac:	f7ff f994 	bl	80004d8 <__aeabi_dmul>
 80011b0:	4602      	mov	r2, r0
 80011b2:	460b      	mov	r3, r1
 80011b4:	4610      	mov	r0, r2
 80011b6:	4619      	mov	r1, r3
 80011b8:	4b3b      	ldr	r3, [pc, #236]	@ (80012a8 <PID_GetDutyCycle+0x198>)
 80011ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80011be:	f7fe ffd5 	bl	800016c <__adddf3>
 80011c2:	4602      	mov	r2, r0
 80011c4:	460b      	mov	r3, r1
 80011c6:	4938      	ldr	r1, [pc, #224]	@ (80012a8 <PID_GetDutyCycle+0x198>)
 80011c8:	e9c1 2300 	strd	r2, r3, [r1]
	}

	/* Clamp results */
	if (integralSum > 100.0f) {
 80011cc:	4b36      	ldr	r3, [pc, #216]	@ (80012a8 <PID_GetDutyCycle+0x198>)
 80011ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011d2:	f04f 0200 	mov.w	r2, #0
 80011d6:	4b35      	ldr	r3, [pc, #212]	@ (80012ac <PID_GetDutyCycle+0x19c>)
 80011d8:	f7ff fc0e 	bl	80009f8 <__aeabi_dcmpgt>
 80011dc:	4603      	mov	r3, r0
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d005      	beq.n	80011ee <PID_GetDutyCycle+0xde>
		integralSum = 100.0f;
 80011e2:	4931      	ldr	r1, [pc, #196]	@ (80012a8 <PID_GetDutyCycle+0x198>)
 80011e4:	f04f 0200 	mov.w	r2, #0
 80011e8:	4b30      	ldr	r3, [pc, #192]	@ (80012ac <PID_GetDutyCycle+0x19c>)
 80011ea:	e9c1 2300 	strd	r2, r3, [r1]
	}

	if (integralSum < 0.0f) {
 80011ee:	4b2e      	ldr	r3, [pc, #184]	@ (80012a8 <PID_GetDutyCycle+0x198>)
 80011f0:	e9d3 0100 	ldrd	r0, r1, [r3]
 80011f4:	f04f 0200 	mov.w	r2, #0
 80011f8:	f04f 0300 	mov.w	r3, #0
 80011fc:	f7ff fbde 	bl	80009bc <__aeabi_dcmplt>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d006      	beq.n	8001214 <PID_GetDutyCycle+0x104>
		integralSum = 0.0f;
 8001206:	4928      	ldr	r1, [pc, #160]	@ (80012a8 <PID_GetDutyCycle+0x198>)
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	e9c1 2300 	strd	r2, r3, [r1]
	}

	double output = integralSum + porportionalValue;
 8001214:	4b24      	ldr	r3, [pc, #144]	@ (80012a8 <PID_GetDutyCycle+0x198>)
 8001216:	e9d3 0100 	ldrd	r0, r1, [r3]
 800121a:	4b20      	ldr	r3, [pc, #128]	@ (800129c <PID_GetDutyCycle+0x18c>)
 800121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001220:	f7fe ffa4 	bl	800016c <__adddf3>
 8001224:	4602      	mov	r2, r0
 8001226:	460b      	mov	r3, r1
 8001228:	e9c7 2306 	strd	r2, r3, [r7, #24]

	if (output > 100.0f) {
 800122c:	f04f 0200 	mov.w	r2, #0
 8001230:	4b1e      	ldr	r3, [pc, #120]	@ (80012ac <PID_GetDutyCycle+0x19c>)
 8001232:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001236:	f7ff fbdf 	bl	80009f8 <__aeabi_dcmpgt>
 800123a:	4603      	mov	r3, r0
 800123c:	2b00      	cmp	r3, #0
 800123e:	d004      	beq.n	800124a <PID_GetDutyCycle+0x13a>
		output = 100.0f;
 8001240:	f04f 0200 	mov.w	r2, #0
 8001244:	4b19      	ldr	r3, [pc, #100]	@ (80012ac <PID_GetDutyCycle+0x19c>)
 8001246:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

	if (output < 0.0f) {
 800124a:	f04f 0200 	mov.w	r2, #0
 800124e:	f04f 0300 	mov.w	r3, #0
 8001252:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001256:	f7ff fbb1 	bl	80009bc <__aeabi_dcmplt>
 800125a:	4603      	mov	r3, r0
 800125c:	2b00      	cmp	r3, #0
 800125e:	d005      	beq.n	800126c <PID_GetDutyCycle+0x15c>
		output = 0.0f;
 8001260:	f04f 0200 	mov.w	r2, #0
 8001264:	f04f 0300 	mov.w	r3, #0
 8001268:	e9c7 2306 	strd	r2, r3, [r7, #24]
	}

	last_input = current;
 800126c:	6878      	ldr	r0, [r7, #4]
 800126e:	f7ff f8db 	bl	8000428 <__aeabi_f2d>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	490a      	ldr	r1, [pc, #40]	@ (80012a0 <PID_GetDutyCycle+0x190>)
 8001278:	e9c1 2300 	strd	r2, r3, [r1]

	return output / 100.0f;
 800127c:	f04f 0200 	mov.w	r2, #0
 8001280:	4b0a      	ldr	r3, [pc, #40]	@ (80012ac <PID_GetDutyCycle+0x19c>)
 8001282:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8001286:	f7ff fa51 	bl	800072c <__aeabi_ddiv>
 800128a:	4602      	mov	r2, r0
 800128c:	460b      	mov	r3, r1
}
 800128e:	4610      	mov	r0, r2
 8001290:	4619      	mov	r1, r3
 8001292:	3720      	adds	r7, #32
 8001294:	46bd      	mov	sp, r7
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000000 	.word	0x20000000
 800129c:	20000230 	.word	0x20000230
 80012a0:	20000238 	.word	0x20000238
 80012a4:	20000010 	.word	0x20000010
 80012a8:	20000228 	.word	0x20000228
 80012ac:	40590000 	.word	0x40590000
 80012b0:	20000008 	.word	0x20000008

080012b4 <Thermistor_Init>:
#include "Thermistor.h"

uint8_t array_index = 0;
float temp_history[SAMPLES];

void Thermistor_Init() {
 80012b4:	b480      	push	{r7}
 80012b6:	b083      	sub	sp, #12
 80012b8:	af00      	add	r7, sp, #0
	array_index = 0;
 80012ba:	4b0b      	ldr	r3, [pc, #44]	@ (80012e8 <Thermistor_Init+0x34>)
 80012bc:	2200      	movs	r2, #0
 80012be:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < SAMPLES; i++){
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
 80012c4:	e007      	b.n	80012d6 <Thermistor_Init+0x22>
			temp_history[i] = 25.0;
 80012c6:	4a09      	ldr	r2, [pc, #36]	@ (80012ec <Thermistor_Init+0x38>)
 80012c8:	687b      	ldr	r3, [r7, #4]
 80012ca:	4909      	ldr	r1, [pc, #36]	@ (80012f0 <Thermistor_Init+0x3c>)
 80012cc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for(int i = 0; i < SAMPLES; i++){
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	3301      	adds	r3, #1
 80012d4:	607b      	str	r3, [r7, #4]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	2b0e      	cmp	r3, #14
 80012da:	ddf4      	ble.n	80012c6 <Thermistor_Init+0x12>
		}

}
 80012dc:	bf00      	nop
 80012de:	bf00      	nop
 80012e0:	370c      	adds	r7, #12
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bc80      	pop	{r7}
 80012e6:	4770      	bx	lr
 80012e8:	20000240 	.word	0x20000240
 80012ec:	20000244 	.word	0x20000244
 80012f0:	41c80000 	.word	0x41c80000

080012f4 <Thermistor_get_temp>:
float Thermistor_get_temp() {
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b082      	sub	sp, #8
 80012f8:	af00      	add	r7, sp, #0
	float sum = 0;
 80012fa:	f04f 0300 	mov.w	r3, #0
 80012fe:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < SAMPLES; i++){
 8001300:	2300      	movs	r3, #0
 8001302:	603b      	str	r3, [r7, #0]
 8001304:	e00c      	b.n	8001320 <Thermistor_get_temp+0x2c>
		sum += temp_history[i];
 8001306:	4a0c      	ldr	r2, [pc, #48]	@ (8001338 <Thermistor_get_temp+0x44>)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130e:	4619      	mov	r1, r3
 8001310:	6878      	ldr	r0, [r7, #4]
 8001312:	f7ff fc2f 	bl	8000b74 <__addsf3>
 8001316:	4603      	mov	r3, r0
 8001318:	607b      	str	r3, [r7, #4]
	for(int i = 0; i < SAMPLES; i++){
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	3301      	adds	r3, #1
 800131e:	603b      	str	r3, [r7, #0]
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	2b0e      	cmp	r3, #14
 8001324:	ddef      	ble.n	8001306 <Thermistor_get_temp+0x12>
	}

	return sum / SAMPLES;
 8001326:	4905      	ldr	r1, [pc, #20]	@ (800133c <Thermistor_get_temp+0x48>)
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f7ff fddf 	bl	8000eec <__aeabi_fdiv>
 800132e:	4603      	mov	r3, r0
}
 8001330:	4618      	mov	r0, r3
 8001332:	3708      	adds	r7, #8
 8001334:	46bd      	mov	sp, r7
 8001336:	bd80      	pop	{r7, pc}
 8001338:	20000244 	.word	0x20000244
 800133c:	41700000 	.word	0x41700000

08001340 <ADC_to_Temp>:

float ADC_to_Temp(uint16_t reading) {
 8001340:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	4603      	mov	r3, r0
 800134a:	80fb      	strh	r3, [r7, #6]
	float result;

	result = (4095.0 / reading - 1.0);
 800134c:	88fb      	ldrh	r3, [r7, #6]
 800134e:	4618      	mov	r0, r3
 8001350:	f7ff f858 	bl	8000404 <__aeabi_i2d>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	a147      	add	r1, pc, #284	@ (adr r1, 8001478 <ADC_to_Temp+0x138>)
 800135a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800135e:	f7ff f9e5 	bl	800072c <__aeabi_ddiv>
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4610      	mov	r0, r2
 8001368:	4619      	mov	r1, r3
 800136a:	f04f 0200 	mov.w	r2, #0
 800136e:	4b4c      	ldr	r3, [pc, #304]	@ (80014a0 <ADC_to_Temp+0x160>)
 8001370:	f7fe fefa 	bl	8000168 <__aeabi_dsub>
 8001374:	4602      	mov	r2, r0
 8001376:	460b      	mov	r3, r1
 8001378:	4610      	mov	r0, r2
 800137a:	4619      	mov	r1, r3
 800137c:	f7ff fba4 	bl	8000ac8 <__aeabi_d2f>
 8001380:	4603      	mov	r3, r0
 8001382:	617b      	str	r3, [r7, #20]
	result = result * PULL_UP;
 8001384:	4947      	ldr	r1, [pc, #284]	@ (80014a4 <ADC_to_Temp+0x164>)
 8001386:	6978      	ldr	r0, [r7, #20]
 8001388:	f7ff fcfc 	bl	8000d84 <__aeabi_fmul>
 800138c:	4603      	mov	r3, r0
 800138e:	617b      	str	r3, [r7, #20]
	float logR2 = log(result);
 8001390:	6978      	ldr	r0, [r7, #20]
 8001392:	f7ff f849 	bl	8000428 <__aeabi_f2d>
 8001396:	4602      	mov	r2, r0
 8001398:	460b      	mov	r3, r1
 800139a:	4610      	mov	r0, r2
 800139c:	4619      	mov	r1, r3
 800139e:	f006 fe6b 	bl	8008078 <log>
 80013a2:	4602      	mov	r2, r0
 80013a4:	460b      	mov	r3, r1
 80013a6:	4610      	mov	r0, r2
 80013a8:	4619      	mov	r1, r3
 80013aa:	f7ff fb8d 	bl	8000ac8 <__aeabi_d2f>
 80013ae:	4603      	mov	r3, r0
 80013b0:	613b      	str	r3, [r7, #16]
	float temp = (1.0 / (A_CONSTANT + (B_CONSTANT*logR2) + (C_CONSTANT*logR2*logR2*logR2)));
 80013b2:	6938      	ldr	r0, [r7, #16]
 80013b4:	f7ff f838 	bl	8000428 <__aeabi_f2d>
 80013b8:	a331      	add	r3, pc, #196	@ (adr r3, 8001480 <ADC_to_Temp+0x140>)
 80013ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013be:	f7ff f88b 	bl	80004d8 <__aeabi_dmul>
 80013c2:	4602      	mov	r2, r0
 80013c4:	460b      	mov	r3, r1
 80013c6:	4610      	mov	r0, r2
 80013c8:	4619      	mov	r1, r3
 80013ca:	a32f      	add	r3, pc, #188	@ (adr r3, 8001488 <ADC_to_Temp+0x148>)
 80013cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d0:	f7fe fecc 	bl	800016c <__adddf3>
 80013d4:	4602      	mov	r2, r0
 80013d6:	460b      	mov	r3, r1
 80013d8:	4614      	mov	r4, r2
 80013da:	461d      	mov	r5, r3
 80013dc:	6938      	ldr	r0, [r7, #16]
 80013de:	f7ff f823 	bl	8000428 <__aeabi_f2d>
 80013e2:	a32b      	add	r3, pc, #172	@ (adr r3, 8001490 <ADC_to_Temp+0x150>)
 80013e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013e8:	f7ff f876 	bl	80004d8 <__aeabi_dmul>
 80013ec:	4602      	mov	r2, r0
 80013ee:	460b      	mov	r3, r1
 80013f0:	4690      	mov	r8, r2
 80013f2:	4699      	mov	r9, r3
 80013f4:	6938      	ldr	r0, [r7, #16]
 80013f6:	f7ff f817 	bl	8000428 <__aeabi_f2d>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4640      	mov	r0, r8
 8001400:	4649      	mov	r1, r9
 8001402:	f7ff f869 	bl	80004d8 <__aeabi_dmul>
 8001406:	4602      	mov	r2, r0
 8001408:	460b      	mov	r3, r1
 800140a:	4690      	mov	r8, r2
 800140c:	4699      	mov	r9, r3
 800140e:	6938      	ldr	r0, [r7, #16]
 8001410:	f7ff f80a 	bl	8000428 <__aeabi_f2d>
 8001414:	4602      	mov	r2, r0
 8001416:	460b      	mov	r3, r1
 8001418:	4640      	mov	r0, r8
 800141a:	4649      	mov	r1, r9
 800141c:	f7ff f85c 	bl	80004d8 <__aeabi_dmul>
 8001420:	4602      	mov	r2, r0
 8001422:	460b      	mov	r3, r1
 8001424:	4620      	mov	r0, r4
 8001426:	4629      	mov	r1, r5
 8001428:	f7fe fea0 	bl	800016c <__adddf3>
 800142c:	4602      	mov	r2, r0
 800142e:	460b      	mov	r3, r1
 8001430:	f04f 0000 	mov.w	r0, #0
 8001434:	491a      	ldr	r1, [pc, #104]	@ (80014a0 <ADC_to_Temp+0x160>)
 8001436:	f7ff f979 	bl	800072c <__aeabi_ddiv>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	4610      	mov	r0, r2
 8001440:	4619      	mov	r1, r3
 8001442:	f7ff fb41 	bl	8000ac8 <__aeabi_d2f>
 8001446:	4603      	mov	r3, r0
 8001448:	60fb      	str	r3, [r7, #12]
	temp = temp - 273.15;
 800144a:	68f8      	ldr	r0, [r7, #12]
 800144c:	f7fe ffec 	bl	8000428 <__aeabi_f2d>
 8001450:	a311      	add	r3, pc, #68	@ (adr r3, 8001498 <ADC_to_Temp+0x158>)
 8001452:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001456:	f7fe fe87 	bl	8000168 <__aeabi_dsub>
 800145a:	4602      	mov	r2, r0
 800145c:	460b      	mov	r3, r1
 800145e:	4610      	mov	r0, r2
 8001460:	4619      	mov	r1, r3
 8001462:	f7ff fb31 	bl	8000ac8 <__aeabi_d2f>
 8001466:	4603      	mov	r3, r0
 8001468:	60fb      	str	r3, [r7, #12]

	return temp;
 800146a:	68fb      	ldr	r3, [r7, #12]
}
 800146c:	4618      	mov	r0, r3
 800146e:	3718      	adds	r7, #24
 8001470:	46bd      	mov	sp, r7
 8001472:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001476:	bf00      	nop
 8001478:	00000000 	.word	0x00000000
 800147c:	40affe00 	.word	0x40affe00
 8001480:	795f4c1c 	.word	0x795f4c1c
 8001484:	3f2d9644 	.word	0x3f2d9644
 8001488:	8564cf36 	.word	0x8564cf36
 800148c:	3f44c032 	.word	0x3f44c032
 8001490:	64f2034b 	.word	0x64f2034b
 8001494:	3e7572d9 	.word	0x3e7572d9
 8001498:	66666666 	.word	0x66666666
 800149c:	40711266 	.word	0x40711266
 80014a0:	3ff00000 	.word	0x3ff00000
 80014a4:	4592e000 	.word	0x4592e000

080014a8 <Thermistor_Process>:


void Thermistor_Process(uint16_t value){
 80014a8:	b590      	push	{r4, r7, lr}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	80fb      	strh	r3, [r7, #6]
 if(array_index >= SAMPLES) {
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <Thermistor_Process+0x44>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	2b0e      	cmp	r3, #14
 80014b8:	d902      	bls.n	80014c0 <Thermistor_Process+0x18>
	 array_index = 0;
 80014ba:	4b0c      	ldr	r3, [pc, #48]	@ (80014ec <Thermistor_Process+0x44>)
 80014bc:	2200      	movs	r2, #0
 80014be:	701a      	strb	r2, [r3, #0]
 }

	 temp_history[array_index] = ADC_to_Temp(value);
 80014c0:	4b0a      	ldr	r3, [pc, #40]	@ (80014ec <Thermistor_Process+0x44>)
 80014c2:	781b      	ldrb	r3, [r3, #0]
 80014c4:	461c      	mov	r4, r3
 80014c6:	88fb      	ldrh	r3, [r7, #6]
 80014c8:	4618      	mov	r0, r3
 80014ca:	f7ff ff39 	bl	8001340 <ADC_to_Temp>
 80014ce:	4603      	mov	r3, r0
 80014d0:	4a07      	ldr	r2, [pc, #28]	@ (80014f0 <Thermistor_Process+0x48>)
 80014d2:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	 array_index++;
 80014d6:	4b05      	ldr	r3, [pc, #20]	@ (80014ec <Thermistor_Process+0x44>)
 80014d8:	781b      	ldrb	r3, [r3, #0]
 80014da:	3301      	adds	r3, #1
 80014dc:	b2da      	uxtb	r2, r3
 80014de:	4b03      	ldr	r3, [pc, #12]	@ (80014ec <Thermistor_Process+0x44>)
 80014e0:	701a      	strb	r2, [r3, #0]
}
 80014e2:	bf00      	nop
 80014e4:	370c      	adds	r7, #12
 80014e6:	46bd      	mov	sp, r7
 80014e8:	bd90      	pop	{r4, r7, pc}
 80014ea:	bf00      	nop
 80014ec:	20000240 	.word	0x20000240
 80014f0:	20000244 	.word	0x20000244

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014f8:	f000 ff12 	bl	8002320 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fc:	f000 f85e 	bl	80015bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001500:	f000 f974 	bl	80017ec <MX_GPIO_Init>
  MX_I2C1_Init();
 8001504:	f000 f8f6 	bl	80016f4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8001508:	f000 f8b6 	bl	8001678 <MX_ADC1_Init>
  MX_TIM3_Init();
 800150c:	f000 f920 	bl	8001750 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  // Initialize TIM3 for low frequency PWM heater
  HAL_TIM_Base_Start_IT(&htim3);
 8001510:	4823      	ldr	r0, [pc, #140]	@ (80015a0 <main+0xac>)
 8001512:	f003 f973 	bl	80047fc <HAL_TIM_Base_Start_IT>

  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, GPIO_PIN_SET);
 8001516:	2201      	movs	r2, #1
 8001518:	f44f 7100 	mov.w	r1, #512	@ 0x200
 800151c:	4821      	ldr	r0, [pc, #132]	@ (80015a4 <main+0xb0>)
 800151e:	f001 feaa 	bl	8003276 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10, GPIO_PIN_SET);
 8001522:	2201      	movs	r2, #1
 8001524:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001528:	481e      	ldr	r0, [pc, #120]	@ (80015a4 <main+0xb0>)
 800152a:	f001 fea4 	bl	8003276 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_11, GPIO_PIN_SET);
 800152e:	2201      	movs	r2, #1
 8001530:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001534:	481b      	ldr	r0, [pc, #108]	@ (80015a4 <main+0xb0>)
 8001536:	f001 fe9e 	bl	8003276 <HAL_GPIO_WritePin>


  HAL_Delay(1000); // Wait for power supply to stabilizebrain
 800153a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800153e:	f000 ff21 	bl	8002384 <HAL_Delay>
  HAL_ADCEx_Calibration_Start(&hadc1);
 8001542:	4819      	ldr	r0, [pc, #100]	@ (80015a8 <main+0xb4>)
 8001544:	f001 fb6e 	bl	8002c24 <HAL_ADCEx_Calibration_Start>


  Thermistor_Init();
 8001548:	f7ff feb4 	bl	80012b4 <Thermistor_Init>
  ssd1306_Init();
 800154c:	f003 fd30 	bl	8004fb0 <ssd1306_Init>

  program_state = MAIN_MENU;
 8001550:	4b16      	ldr	r3, [pc, #88]	@ (80015ac <main+0xb8>)
 8001552:	2200      	movs	r2, #0
 8001554:	701a      	strb	r2, [r3, #0]

  menu_size = sizeof(filament_names)/sizeof(filament_names[0]);
 8001556:	4b16      	ldr	r3, [pc, #88]	@ (80015b0 <main+0xbc>)
 8001558:	2203      	movs	r2, #3
 800155a:	701a      	strb	r2, [r3, #0]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(since_last(last_screen_update) >= 50) {
 800155c:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <main+0xc0>)
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4618      	mov	r0, r3
 8001562:	f000 fc00 	bl	8001d66 <since_last>
 8001566:	4603      	mov	r3, r0
 8001568:	2b31      	cmp	r3, #49	@ 0x31
 800156a:	d906      	bls.n	800157a <main+0x86>
		  update_screen();
 800156c:	f000 f9ac 	bl	80018c8 <update_screen>
		  last_screen_update = HAL_GetTick();
 8001570:	f000 fefe 	bl	8002370 <HAL_GetTick>
 8001574:	4603      	mov	r3, r0
 8001576:	4a0f      	ldr	r2, [pc, #60]	@ (80015b4 <main+0xc0>)
 8001578:	6013      	str	r3, [r2, #0]
	  }
	  if(since_last(last_math_update) >= 10 ) {
 800157a:	4b0f      	ldr	r3, [pc, #60]	@ (80015b8 <main+0xc4>)
 800157c:	681b      	ldr	r3, [r3, #0]
 800157e:	4618      	mov	r0, r3
 8001580:	f000 fbf1 	bl	8001d66 <since_last>
 8001584:	4603      	mov	r3, r0
 8001586:	2b09      	cmp	r3, #9
 8001588:	d9e8      	bls.n	800155c <main+0x68>
		  update_inputs();
 800158a:	f000 fab3 	bl	8001af4 <update_inputs>
		  Therm_Process();
 800158e:	f000 fb7f 	bl	8001c90 <Therm_Process>
		  last_math_update = HAL_GetTick();
 8001592:	f000 feed 	bl	8002370 <HAL_GetTick>
 8001596:	4603      	mov	r3, r0
 8001598:	4a07      	ldr	r2, [pc, #28]	@ (80015b8 <main+0xc4>)
 800159a:	6013      	str	r3, [r2, #0]
	  if(since_last(last_screen_update) >= 50) {
 800159c:	e7de      	b.n	800155c <main+0x68>
 800159e:	bf00      	nop
 80015a0:	20000304 	.word	0x20000304
 80015a4:	40010c00 	.word	0x40010c00
 80015a8:	20000280 	.word	0x20000280
 80015ac:	2000037a 	.word	0x2000037a
 80015b0:	2000036d 	.word	0x2000036d
 80015b4:	2000037c 	.word	0x2000037c
 80015b8:	20000380 	.word	0x20000380

080015bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b094      	sub	sp, #80	@ 0x50
 80015c0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80015c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015c6:	2228      	movs	r2, #40	@ 0x28
 80015c8:	2100      	movs	r1, #0
 80015ca:	4618      	mov	r0, r3
 80015cc:	f004 fc81 	bl	8005ed2 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80015d0:	f107 0314 	add.w	r3, r7, #20
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015e0:	1d3b      	adds	r3, r7, #4
 80015e2:	2200      	movs	r2, #0
 80015e4:	601a      	str	r2, [r3, #0]
 80015e6:	605a      	str	r2, [r3, #4]
 80015e8:	609a      	str	r2, [r3, #8]
 80015ea:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015ec:	2301      	movs	r3, #1
 80015ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80015f0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80015f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV2;
 80015f6:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80015fa:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80015fc:	2301      	movs	r3, #1
 80015fe:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001600:	2302      	movs	r3, #2
 8001602:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001604:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001608:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 800160a:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 800160e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001610:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001614:	4618      	mov	r0, r3
 8001616:	f002 faf3 	bl	8003c00 <HAL_RCC_OscConfig>
 800161a:	4603      	mov	r3, r0
 800161c:	2b00      	cmp	r3, #0
 800161e:	d001      	beq.n	8001624 <SystemClock_Config+0x68>
  {
    Error_Handler();
 8001620:	f000 fbfa 	bl	8001e18 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001624:	230f      	movs	r3, #15
 8001626:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001628:	2302      	movs	r3, #2
 800162a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162c:	2300      	movs	r3, #0
 800162e:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001630:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001634:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800163a:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800163c:	f107 0314 	add.w	r3, r7, #20
 8001640:	2102      	movs	r1, #2
 8001642:	4618      	mov	r0, r3
 8001644:	f002 fd5e 	bl	8004104 <HAL_RCC_ClockConfig>
 8001648:	4603      	mov	r3, r0
 800164a:	2b00      	cmp	r3, #0
 800164c:	d001      	beq.n	8001652 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800164e:	f000 fbe3 	bl	8001e18 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001652:	2302      	movs	r3, #2
 8001654:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8001656:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800165a:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800165c:	1d3b      	adds	r3, r7, #4
 800165e:	4618      	mov	r0, r3
 8001660:	f002 ff10 	bl	8004484 <HAL_RCCEx_PeriphCLKConfig>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800166a:	f000 fbd5 	bl	8001e18 <Error_Handler>
  }
}
 800166e:	bf00      	nop
 8001670:	3750      	adds	r7, #80	@ 0x50
 8001672:	46bd      	mov	sp, r7
 8001674:	bd80      	pop	{r7, pc}
	...

08001678 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2200      	movs	r2, #0
 8001682:	601a      	str	r2, [r3, #0]
 8001684:	605a      	str	r2, [r3, #4]
 8001686:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001688:	4b18      	ldr	r3, [pc, #96]	@ (80016ec <MX_ADC1_Init+0x74>)
 800168a:	4a19      	ldr	r2, [pc, #100]	@ (80016f0 <MX_ADC1_Init+0x78>)
 800168c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800168e:	4b17      	ldr	r3, [pc, #92]	@ (80016ec <MX_ADC1_Init+0x74>)
 8001690:	2200      	movs	r2, #0
 8001692:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001694:	4b15      	ldr	r3, [pc, #84]	@ (80016ec <MX_ADC1_Init+0x74>)
 8001696:	2200      	movs	r2, #0
 8001698:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800169a:	4b14      	ldr	r3, [pc, #80]	@ (80016ec <MX_ADC1_Init+0x74>)
 800169c:	2200      	movs	r2, #0
 800169e:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016a0:	4b12      	ldr	r3, [pc, #72]	@ (80016ec <MX_ADC1_Init+0x74>)
 80016a2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80016a6:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016a8:	4b10      	ldr	r3, [pc, #64]	@ (80016ec <MX_ADC1_Init+0x74>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 80016ae:	4b0f      	ldr	r3, [pc, #60]	@ (80016ec <MX_ADC1_Init+0x74>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80016b4:	480d      	ldr	r0, [pc, #52]	@ (80016ec <MX_ADC1_Init+0x74>)
 80016b6:	f000 fe89 	bl	80023cc <HAL_ADC_Init>
 80016ba:	4603      	mov	r3, r0
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d001      	beq.n	80016c4 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 80016c0:	f000 fbaa 	bl	8001e18 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80016c4:	2300      	movs	r3, #0
 80016c6:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 80016cc:	2300      	movs	r3, #0
 80016ce:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80016d0:	1d3b      	adds	r3, r7, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4805      	ldr	r0, [pc, #20]	@ (80016ec <MX_ADC1_Init+0x74>)
 80016d6:	f001 f911 	bl	80028fc <HAL_ADC_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80016e0:	f000 fb9a 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80016e4:	bf00      	nop
 80016e6:	3710      	adds	r7, #16
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	20000280 	.word	0x20000280
 80016f0:	40012400 	.word	0x40012400

080016f4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80016f8:	4b12      	ldr	r3, [pc, #72]	@ (8001744 <MX_I2C1_Init+0x50>)
 80016fa:	4a13      	ldr	r2, [pc, #76]	@ (8001748 <MX_I2C1_Init+0x54>)
 80016fc:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80016fe:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001700:	4a12      	ldr	r2, [pc, #72]	@ (800174c <MX_I2C1_Init+0x58>)
 8001702:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001704:	4b0f      	ldr	r3, [pc, #60]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001706:	2200      	movs	r2, #0
 8001708:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_I2C1_Init+0x50>)
 800170c:	2200      	movs	r2, #0
 800170e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001710:	4b0c      	ldr	r3, [pc, #48]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001712:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001716:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001718:	4b0a      	ldr	r3, [pc, #40]	@ (8001744 <MX_I2C1_Init+0x50>)
 800171a:	2200      	movs	r2, #0
 800171c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800171e:	4b09      	ldr	r3, [pc, #36]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001720:	2200      	movs	r2, #0
 8001722:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001724:	4b07      	ldr	r3, [pc, #28]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001726:	2200      	movs	r2, #0
 8001728:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800172a:	4b06      	ldr	r3, [pc, #24]	@ (8001744 <MX_I2C1_Init+0x50>)
 800172c:	2200      	movs	r2, #0
 800172e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001730:	4804      	ldr	r0, [pc, #16]	@ (8001744 <MX_I2C1_Init+0x50>)
 8001732:	f001 fdb9 	bl	80032a8 <HAL_I2C_Init>
 8001736:	4603      	mov	r3, r0
 8001738:	2b00      	cmp	r3, #0
 800173a:	d001      	beq.n	8001740 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800173c:	f000 fb6c 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001740:	bf00      	nop
 8001742:	bd80      	pop	{r7, pc}
 8001744:	200002b0 	.word	0x200002b0
 8001748:	40005400 	.word	0x40005400
 800174c:	00061a80 	.word	0x00061a80

08001750 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001756:	f107 0308 	add.w	r3, r7, #8
 800175a:	2200      	movs	r2, #0
 800175c:	601a      	str	r2, [r3, #0]
 800175e:	605a      	str	r2, [r3, #4]
 8001760:	609a      	str	r2, [r3, #8]
 8001762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001764:	463b      	mov	r3, r7
 8001766:	2200      	movs	r2, #0
 8001768:	601a      	str	r2, [r3, #0]
 800176a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800176c:	4b1d      	ldr	r3, [pc, #116]	@ (80017e4 <MX_TIM3_Init+0x94>)
 800176e:	4a1e      	ldr	r2, [pc, #120]	@ (80017e8 <MX_TIM3_Init+0x98>)
 8001770:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 100;
 8001772:	4b1c      	ldr	r3, [pc, #112]	@ (80017e4 <MX_TIM3_Init+0x94>)
 8001774:	2264      	movs	r2, #100	@ 0x64
 8001776:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001778:	4b1a      	ldr	r3, [pc, #104]	@ (80017e4 <MX_TIM3_Init+0x94>)
 800177a:	2200      	movs	r2, #0
 800177c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 2823 - 1;
 800177e:	4b19      	ldr	r3, [pc, #100]	@ (80017e4 <MX_TIM3_Init+0x94>)
 8001780:	f640 3206 	movw	r2, #2822	@ 0xb06
 8001784:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001786:	4b17      	ldr	r3, [pc, #92]	@ (80017e4 <MX_TIM3_Init+0x94>)
 8001788:	2200      	movs	r2, #0
 800178a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800178c:	4b15      	ldr	r3, [pc, #84]	@ (80017e4 <MX_TIM3_Init+0x94>)
 800178e:	2200      	movs	r2, #0
 8001790:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001792:	4814      	ldr	r0, [pc, #80]	@ (80017e4 <MX_TIM3_Init+0x94>)
 8001794:	f002 ffe2 	bl	800475c <HAL_TIM_Base_Init>
 8001798:	4603      	mov	r3, r0
 800179a:	2b00      	cmp	r3, #0
 800179c:	d001      	beq.n	80017a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800179e:	f000 fb3b 	bl	8001e18 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017a6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80017a8:	f107 0308 	add.w	r3, r7, #8
 80017ac:	4619      	mov	r1, r3
 80017ae:	480d      	ldr	r0, [pc, #52]	@ (80017e4 <MX_TIM3_Init+0x94>)
 80017b0:	f003 f966 	bl	8004a80 <HAL_TIM_ConfigClockSource>
 80017b4:	4603      	mov	r3, r0
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d001      	beq.n	80017be <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 80017ba:	f000 fb2d 	bl	8001e18 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017be:	2300      	movs	r3, #0
 80017c0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017c2:	2300      	movs	r3, #0
 80017c4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80017c6:	463b      	mov	r3, r7
 80017c8:	4619      	mov	r1, r3
 80017ca:	4806      	ldr	r0, [pc, #24]	@ (80017e4 <MX_TIM3_Init+0x94>)
 80017cc:	f003 fb48 	bl	8004e60 <HAL_TIMEx_MasterConfigSynchronization>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 80017d6:	f000 fb1f 	bl	8001e18 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80017da:	bf00      	nop
 80017dc:	3718      	adds	r7, #24
 80017de:	46bd      	mov	sp, r7
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000304 	.word	0x20000304
 80017e8:	40000400 	.word	0x40000400

080017ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b088      	sub	sp, #32
 80017f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017f2:	f107 0310 	add.w	r3, r7, #16
 80017f6:	2200      	movs	r2, #0
 80017f8:	601a      	str	r2, [r3, #0]
 80017fa:	605a      	str	r2, [r3, #4]
 80017fc:	609a      	str	r2, [r3, #8]
 80017fe:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001800:	4b2d      	ldr	r3, [pc, #180]	@ (80018b8 <MX_GPIO_Init+0xcc>)
 8001802:	699b      	ldr	r3, [r3, #24]
 8001804:	4a2c      	ldr	r2, [pc, #176]	@ (80018b8 <MX_GPIO_Init+0xcc>)
 8001806:	f043 0320 	orr.w	r3, r3, #32
 800180a:	6193      	str	r3, [r2, #24]
 800180c:	4b2a      	ldr	r3, [pc, #168]	@ (80018b8 <MX_GPIO_Init+0xcc>)
 800180e:	699b      	ldr	r3, [r3, #24]
 8001810:	f003 0320 	and.w	r3, r3, #32
 8001814:	60fb      	str	r3, [r7, #12]
 8001816:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001818:	4b27      	ldr	r3, [pc, #156]	@ (80018b8 <MX_GPIO_Init+0xcc>)
 800181a:	699b      	ldr	r3, [r3, #24]
 800181c:	4a26      	ldr	r2, [pc, #152]	@ (80018b8 <MX_GPIO_Init+0xcc>)
 800181e:	f043 0304 	orr.w	r3, r3, #4
 8001822:	6193      	str	r3, [r2, #24]
 8001824:	4b24      	ldr	r3, [pc, #144]	@ (80018b8 <MX_GPIO_Init+0xcc>)
 8001826:	699b      	ldr	r3, [r3, #24]
 8001828:	f003 0304 	and.w	r3, r3, #4
 800182c:	60bb      	str	r3, [r7, #8]
 800182e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001830:	4b21      	ldr	r3, [pc, #132]	@ (80018b8 <MX_GPIO_Init+0xcc>)
 8001832:	699b      	ldr	r3, [r3, #24]
 8001834:	4a20      	ldr	r2, [pc, #128]	@ (80018b8 <MX_GPIO_Init+0xcc>)
 8001836:	f043 0308 	orr.w	r3, r3, #8
 800183a:	6193      	str	r3, [r2, #24]
 800183c:	4b1e      	ldr	r3, [pc, #120]	@ (80018b8 <MX_GPIO_Init+0xcc>)
 800183e:	699b      	ldr	r3, [r3, #24]
 8001840:	f003 0308 	and.w	r3, r3, #8
 8001844:	607b      	str	r3, [r7, #4]
 8001846:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_3|GPIO_PIN_5, GPIO_PIN_RESET);
 8001848:	2200      	movs	r2, #0
 800184a:	2128      	movs	r1, #40	@ 0x28
 800184c:	481b      	ldr	r0, [pc, #108]	@ (80018bc <MX_GPIO_Init+0xd0>)
 800184e:	f001 fd12 	bl	8003276 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9, GPIO_PIN_RESET);
 8001852:	2200      	movs	r2, #0
 8001854:	f44f 6160 	mov.w	r1, #3584	@ 0xe00
 8001858:	4819      	ldr	r0, [pc, #100]	@ (80018c0 <MX_GPIO_Init+0xd4>)
 800185a:	f001 fd0c 	bl	8003276 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA3 PA5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 800185e:	2328      	movs	r3, #40	@ 0x28
 8001860:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001862:	2301      	movs	r3, #1
 8001864:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001866:	2300      	movs	r3, #0
 8001868:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186a:	2302      	movs	r3, #2
 800186c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0310 	add.w	r3, r7, #16
 8001872:	4619      	mov	r1, r3
 8001874:	4811      	ldr	r0, [pc, #68]	@ (80018bc <MX_GPIO_Init+0xd0>)
 8001876:	f001 fb63 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800187a:	2307      	movs	r3, #7
 800187c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001882:	2300      	movs	r3, #0
 8001884:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001886:	f107 0310 	add.w	r3, r7, #16
 800188a:	4619      	mov	r1, r3
 800188c:	480c      	ldr	r0, [pc, #48]	@ (80018c0 <MX_GPIO_Init+0xd4>)
 800188e:	f001 fb57 	bl	8002f40 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10 PB11 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_9;
 8001892:	f44f 6360 	mov.w	r3, #3584	@ 0xe00
 8001896:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001898:	2301      	movs	r3, #1
 800189a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800189c:	2300      	movs	r3, #0
 800189e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018a0:	2302      	movs	r3, #2
 80018a2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018a4:	f107 0310 	add.w	r3, r7, #16
 80018a8:	4619      	mov	r1, r3
 80018aa:	4805      	ldr	r0, [pc, #20]	@ (80018c0 <MX_GPIO_Init+0xd4>)
 80018ac:	f001 fb48 	bl	8002f40 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80018b0:	bf00      	nop
 80018b2:	3720      	adds	r7, #32
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40010800 	.word	0x40010800
 80018c0:	40010c00 	.word	0x40010c00
 80018c4:	00000000 	.word	0x00000000

080018c8 <update_screen>:

/* USER CODE BEGIN 4 */
void update_screen() {
 80018c8:	b5b0      	push	{r4, r5, r7, lr}
 80018ca:	b088      	sub	sp, #32
 80018cc:	af04      	add	r7, sp, #16
	  long uint32_t =  HAL_GetTick();
 80018ce:	f000 fd4f 	bl	8002370 <HAL_GetTick>
 80018d2:	4603      	mov	r3, r0
 80018d4:	60fb      	str	r3, [r7, #12]
	  if(program_state == HEATING) {
 80018d6:	4b74      	ldr	r3, [pc, #464]	@ (8001aa8 <update_screen+0x1e0>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b01      	cmp	r3, #1
 80018dc:	d173      	bne.n	80019c6 <update_screen+0xfe>
		  ssd1306_Fill(Black);
 80018de:	2000      	movs	r0, #0
 80018e0:	f003 fbd0 	bl	8005084 <ssd1306_Fill>
		  float temp = Thermistor_get_temp();
 80018e4:	f7ff fd06 	bl	80012f4 <Thermistor_get_temp>
 80018e8:	60b8      	str	r0, [r7, #8]
		  snprintf(text, 10, "%.2f/%.0f", Thermistor_get_temp(), targetTemp);
 80018ea:	f7ff fd03 	bl	80012f4 <Thermistor_get_temp>
 80018ee:	4603      	mov	r3, r0
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fd99 	bl	8000428 <__aeabi_f2d>
 80018f6:	4604      	mov	r4, r0
 80018f8:	460d      	mov	r5, r1
 80018fa:	4b6c      	ldr	r3, [pc, #432]	@ (8001aac <update_screen+0x1e4>)
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4618      	mov	r0, r3
 8001900:	f7fe fd92 	bl	8000428 <__aeabi_f2d>
 8001904:	4602      	mov	r2, r0
 8001906:	460b      	mov	r3, r1
 8001908:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800190c:	e9cd 4500 	strd	r4, r5, [sp]
 8001910:	4a67      	ldr	r2, [pc, #412]	@ (8001ab0 <update_screen+0x1e8>)
 8001912:	210a      	movs	r1, #10
 8001914:	4867      	ldr	r0, [pc, #412]	@ (8001ab4 <update_screen+0x1ec>)
 8001916:	f004 fa65 	bl	8005de4 <sniprintf>
		  ssd1306_SetCursor(1, 1);
 800191a:	2101      	movs	r1, #1
 800191c:	2001      	movs	r0, #1
 800191e:	f003 fcf9 	bl	8005314 <ssd1306_SetCursor>
		  ssd1306_WriteString("Temp: ",Font_6x8, White);
 8001922:	4b65      	ldr	r3, [pc, #404]	@ (8001ab8 <update_screen+0x1f0>)
 8001924:	2201      	movs	r2, #1
 8001926:	9200      	str	r2, [sp, #0]
 8001928:	cb0e      	ldmia	r3, {r1, r2, r3}
 800192a:	4864      	ldr	r0, [pc, #400]	@ (8001abc <update_screen+0x1f4>)
 800192c:	f003 fccc 	bl	80052c8 <ssd1306_WriteString>
		  ssd1306_SetCursor(50, 1);
 8001930:	2101      	movs	r1, #1
 8001932:	2032      	movs	r0, #50	@ 0x32
 8001934:	f003 fcee 	bl	8005314 <ssd1306_SetCursor>
		  if(temp < -30 || temp > 100) {
 8001938:	4961      	ldr	r1, [pc, #388]	@ (8001ac0 <update_screen+0x1f8>)
 800193a:	68b8      	ldr	r0, [r7, #8]
 800193c:	f7ff fbc0 	bl	80010c0 <__aeabi_fcmplt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d106      	bne.n	8001954 <update_screen+0x8c>
 8001946:	495f      	ldr	r1, [pc, #380]	@ (8001ac4 <update_screen+0x1fc>)
 8001948:	68b8      	ldr	r0, [r7, #8]
 800194a:	f7ff fbd7 	bl	80010fc <__aeabi_fcmpgt>
 800194e:	4603      	mov	r3, r0
 8001950:	2b00      	cmp	r3, #0
 8001952:	d007      	beq.n	8001964 <update_screen+0x9c>
			  ssd1306_WriteString("THERM_ERROR", Font_6x8, White);
 8001954:	4b58      	ldr	r3, [pc, #352]	@ (8001ab8 <update_screen+0x1f0>)
 8001956:	2201      	movs	r2, #1
 8001958:	9200      	str	r2, [sp, #0]
 800195a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800195c:	485a      	ldr	r0, [pc, #360]	@ (8001ac8 <update_screen+0x200>)
 800195e:	f003 fcb3 	bl	80052c8 <ssd1306_WriteString>
 8001962:	e006      	b.n	8001972 <update_screen+0xaa>
		  } else {
			  ssd1306_WriteString(text, Font_6x8, White);
 8001964:	4b54      	ldr	r3, [pc, #336]	@ (8001ab8 <update_screen+0x1f0>)
 8001966:	2201      	movs	r2, #1
 8001968:	9200      	str	r2, [sp, #0]
 800196a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800196c:	4851      	ldr	r0, [pc, #324]	@ (8001ab4 <update_screen+0x1ec>)
 800196e:	f003 fcab 	bl	80052c8 <ssd1306_WriteString>
		  }

		  snprintf(text, 10, "%.2f%%", PWM_Value / 255.0);
 8001972:	4b56      	ldr	r3, [pc, #344]	@ (8001acc <update_screen+0x204>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd44 	bl	8000404 <__aeabi_i2d>
 800197c:	a348      	add	r3, pc, #288	@ (adr r3, 8001aa0 <update_screen+0x1d8>)
 800197e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001982:	f7fe fed3 	bl	800072c <__aeabi_ddiv>
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	e9cd 2300 	strd	r2, r3, [sp]
 800198e:	4a50      	ldr	r2, [pc, #320]	@ (8001ad0 <update_screen+0x208>)
 8001990:	210a      	movs	r1, #10
 8001992:	4848      	ldr	r0, [pc, #288]	@ (8001ab4 <update_screen+0x1ec>)
 8001994:	f004 fa26 	bl	8005de4 <sniprintf>
		  ssd1306_SetCursor(1, 10);
 8001998:	210a      	movs	r1, #10
 800199a:	2001      	movs	r0, #1
 800199c:	f003 fcba 	bl	8005314 <ssd1306_SetCursor>
		  ssd1306_WriteString("Heater: ",Font_6x8, White);
 80019a0:	4b45      	ldr	r3, [pc, #276]	@ (8001ab8 <update_screen+0x1f0>)
 80019a2:	2201      	movs	r2, #1
 80019a4:	9200      	str	r2, [sp, #0]
 80019a6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019a8:	484a      	ldr	r0, [pc, #296]	@ (8001ad4 <update_screen+0x20c>)
 80019aa:	f003 fc8d 	bl	80052c8 <ssd1306_WriteString>
		  ssd1306_SetCursor(50, 10);
 80019ae:	210a      	movs	r1, #10
 80019b0:	2032      	movs	r0, #50	@ 0x32
 80019b2:	f003 fcaf 	bl	8005314 <ssd1306_SetCursor>
		  ssd1306_WriteString(text, Font_6x8, White);
 80019b6:	4b40      	ldr	r3, [pc, #256]	@ (8001ab8 <update_screen+0x1f0>)
 80019b8:	2201      	movs	r2, #1
 80019ba:	9200      	str	r2, [sp, #0]
 80019bc:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019be:	483d      	ldr	r0, [pc, #244]	@ (8001ab4 <update_screen+0x1ec>)
 80019c0:	f003 fc82 	bl	80052c8 <ssd1306_WriteString>
 80019c4:	e065      	b.n	8001a92 <update_screen+0x1ca>

	  } else if (program_state == MAIN_MENU) {
 80019c6:	4b38      	ldr	r3, [pc, #224]	@ (8001aa8 <update_screen+0x1e0>)
 80019c8:	781b      	ldrb	r3, [r3, #0]
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d161      	bne.n	8001a92 <update_screen+0x1ca>

		  ssd1306_Fill(Black);
 80019ce:	2000      	movs	r0, #0
 80019d0:	f003 fb58 	bl	8005084 <ssd1306_Fill>
		  ssd1306_SetCursor(0,0);
 80019d4:	2100      	movs	r1, #0
 80019d6:	2000      	movs	r0, #0
 80019d8:	f003 fc9c 	bl	8005314 <ssd1306_SetCursor>
		  ssd1306_WriteString("Material:", Font_6x8, White);
 80019dc:	4b36      	ldr	r3, [pc, #216]	@ (8001ab8 <update_screen+0x1f0>)
 80019de:	2201      	movs	r2, #1
 80019e0:	9200      	str	r2, [sp, #0]
 80019e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019e4:	483c      	ldr	r0, [pc, #240]	@ (8001ad8 <update_screen+0x210>)
 80019e6:	f003 fc6f 	bl	80052c8 <ssd1306_WriteString>

		  ssd1306_SetCursor((128/2) - (strlen(filament_names[menu_index]) * 11/2), ((32/2) - (18/2)) + 1);
 80019ea:	4b3c      	ldr	r3, [pc, #240]	@ (8001adc <update_screen+0x214>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	461a      	mov	r2, r3
 80019f0:	4b3b      	ldr	r3, [pc, #236]	@ (8001ae0 <update_screen+0x218>)
 80019f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019f6:	4618      	mov	r0, r3
 80019f8:	f7fe fbaa 	bl	8000150 <strlen>
 80019fc:	4602      	mov	r2, r0
 80019fe:	4613      	mov	r3, r2
 8001a00:	009b      	lsls	r3, r3, #2
 8001a02:	4413      	add	r3, r2
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	4413      	add	r3, r2
 8001a08:	085b      	lsrs	r3, r3, #1
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	f1c3 0340 	rsb	r3, r3, #64	@ 0x40
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	2108      	movs	r1, #8
 8001a14:	4618      	mov	r0, r3
 8001a16:	f003 fc7d 	bl	8005314 <ssd1306_SetCursor>
		  ssd1306_WriteString(filament_names[menu_index], Font_11x18, White);
 8001a1a:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <update_screen+0x214>)
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	461a      	mov	r2, r3
 8001a20:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae0 <update_screen+0x218>)
 8001a22:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001a26:	4b2f      	ldr	r3, [pc, #188]	@ (8001ae4 <update_screen+0x21c>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	9200      	str	r2, [sp, #0]
 8001a2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a2e:	f003 fc4b 	bl	80052c8 <ssd1306_WriteString>

		  ssd1306_SetCursor((128/2) + (strlen(filament_names[menu_index]) * 11/2) + 2, ((32/2) - (18/2)) + 1);
 8001a32:	4b2a      	ldr	r3, [pc, #168]	@ (8001adc <update_screen+0x214>)
 8001a34:	781b      	ldrb	r3, [r3, #0]
 8001a36:	461a      	mov	r2, r3
 8001a38:	4b29      	ldr	r3, [pc, #164]	@ (8001ae0 <update_screen+0x218>)
 8001a3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a3e:	4618      	mov	r0, r3
 8001a40:	f7fe fb86 	bl	8000150 <strlen>
 8001a44:	4602      	mov	r2, r0
 8001a46:	4613      	mov	r3, r2
 8001a48:	009b      	lsls	r3, r3, #2
 8001a4a:	4413      	add	r3, r2
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	4413      	add	r3, r2
 8001a50:	085b      	lsrs	r3, r3, #1
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	3342      	adds	r3, #66	@ 0x42
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2108      	movs	r1, #8
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f003 fc5a 	bl	8005314 <ssd1306_SetCursor>
		  char text[4];
		  snprintf(text, 4, "%.0f°", filament_temps[menu_index]);
 8001a60:	4b1e      	ldr	r3, [pc, #120]	@ (8001adc <update_screen+0x214>)
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	461a      	mov	r2, r3
 8001a66:	4b20      	ldr	r3, [pc, #128]	@ (8001ae8 <update_screen+0x220>)
 8001a68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	f7fe fcdb 	bl	8000428 <__aeabi_f2d>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	1d38      	adds	r0, r7, #4
 8001a78:	e9cd 2300 	strd	r2, r3, [sp]
 8001a7c:	4a1b      	ldr	r2, [pc, #108]	@ (8001aec <update_screen+0x224>)
 8001a7e:	2104      	movs	r1, #4
 8001a80:	f004 f9b0 	bl	8005de4 <sniprintf>
		  ssd1306_WriteString(text, Font_7x10, White);
 8001a84:	4b1a      	ldr	r3, [pc, #104]	@ (8001af0 <update_screen+0x228>)
 8001a86:	1d38      	adds	r0, r7, #4
 8001a88:	2201      	movs	r2, #1
 8001a8a:	9200      	str	r2, [sp, #0]
 8001a8c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001a8e:	f003 fc1b 	bl	80052c8 <ssd1306_WriteString>
	  }

	  ssd1306_UpdateScreen();
 8001a92:	f003 fb0f 	bl	80050b4 <ssd1306_UpdateScreen>
}
 8001a96:	bf00      	nop
 8001a98:	3710      	adds	r7, #16
 8001a9a:	46bd      	mov	sp, r7
 8001a9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a9e:	bf00      	nop
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	406fe000 	.word	0x406fe000
 8001aa8:	2000037a 	.word	0x2000037a
 8001aac:	20000368 	.word	0x20000368
 8001ab0:	08008480 	.word	0x08008480
 8001ab4:	20000370 	.word	0x20000370
 8001ab8:	08009fc0 	.word	0x08009fc0
 8001abc:	0800848c 	.word	0x0800848c
 8001ac0:	c1f00000 	.word	0xc1f00000
 8001ac4:	42c80000 	.word	0x42c80000
 8001ac8:	08008494 	.word	0x08008494
 8001acc:	20000365 	.word	0x20000365
 8001ad0:	080084a0 	.word	0x080084a0
 8001ad4:	080084a8 	.word	0x080084a8
 8001ad8:	080084b4 	.word	0x080084b4
 8001adc:	2000036c 	.word	0x2000036c
 8001ae0:	20000018 	.word	0x20000018
 8001ae4:	08009fd8 	.word	0x08009fd8
 8001ae8:	20000024 	.word	0x20000024
 8001aec:	080084c0 	.word	0x080084c0
 8001af0:	08009fcc 	.word	0x08009fcc

08001af4 <update_inputs>:

void update_inputs() {
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0

	button_left.poll <<= 1;
 8001af8:	4b5c      	ldr	r3, [pc, #368]	@ (8001c6c <update_inputs+0x178>)
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	005b      	lsls	r3, r3, #1
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	4b5a      	ldr	r3, [pc, #360]	@ (8001c6c <update_inputs+0x178>)
 8001b02:	701a      	strb	r2, [r3, #0]
	button_select.poll  <<= 1;
 8001b04:	4b5a      	ldr	r3, [pc, #360]	@ (8001c70 <update_inputs+0x17c>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
 8001b08:	005b      	lsls	r3, r3, #1
 8001b0a:	b2da      	uxtb	r2, r3
 8001b0c:	4b58      	ldr	r3, [pc, #352]	@ (8001c70 <update_inputs+0x17c>)
 8001b0e:	701a      	strb	r2, [r3, #0]
	button_right.poll   <<= 1;
 8001b10:	4b58      	ldr	r3, [pc, #352]	@ (8001c74 <update_inputs+0x180>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
 8001b14:	005b      	lsls	r3, r3, #1
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b56      	ldr	r3, [pc, #344]	@ (8001c74 <update_inputs+0x180>)
 8001b1a:	701a      	strb	r2, [r3, #0]

	button_left.poll  |= HAL_GPIO_ReadPin(GPIO_BUTTON, PIN_BUTTON_LEFT); // wrong button soldered on LEFT
 8001b1c:	2102      	movs	r1, #2
 8001b1e:	4856      	ldr	r0, [pc, #344]	@ (8001c78 <update_inputs+0x184>)
 8001b20:	f001 fb92 	bl	8003248 <HAL_GPIO_ReadPin>
 8001b24:	4603      	mov	r3, r0
 8001b26:	461a      	mov	r2, r3
 8001b28:	4b50      	ldr	r3, [pc, #320]	@ (8001c6c <update_inputs+0x178>)
 8001b2a:	781b      	ldrb	r3, [r3, #0]
 8001b2c:	4313      	orrs	r3, r2
 8001b2e:	b2da      	uxtb	r2, r3
 8001b30:	4b4e      	ldr	r3, [pc, #312]	@ (8001c6c <update_inputs+0x178>)
 8001b32:	701a      	strb	r2, [r3, #0]
	button_select.poll  |=   !HAL_GPIO_ReadPin(GPIO_BUTTON, PIN_BUTTON_SELECT);
 8001b34:	2101      	movs	r1, #1
 8001b36:	4850      	ldr	r0, [pc, #320]	@ (8001c78 <update_inputs+0x184>)
 8001b38:	f001 fb86 	bl	8003248 <HAL_GPIO_ReadPin>
 8001b3c:	4603      	mov	r3, r0
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	bf0c      	ite	eq
 8001b42:	2301      	moveq	r3, #1
 8001b44:	2300      	movne	r3, #0
 8001b46:	b2db      	uxtb	r3, r3
 8001b48:	4619      	mov	r1, r3
 8001b4a:	4b49      	ldr	r3, [pc, #292]	@ (8001c70 <update_inputs+0x17c>)
 8001b4c:	781b      	ldrb	r3, [r3, #0]
 8001b4e:	b25a      	sxtb	r2, r3
 8001b50:	b24b      	sxtb	r3, r1
 8001b52:	4313      	orrs	r3, r2
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	b2da      	uxtb	r2, r3
 8001b58:	4b45      	ldr	r3, [pc, #276]	@ (8001c70 <update_inputs+0x17c>)
 8001b5a:	701a      	strb	r2, [r3, #0]
	button_right.poll  |=  !HAL_GPIO_ReadPin(GPIO_BUTTON, PIN_BUTTON_RIGHT);
 8001b5c:	2104      	movs	r1, #4
 8001b5e:	4846      	ldr	r0, [pc, #280]	@ (8001c78 <update_inputs+0x184>)
 8001b60:	f001 fb72 	bl	8003248 <HAL_GPIO_ReadPin>
 8001b64:	4603      	mov	r3, r0
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	bf0c      	ite	eq
 8001b6a:	2301      	moveq	r3, #1
 8001b6c:	2300      	movne	r3, #0
 8001b6e:	b2db      	uxtb	r3, r3
 8001b70:	4619      	mov	r1, r3
 8001b72:	4b40      	ldr	r3, [pc, #256]	@ (8001c74 <update_inputs+0x180>)
 8001b74:	781b      	ldrb	r3, [r3, #0]
 8001b76:	b25a      	sxtb	r2, r3
 8001b78:	b24b      	sxtb	r3, r1
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	b25b      	sxtb	r3, r3
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	4b3c      	ldr	r3, [pc, #240]	@ (8001c74 <update_inputs+0x180>)
 8001b82:	701a      	strb	r2, [r3, #0]

	if(is_pressed(button_right)) {
 8001b84:	4b3b      	ldr	r3, [pc, #236]	@ (8001c74 <update_inputs+0x180>)
 8001b86:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001b8a:	f000 f8d9 	bl	8001d40 <is_pressed>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d01b      	beq.n	8001bcc <update_inputs+0xd8>
		if(HAL_GetTick() - button_right.last_press > 60){
 8001b94:	f000 fbec 	bl	8002370 <HAL_GetTick>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	4b36      	ldr	r3, [pc, #216]	@ (8001c74 <update_inputs+0x180>)
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	1ad3      	subs	r3, r2, r3
 8001ba0:	2b3c      	cmp	r3, #60	@ 0x3c
 8001ba2:	d90e      	bls.n	8001bc2 <update_inputs+0xce>
			menu_index++;
 8001ba4:	4b35      	ldr	r3, [pc, #212]	@ (8001c7c <update_inputs+0x188>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4b33      	ldr	r3, [pc, #204]	@ (8001c7c <update_inputs+0x188>)
 8001bae:	701a      	strb	r2, [r3, #0]
			if(menu_index >= menu_size) {
 8001bb0:	4b32      	ldr	r3, [pc, #200]	@ (8001c7c <update_inputs+0x188>)
 8001bb2:	781a      	ldrb	r2, [r3, #0]
 8001bb4:	4b32      	ldr	r3, [pc, #200]	@ (8001c80 <update_inputs+0x18c>)
 8001bb6:	781b      	ldrb	r3, [r3, #0]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	d302      	bcc.n	8001bc2 <update_inputs+0xce>
				menu_index = 0;
 8001bbc:	4b2f      	ldr	r3, [pc, #188]	@ (8001c7c <update_inputs+0x188>)
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	701a      	strb	r2, [r3, #0]
			}
		}

		button_right.last_press = HAL_GetTick();
 8001bc2:	f000 fbd5 	bl	8002370 <HAL_GetTick>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	4a2a      	ldr	r2, [pc, #168]	@ (8001c74 <update_inputs+0x180>)
 8001bca:	6053      	str	r3, [r2, #4]
	}

	if(is_pressed(button_left)) {
 8001bcc:	4b27      	ldr	r3, [pc, #156]	@ (8001c6c <update_inputs+0x178>)
 8001bce:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001bd2:	f000 f8b5 	bl	8001d40 <is_pressed>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d01d      	beq.n	8001c18 <update_inputs+0x124>
	if(HAL_GetTick() - button_left.last_press > 60){
 8001bdc:	f000 fbc8 	bl	8002370 <HAL_GetTick>
 8001be0:	4602      	mov	r2, r0
 8001be2:	4b22      	ldr	r3, [pc, #136]	@ (8001c6c <update_inputs+0x178>)
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	1ad3      	subs	r3, r2, r3
 8001be8:	2b3c      	cmp	r3, #60	@ 0x3c
 8001bea:	d910      	bls.n	8001c0e <update_inputs+0x11a>
		if(menu_index == 0) {
 8001bec:	4b23      	ldr	r3, [pc, #140]	@ (8001c7c <update_inputs+0x188>)
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d106      	bne.n	8001c02 <update_inputs+0x10e>
			menu_index = menu_size - 1;
 8001bf4:	4b22      	ldr	r3, [pc, #136]	@ (8001c80 <update_inputs+0x18c>)
 8001bf6:	781b      	ldrb	r3, [r3, #0]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	b2da      	uxtb	r2, r3
 8001bfc:	4b1f      	ldr	r3, [pc, #124]	@ (8001c7c <update_inputs+0x188>)
 8001bfe:	701a      	strb	r2, [r3, #0]
 8001c00:	e005      	b.n	8001c0e <update_inputs+0x11a>
		} else {
			menu_index--;
 8001c02:	4b1e      	ldr	r3, [pc, #120]	@ (8001c7c <update_inputs+0x188>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	b2da      	uxtb	r2, r3
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001c7c <update_inputs+0x188>)
 8001c0c:	701a      	strb	r2, [r3, #0]
		}
	}
		button_left.last_press = HAL_GetTick();
 8001c0e:	f000 fbaf 	bl	8002370 <HAL_GetTick>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4a15      	ldr	r2, [pc, #84]	@ (8001c6c <update_inputs+0x178>)
 8001c16:	6053      	str	r3, [r2, #4]
	}
	if(is_pressed(button_select)) {
 8001c18:	4b15      	ldr	r3, [pc, #84]	@ (8001c70 <update_inputs+0x17c>)
 8001c1a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8001c1e:	f000 f88f 	bl	8001d40 <is_pressed>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d01e      	beq.n	8001c66 <update_inputs+0x172>
		if(HAL_GetTick() - button_select.last_press > 60){
 8001c28:	f000 fba2 	bl	8002370 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	4b10      	ldr	r3, [pc, #64]	@ (8001c70 <update_inputs+0x17c>)
 8001c30:	685b      	ldr	r3, [r3, #4]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	2b3c      	cmp	r3, #60	@ 0x3c
 8001c36:	d911      	bls.n	8001c5c <update_inputs+0x168>
			program_state = !program_state;
 8001c38:	4b12      	ldr	r3, [pc, #72]	@ (8001c84 <update_inputs+0x190>)
 8001c3a:	781b      	ldrb	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	bf0c      	ite	eq
 8001c40:	2301      	moveq	r3, #1
 8001c42:	2300      	movne	r3, #0
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	461a      	mov	r2, r3
 8001c48:	4b0e      	ldr	r3, [pc, #56]	@ (8001c84 <update_inputs+0x190>)
 8001c4a:	701a      	strb	r2, [r3, #0]
			targetTemp = filament_temps[menu_index];
 8001c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c7c <update_inputs+0x188>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	461a      	mov	r2, r3
 8001c52:	4b0d      	ldr	r3, [pc, #52]	@ (8001c88 <update_inputs+0x194>)
 8001c54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c58:	4a0c      	ldr	r2, [pc, #48]	@ (8001c8c <update_inputs+0x198>)
 8001c5a:	6013      	str	r3, [r2, #0]
		}
		button_select.last_press = HAL_GetTick();
 8001c5c:	f000 fb88 	bl	8002370 <HAL_GetTick>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4a03      	ldr	r2, [pc, #12]	@ (8001c70 <update_inputs+0x17c>)
 8001c64:	6053      	str	r3, [r2, #4]
	}
}
 8001c66:	bf00      	nop
 8001c68:	bd80      	pop	{r7, pc}
 8001c6a:	bf00      	nop
 8001c6c:	2000034c 	.word	0x2000034c
 8001c70:	2000035c 	.word	0x2000035c
 8001c74:	20000354 	.word	0x20000354
 8001c78:	40010c00 	.word	0x40010c00
 8001c7c:	2000036c 	.word	0x2000036c
 8001c80:	2000036d 	.word	0x2000036d
 8001c84:	2000037a 	.word	0x2000037a
 8001c88:	20000024 	.word	0x20000024
 8001c8c:	20000368 	.word	0x20000368

08001c90 <Therm_Process>:

void Therm_Process() {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
		HAL_ADC_Start(&hadc1);
 8001c96:	4824      	ldr	r0, [pc, #144]	@ (8001d28 <Therm_Process+0x98>)
 8001c98:	f000 fc70 	bl	800257c <HAL_ADC_Start>
		  HAL_ADC_PollForConversion(&hadc1,HAL_MAX_DELAY);
 8001c9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca0:	4821      	ldr	r0, [pc, #132]	@ (8001d28 <Therm_Process+0x98>)
 8001ca2:	f000 fd19 	bl	80026d8 <HAL_ADC_PollForConversion>
		  Thermistor_Process(HAL_ADC_GetValue(&hadc1));
 8001ca6:	4820      	ldr	r0, [pc, #128]	@ (8001d28 <Therm_Process+0x98>)
 8001ca8:	f000 fe1c 	bl	80028e4 <HAL_ADC_GetValue>
 8001cac:	4603      	mov	r3, r0
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	f7ff fbf9 	bl	80014a8 <Thermistor_Process>
		  float temp = Thermistor_get_temp();
 8001cb6:	f7ff fb1d 	bl	80012f4 <Thermistor_get_temp>
 8001cba:	6078      	str	r0, [r7, #4]

		  if(temp < -30  ||  temp > MAX_TEMP || program_state == MAIN_MENU) {
 8001cbc:	491b      	ldr	r1, [pc, #108]	@ (8001d2c <Therm_Process+0x9c>)
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7ff f9fe 	bl	80010c0 <__aeabi_fcmplt>
 8001cc4:	4603      	mov	r3, r0
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d10a      	bne.n	8001ce0 <Therm_Process+0x50>
 8001cca:	4919      	ldr	r1, [pc, #100]	@ (8001d30 <Therm_Process+0xa0>)
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7ff fa15 	bl	80010fc <__aeabi_fcmpgt>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d103      	bne.n	8001ce0 <Therm_Process+0x50>
 8001cd8:	4b16      	ldr	r3, [pc, #88]	@ (8001d34 <Therm_Process+0xa4>)
 8001cda:	781b      	ldrb	r3, [r3, #0]
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d103      	bne.n	8001ce8 <Therm_Process+0x58>
			 PWM_Value = 0;
 8001ce0:	4b15      	ldr	r3, [pc, #84]	@ (8001d38 <Therm_Process+0xa8>)
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	701a      	strb	r2, [r3, #0]
 8001ce6:	e015      	b.n	8001d14 <Therm_Process+0x84>
		  } else {
			  PWM_Value = 255.0 * PID_GetDutyCycle(temp, targetTemp);
 8001ce8:	4b14      	ldr	r3, [pc, #80]	@ (8001d3c <Therm_Process+0xac>)
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f7ff fa0e 	bl	8001110 <PID_GetDutyCycle>
 8001cf4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001d20 <Therm_Process+0x90>)
 8001cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cfa:	f7fe fbed 	bl	80004d8 <__aeabi_dmul>
 8001cfe:	4602      	mov	r2, r0
 8001d00:	460b      	mov	r3, r1
 8001d02:	4610      	mov	r0, r2
 8001d04:	4619      	mov	r1, r3
 8001d06:	f7fe febf 	bl	8000a88 <__aeabi_d2uiz>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	b2da      	uxtb	r2, r3
 8001d0e:	4b0a      	ldr	r3, [pc, #40]	@ (8001d38 <Therm_Process+0xa8>)
 8001d10:	701a      	strb	r2, [r3, #0]
		  }

}
 8001d12:	bf00      	nop
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	f3af 8000 	nop.w
 8001d20:	00000000 	.word	0x00000000
 8001d24:	406fe000 	.word	0x406fe000
 8001d28:	20000280 	.word	0x20000280
 8001d2c:	c1f00000 	.word	0xc1f00000
 8001d30:	42a00000 	.word	0x42a00000
 8001d34:	2000037a 	.word	0x2000037a
 8001d38:	20000365 	.word	0x20000365
 8001d3c:	20000368 	.word	0x20000368

08001d40 <is_pressed>:

bool is_pressed(button  button) {
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	463b      	mov	r3, r7
 8001d48:	e883 0003 	stmia.w	r3, {r0, r1}
	return (button.poll & 0xF) == 0xF;
 8001d4c:	783b      	ldrb	r3, [r7, #0]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	2b0f      	cmp	r3, #15
 8001d54:	bf0c      	ite	eq
 8001d56:	2301      	moveq	r3, #1
 8001d58:	2300      	movne	r3, #0
 8001d5a:	b2db      	uxtb	r3, r3
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr

08001d66 <since_last>:

uint32_t since_last(uint32_t last_time) {
 8001d66:	b580      	push	{r7, lr}
 8001d68:	b084      	sub	sp, #16
 8001d6a:	af00      	add	r7, sp, #0
 8001d6c:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 8001d6e:	f000 faff 	bl	8002370 <HAL_GetTick>
 8001d72:	60f8      	str	r0, [r7, #12]
	if (last_time > now) {
 8001d74:	687a      	ldr	r2, [r7, #4]
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	429a      	cmp	r2, r3
 8001d7a:	d904      	bls.n	8001d86 <since_last+0x20>
		return now + (UINT32_MAX  - last_time);
 8001d7c:	68fa      	ldr	r2, [r7, #12]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	1ad3      	subs	r3, r2, r3
 8001d82:	3b01      	subs	r3, #1
 8001d84:	e002      	b.n	8001d8c <since_last+0x26>
	} else {
		return now - last_time;
 8001d86:	68fa      	ldr	r2, [r7, #12]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	1ad3      	subs	r3, r2, r3
	}
}
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	3710      	adds	r7, #16
 8001d90:	46bd      	mov	sp, r7
 8001d92:	bd80      	pop	{r7, pc}

08001d94 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b082      	sub	sp, #8
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */
  if (htim == &htim3 )
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	4a18      	ldr	r2, [pc, #96]	@ (8001e00 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d122      	bne.n	8001dea <HAL_TIM_PeriodElapsedCallback+0x56>
  {
	  PWM_Counter++; // Considering that the counter is an 8-bit integer, it will overflow naturally.
 8001da4:	4b17      	ldr	r3, [pc, #92]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001da6:	781b      	ldrb	r3, [r3, #0]
 8001da8:	3301      	adds	r3, #1
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b15      	ldr	r3, [pc, #84]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001dae:	701a      	strb	r2, [r3, #0]
//	  if(PWM_Counter > 255) {
//		  PWM_Counter = 0;
//	  }
	if(PWM_Counter <= PWM_Value) {
 8001db0:	4b14      	ldr	r3, [pc, #80]	@ (8001e04 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001db2:	781a      	ldrb	r2, [r3, #0]
 8001db4:	4b14      	ldr	r3, [pc, #80]	@ (8001e08 <HAL_TIM_PeriodElapsedCallback+0x74>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d80b      	bhi.n	8001dd4 <HAL_TIM_PeriodElapsedCallback+0x40>
		HAL_GPIO_WritePin(GPIO_HEATER, PIN_HEATER, GPIO_PIN_SET);
 8001dbc:	2201      	movs	r2, #1
 8001dbe:	2120      	movs	r1, #32
 8001dc0:	4812      	ldr	r0, [pc, #72]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001dc2:	f001 fa58 	bl	8003276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_LED, PIN_LED_B, GPIO_PIN_RESET);
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001dcc:	4810      	ldr	r0, [pc, #64]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001dce:	f001 fa52 	bl	8003276 <HAL_GPIO_WritePin>
 8001dd2:	e00a      	b.n	8001dea <HAL_TIM_PeriodElapsedCallback+0x56>
	} else {
		HAL_GPIO_WritePin(GPIO_HEATER, PIN_HEATER, GPIO_PIN_RESET);
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	2120      	movs	r1, #32
 8001dd8:	480c      	ldr	r0, [pc, #48]	@ (8001e0c <HAL_TIM_PeriodElapsedCallback+0x78>)
 8001dda:	f001 fa4c 	bl	8003276 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIO_LED, PIN_LED_B, GPIO_PIN_SET);
 8001dde:	2201      	movs	r2, #1
 8001de0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001de4:	480a      	ldr	r0, [pc, #40]	@ (8001e10 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001de6:	f001 fa46 	bl	8003276 <HAL_GPIO_WritePin>
	}
  }

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	681b      	ldr	r3, [r3, #0]
 8001dee:	4a09      	ldr	r2, [pc, #36]	@ (8001e14 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001df0:	4293      	cmp	r3, r2
 8001df2:	d101      	bne.n	8001df8 <HAL_TIM_PeriodElapsedCallback+0x64>
    HAL_IncTick();
 8001df4:	f000 faaa 	bl	800234c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	3708      	adds	r7, #8
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}
 8001e00:	20000304 	.word	0x20000304
 8001e04:	20000364 	.word	0x20000364
 8001e08:	20000365 	.word	0x20000365
 8001e0c:	40010800 	.word	0x40010800
 8001e10:	40010c00 	.word	0x40010c00
 8001e14:	40000800 	.word	0x40000800

08001e18 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e1c:	b672      	cpsid	i
}
 8001e1e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001e20:	bf00      	nop
 8001e22:	e7fd      	b.n	8001e20 <Error_Handler+0x8>

08001e24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	b085      	sub	sp, #20
 8001e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e2a:	4b15      	ldr	r3, [pc, #84]	@ (8001e80 <HAL_MspInit+0x5c>)
 8001e2c:	699b      	ldr	r3, [r3, #24]
 8001e2e:	4a14      	ldr	r2, [pc, #80]	@ (8001e80 <HAL_MspInit+0x5c>)
 8001e30:	f043 0301 	orr.w	r3, r3, #1
 8001e34:	6193      	str	r3, [r2, #24]
 8001e36:	4b12      	ldr	r3, [pc, #72]	@ (8001e80 <HAL_MspInit+0x5c>)
 8001e38:	699b      	ldr	r3, [r3, #24]
 8001e3a:	f003 0301 	and.w	r3, r3, #1
 8001e3e:	60bb      	str	r3, [r7, #8]
 8001e40:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e42:	4b0f      	ldr	r3, [pc, #60]	@ (8001e80 <HAL_MspInit+0x5c>)
 8001e44:	69db      	ldr	r3, [r3, #28]
 8001e46:	4a0e      	ldr	r2, [pc, #56]	@ (8001e80 <HAL_MspInit+0x5c>)
 8001e48:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e4c:	61d3      	str	r3, [r2, #28]
 8001e4e:	4b0c      	ldr	r3, [pc, #48]	@ (8001e80 <HAL_MspInit+0x5c>)
 8001e50:	69db      	ldr	r3, [r3, #28]
 8001e52:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e56:	607b      	str	r3, [r7, #4]
 8001e58:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8001e84 <HAL_MspInit+0x60>)
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
 8001e62:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	4a04      	ldr	r2, [pc, #16]	@ (8001e84 <HAL_MspInit+0x60>)
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e76:	bf00      	nop
 8001e78:	3714      	adds	r7, #20
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bc80      	pop	{r7}
 8001e7e:	4770      	bx	lr
 8001e80:	40021000 	.word	0x40021000
 8001e84:	40010000 	.word	0x40010000

08001e88 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b088      	sub	sp, #32
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e90:	f107 0310 	add.w	r3, r7, #16
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
 8001e98:	605a      	str	r2, [r3, #4]
 8001e9a:	609a      	str	r2, [r3, #8]
 8001e9c:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	4a14      	ldr	r2, [pc, #80]	@ (8001ef4 <HAL_ADC_MspInit+0x6c>)
 8001ea4:	4293      	cmp	r3, r2
 8001ea6:	d121      	bne.n	8001eec <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001ea8:	4b13      	ldr	r3, [pc, #76]	@ (8001ef8 <HAL_ADC_MspInit+0x70>)
 8001eaa:	699b      	ldr	r3, [r3, #24]
 8001eac:	4a12      	ldr	r2, [pc, #72]	@ (8001ef8 <HAL_ADC_MspInit+0x70>)
 8001eae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001eb2:	6193      	str	r3, [r2, #24]
 8001eb4:	4b10      	ldr	r3, [pc, #64]	@ (8001ef8 <HAL_ADC_MspInit+0x70>)
 8001eb6:	699b      	ldr	r3, [r3, #24]
 8001eb8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001ebc:	60fb      	str	r3, [r7, #12]
 8001ebe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ec0:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef8 <HAL_ADC_MspInit+0x70>)
 8001ec2:	699b      	ldr	r3, [r3, #24]
 8001ec4:	4a0c      	ldr	r2, [pc, #48]	@ (8001ef8 <HAL_ADC_MspInit+0x70>)
 8001ec6:	f043 0304 	orr.w	r3, r3, #4
 8001eca:	6193      	str	r3, [r2, #24]
 8001ecc:	4b0a      	ldr	r3, [pc, #40]	@ (8001ef8 <HAL_ADC_MspInit+0x70>)
 8001ece:	699b      	ldr	r3, [r3, #24]
 8001ed0:	f003 0304 	and.w	r3, r3, #4
 8001ed4:	60bb      	str	r3, [r7, #8]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001edc:	2303      	movs	r3, #3
 8001ede:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ee0:	f107 0310 	add.w	r3, r7, #16
 8001ee4:	4619      	mov	r1, r3
 8001ee6:	4805      	ldr	r0, [pc, #20]	@ (8001efc <HAL_ADC_MspInit+0x74>)
 8001ee8:	f001 f82a 	bl	8002f40 <HAL_GPIO_Init>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001eec:	bf00      	nop
 8001eee:	3720      	adds	r7, #32
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	40012400 	.word	0x40012400
 8001ef8:	40021000 	.word	0x40021000
 8001efc:	40010800 	.word	0x40010800

08001f00 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b088      	sub	sp, #32
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f08:	f107 0310 	add.w	r3, r7, #16
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	601a      	str	r2, [r3, #0]
 8001f10:	605a      	str	r2, [r3, #4]
 8001f12:	609a      	str	r2, [r3, #8]
 8001f14:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	4a15      	ldr	r2, [pc, #84]	@ (8001f70 <HAL_I2C_MspInit+0x70>)
 8001f1c:	4293      	cmp	r3, r2
 8001f1e:	d123      	bne.n	8001f68 <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f20:	4b14      	ldr	r3, [pc, #80]	@ (8001f74 <HAL_I2C_MspInit+0x74>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	4a13      	ldr	r2, [pc, #76]	@ (8001f74 <HAL_I2C_MspInit+0x74>)
 8001f26:	f043 0308 	orr.w	r3, r3, #8
 8001f2a:	6193      	str	r3, [r2, #24]
 8001f2c:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <HAL_I2C_MspInit+0x74>)
 8001f2e:	699b      	ldr	r3, [r3, #24]
 8001f30:	f003 0308 	and.w	r3, r3, #8
 8001f34:	60fb      	str	r3, [r7, #12]
 8001f36:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f38:	23c0      	movs	r3, #192	@ 0xc0
 8001f3a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f3c:	2312      	movs	r3, #18
 8001f3e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001f40:	2303      	movs	r3, #3
 8001f42:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f44:	f107 0310 	add.w	r3, r7, #16
 8001f48:	4619      	mov	r1, r3
 8001f4a:	480b      	ldr	r0, [pc, #44]	@ (8001f78 <HAL_I2C_MspInit+0x78>)
 8001f4c:	f000 fff8 	bl	8002f40 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f50:	4b08      	ldr	r3, [pc, #32]	@ (8001f74 <HAL_I2C_MspInit+0x74>)
 8001f52:	69db      	ldr	r3, [r3, #28]
 8001f54:	4a07      	ldr	r2, [pc, #28]	@ (8001f74 <HAL_I2C_MspInit+0x74>)
 8001f56:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f5a:	61d3      	str	r3, [r2, #28]
 8001f5c:	4b05      	ldr	r3, [pc, #20]	@ (8001f74 <HAL_I2C_MspInit+0x74>)
 8001f5e:	69db      	ldr	r3, [r3, #28]
 8001f60:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f64:	60bb      	str	r3, [r7, #8]
 8001f66:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001f68:	bf00      	nop
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40005400 	.word	0x40005400
 8001f74:	40021000 	.word	0x40021000
 8001f78:	40010c00 	.word	0x40010c00

08001f7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	b084      	sub	sp, #16
 8001f80:	af00      	add	r7, sp, #0
 8001f82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a0d      	ldr	r2, [pc, #52]	@ (8001fc0 <HAL_TIM_Base_MspInit+0x44>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d113      	bne.n	8001fb6 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x48>)
 8001f90:	69db      	ldr	r3, [r3, #28]
 8001f92:	4a0c      	ldr	r2, [pc, #48]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x48>)
 8001f94:	f043 0302 	orr.w	r3, r3, #2
 8001f98:	61d3      	str	r3, [r2, #28]
 8001f9a:	4b0a      	ldr	r3, [pc, #40]	@ (8001fc4 <HAL_TIM_Base_MspInit+0x48>)
 8001f9c:	69db      	ldr	r3, [r3, #28]
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	2105      	movs	r1, #5
 8001faa:	201d      	movs	r0, #29
 8001fac:	f000 ff9d 	bl	8002eea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fb0:	201d      	movs	r0, #29
 8001fb2:	f000 ffb6 	bl	8002f22 <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM3_MspInit 1 */

  }

}
 8001fb6:	bf00      	nop
 8001fb8:	3710      	adds	r7, #16
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	40000400 	.word	0x40000400
 8001fc4:	40021000 	.word	0x40021000

08001fc8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b08e      	sub	sp, #56	@ 0x38
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	62fb      	str	r3, [r7, #44]	@ 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status = HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8001fde:	4b34      	ldr	r3, [pc, #208]	@ (80020b0 <HAL_InitTick+0xe8>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	4a33      	ldr	r2, [pc, #204]	@ (80020b0 <HAL_InitTick+0xe8>)
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	61d3      	str	r3, [r2, #28]
 8001fea:	4b31      	ldr	r3, [pc, #196]	@ (80020b0 <HAL_InitTick+0xe8>)
 8001fec:	69db      	ldr	r3, [r3, #28]
 8001fee:	f003 0304 	and.w	r3, r3, #4
 8001ff2:	60fb      	str	r3, [r7, #12]
 8001ff4:	68fb      	ldr	r3, [r7, #12]

/* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ff6:	f107 0210 	add.w	r2, r7, #16
 8001ffa:	f107 0314 	add.w	r3, r7, #20
 8001ffe:	4611      	mov	r1, r2
 8002000:	4618      	mov	r0, r3
 8002002:	f002 f9f1 	bl	80043e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002006:	6a3b      	ldr	r3, [r7, #32]
 8002008:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800200a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800200c:	2b00      	cmp	r3, #0
 800200e:	d103      	bne.n	8002018 <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002010:	f002 f9c2 	bl	8004398 <HAL_RCC_GetPCLK1Freq>
 8002014:	6378      	str	r0, [r7, #52]	@ 0x34
 8002016:	e004      	b.n	8002022 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002018:	f002 f9be 	bl	8004398 <HAL_RCC_GetPCLK1Freq>
 800201c:	4603      	mov	r3, r0
 800201e:	005b      	lsls	r3, r3, #1
 8002020:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002022:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002024:	4a23      	ldr	r2, [pc, #140]	@ (80020b4 <HAL_InitTick+0xec>)
 8002026:	fba2 2303 	umull	r2, r3, r2, r3
 800202a:	0c9b      	lsrs	r3, r3, #18
 800202c:	3b01      	subs	r3, #1
 800202e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002030:	4b21      	ldr	r3, [pc, #132]	@ (80020b8 <HAL_InitTick+0xf0>)
 8002032:	4a22      	ldr	r2, [pc, #136]	@ (80020bc <HAL_InitTick+0xf4>)
 8002034:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002036:	4b20      	ldr	r3, [pc, #128]	@ (80020b8 <HAL_InitTick+0xf0>)
 8002038:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800203c:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 800203e:	4a1e      	ldr	r2, [pc, #120]	@ (80020b8 <HAL_InitTick+0xf0>)
 8002040:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002042:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002044:	4b1c      	ldr	r3, [pc, #112]	@ (80020b8 <HAL_InitTick+0xf0>)
 8002046:	2200      	movs	r2, #0
 8002048:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800204a:	4b1b      	ldr	r3, [pc, #108]	@ (80020b8 <HAL_InitTick+0xf0>)
 800204c:	2200      	movs	r2, #0
 800204e:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002050:	4b19      	ldr	r3, [pc, #100]	@ (80020b8 <HAL_InitTick+0xf0>)
 8002052:	2200      	movs	r2, #0
 8002054:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002056:	4818      	ldr	r0, [pc, #96]	@ (80020b8 <HAL_InitTick+0xf0>)
 8002058:	f002 fb80 	bl	800475c <HAL_TIM_Base_Init>
 800205c:	4603      	mov	r3, r0
 800205e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
  if (status == HAL_OK)
 8002062:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002066:	2b00      	cmp	r3, #0
 8002068:	d11b      	bne.n	80020a2 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 800206a:	4813      	ldr	r0, [pc, #76]	@ (80020b8 <HAL_InitTick+0xf0>)
 800206c:	f002 fbc6 	bl	80047fc <HAL_TIM_Base_Start_IT>
 8002070:	4603      	mov	r3, r0
 8002072:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    if (status == HAL_OK)
 8002076:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800207a:	2b00      	cmp	r3, #0
 800207c:	d111      	bne.n	80020a2 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800207e:	201e      	movs	r0, #30
 8002080:	f000 ff4f 	bl	8002f22 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	2b0f      	cmp	r3, #15
 8002088:	d808      	bhi.n	800209c <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 800208a:	2200      	movs	r2, #0
 800208c:	6879      	ldr	r1, [r7, #4]
 800208e:	201e      	movs	r0, #30
 8002090:	f000 ff2b 	bl	8002eea <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002094:	4a0a      	ldr	r2, [pc, #40]	@ (80020c0 <HAL_InitTick+0xf8>)
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	6013      	str	r3, [r2, #0]
 800209a:	e002      	b.n	80020a2 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 800209c:	2301      	movs	r3, #1
 800209e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80020a2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	3738      	adds	r7, #56	@ 0x38
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40021000 	.word	0x40021000
 80020b4:	431bde83 	.word	0x431bde83
 80020b8:	20000384 	.word	0x20000384
 80020bc:	40000800 	.word	0x40000800
 80020c0:	20000034 	.word	0x20000034

080020c4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80020c4:	b480      	push	{r7}
 80020c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80020c8:	bf00      	nop
 80020ca:	e7fd      	b.n	80020c8 <NMI_Handler+0x4>

080020cc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80020cc:	b480      	push	{r7}
 80020ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80020d0:	bf00      	nop
 80020d2:	e7fd      	b.n	80020d0 <HardFault_Handler+0x4>

080020d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80020d4:	b480      	push	{r7}
 80020d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80020d8:	bf00      	nop
 80020da:	e7fd      	b.n	80020d8 <MemManage_Handler+0x4>

080020dc <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80020e0:	bf00      	nop
 80020e2:	e7fd      	b.n	80020e0 <BusFault_Handler+0x4>

080020e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80020e4:	b480      	push	{r7}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80020e8:	bf00      	nop
 80020ea:	e7fd      	b.n	80020e8 <UsageFault_Handler+0x4>

080020ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80020f0:	bf00      	nop
 80020f2:	46bd      	mov	sp, r7
 80020f4:	bc80      	pop	{r7}
 80020f6:	4770      	bx	lr

080020f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80020f8:	b480      	push	{r7}
 80020fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr

08002104 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002104:	b480      	push	{r7}
 8002106:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr

08002110 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002110:	b480      	push	{r7}
 8002112:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002114:	bf00      	nop
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr

0800211c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002120:	4802      	ldr	r0, [pc, #8]	@ (800212c <TIM3_IRQHandler+0x10>)
 8002122:	f002 fbbd 	bl	80048a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002126:	bf00      	nop
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop
 800212c:	20000304 	.word	0x20000304

08002130 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002130:	b580      	push	{r7, lr}
 8002132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002134:	4802      	ldr	r0, [pc, #8]	@ (8002140 <TIM4_IRQHandler+0x10>)
 8002136:	f002 fbb3 	bl	80048a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800213a:	bf00      	nop
 800213c:	bd80      	pop	{r7, pc}
 800213e:	bf00      	nop
 8002140:	20000384 	.word	0x20000384

08002144 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  return 1;
 8002148:	2301      	movs	r3, #1
}
 800214a:	4618      	mov	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	bc80      	pop	{r7}
 8002150:	4770      	bx	lr

08002152 <_kill>:

int _kill(int pid, int sig)
{
 8002152:	b580      	push	{r7, lr}
 8002154:	b082      	sub	sp, #8
 8002156:	af00      	add	r7, sp, #0
 8002158:	6078      	str	r0, [r7, #4]
 800215a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800215c:	f003 ff0c 	bl	8005f78 <__errno>
 8002160:	4603      	mov	r3, r0
 8002162:	2216      	movs	r2, #22
 8002164:	601a      	str	r2, [r3, #0]
  return -1;
 8002166:	f04f 33ff 	mov.w	r3, #4294967295
}
 800216a:	4618      	mov	r0, r3
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <_exit>:

void _exit (int status)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800217a:	f04f 31ff 	mov.w	r1, #4294967295
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ffe7 	bl	8002152 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002184:	bf00      	nop
 8002186:	e7fd      	b.n	8002184 <_exit+0x12>

08002188 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002188:	b580      	push	{r7, lr}
 800218a:	b086      	sub	sp, #24
 800218c:	af00      	add	r7, sp, #0
 800218e:	60f8      	str	r0, [r7, #12]
 8002190:	60b9      	str	r1, [r7, #8]
 8002192:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002194:	2300      	movs	r3, #0
 8002196:	617b      	str	r3, [r7, #20]
 8002198:	e00a      	b.n	80021b0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800219a:	f3af 8000 	nop.w
 800219e:	4601      	mov	r1, r0
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	1c5a      	adds	r2, r3, #1
 80021a4:	60ba      	str	r2, [r7, #8]
 80021a6:	b2ca      	uxtb	r2, r1
 80021a8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021aa:	697b      	ldr	r3, [r7, #20]
 80021ac:	3301      	adds	r3, #1
 80021ae:	617b      	str	r3, [r7, #20]
 80021b0:	697a      	ldr	r2, [r7, #20]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	429a      	cmp	r2, r3
 80021b6:	dbf0      	blt.n	800219a <_read+0x12>
  }

  return len;
 80021b8:	687b      	ldr	r3, [r7, #4]
}
 80021ba:	4618      	mov	r0, r3
 80021bc:	3718      	adds	r7, #24
 80021be:	46bd      	mov	sp, r7
 80021c0:	bd80      	pop	{r7, pc}

080021c2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80021c2:	b580      	push	{r7, lr}
 80021c4:	b086      	sub	sp, #24
 80021c6:	af00      	add	r7, sp, #0
 80021c8:	60f8      	str	r0, [r7, #12]
 80021ca:	60b9      	str	r1, [r7, #8]
 80021cc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021ce:	2300      	movs	r3, #0
 80021d0:	617b      	str	r3, [r7, #20]
 80021d2:	e009      	b.n	80021e8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	1c5a      	adds	r2, r3, #1
 80021d8:	60ba      	str	r2, [r7, #8]
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	4618      	mov	r0, r3
 80021de:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	3301      	adds	r3, #1
 80021e6:	617b      	str	r3, [r7, #20]
 80021e8:	697a      	ldr	r2, [r7, #20]
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	dbf1      	blt.n	80021d4 <_write+0x12>
  }
  return len;
 80021f0:	687b      	ldr	r3, [r7, #4]
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}

080021fa <_close>:

int _close(int file)
{
 80021fa:	b480      	push	{r7}
 80021fc:	b083      	sub	sp, #12
 80021fe:	af00      	add	r7, sp, #0
 8002200:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002202:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002206:	4618      	mov	r0, r3
 8002208:	370c      	adds	r7, #12
 800220a:	46bd      	mov	sp, r7
 800220c:	bc80      	pop	{r7}
 800220e:	4770      	bx	lr

08002210 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002210:	b480      	push	{r7}
 8002212:	b083      	sub	sp, #12
 8002214:	af00      	add	r7, sp, #0
 8002216:	6078      	str	r0, [r7, #4]
 8002218:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002220:	605a      	str	r2, [r3, #4]
  return 0;
 8002222:	2300      	movs	r3, #0
}
 8002224:	4618      	mov	r0, r3
 8002226:	370c      	adds	r7, #12
 8002228:	46bd      	mov	sp, r7
 800222a:	bc80      	pop	{r7}
 800222c:	4770      	bx	lr

0800222e <_isatty>:

int _isatty(int file)
{
 800222e:	b480      	push	{r7}
 8002230:	b083      	sub	sp, #12
 8002232:	af00      	add	r7, sp, #0
 8002234:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002236:	2301      	movs	r3, #1
}
 8002238:	4618      	mov	r0, r3
 800223a:	370c      	adds	r7, #12
 800223c:	46bd      	mov	sp, r7
 800223e:	bc80      	pop	{r7}
 8002240:	4770      	bx	lr

08002242 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002242:	b480      	push	{r7}
 8002244:	b085      	sub	sp, #20
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800224e:	2300      	movs	r3, #0
}
 8002250:	4618      	mov	r0, r3
 8002252:	3714      	adds	r7, #20
 8002254:	46bd      	mov	sp, r7
 8002256:	bc80      	pop	{r7}
 8002258:	4770      	bx	lr
	...

0800225c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800225c:	b580      	push	{r7, lr}
 800225e:	b086      	sub	sp, #24
 8002260:	af00      	add	r7, sp, #0
 8002262:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002264:	4a14      	ldr	r2, [pc, #80]	@ (80022b8 <_sbrk+0x5c>)
 8002266:	4b15      	ldr	r3, [pc, #84]	@ (80022bc <_sbrk+0x60>)
 8002268:	1ad3      	subs	r3, r2, r3
 800226a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800226c:	697b      	ldr	r3, [r7, #20]
 800226e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002270:	4b13      	ldr	r3, [pc, #76]	@ (80022c0 <_sbrk+0x64>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d102      	bne.n	800227e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002278:	4b11      	ldr	r3, [pc, #68]	@ (80022c0 <_sbrk+0x64>)
 800227a:	4a12      	ldr	r2, [pc, #72]	@ (80022c4 <_sbrk+0x68>)
 800227c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800227e:	4b10      	ldr	r3, [pc, #64]	@ (80022c0 <_sbrk+0x64>)
 8002280:	681a      	ldr	r2, [r3, #0]
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	4413      	add	r3, r2
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	429a      	cmp	r2, r3
 800228a:	d207      	bcs.n	800229c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800228c:	f003 fe74 	bl	8005f78 <__errno>
 8002290:	4603      	mov	r3, r0
 8002292:	220c      	movs	r2, #12
 8002294:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002296:	f04f 33ff 	mov.w	r3, #4294967295
 800229a:	e009      	b.n	80022b0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800229c:	4b08      	ldr	r3, [pc, #32]	@ (80022c0 <_sbrk+0x64>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022a2:	4b07      	ldr	r3, [pc, #28]	@ (80022c0 <_sbrk+0x64>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	4413      	add	r3, r2
 80022aa:	4a05      	ldr	r2, [pc, #20]	@ (80022c0 <_sbrk+0x64>)
 80022ac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ae:	68fb      	ldr	r3, [r7, #12]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3718      	adds	r7, #24
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	20005000 	.word	0x20005000
 80022bc:	00000400 	.word	0x00000400
 80022c0:	200003cc 	.word	0x200003cc
 80022c4:	20000728 	.word	0x20000728

080022c8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80022c8:	b480      	push	{r7}
 80022ca:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022cc:	bf00      	nop
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bc80      	pop	{r7}
 80022d2:	4770      	bx	lr

080022d4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022d4:	f7ff fff8 	bl	80022c8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022d8:	480b      	ldr	r0, [pc, #44]	@ (8002308 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022da:	490c      	ldr	r1, [pc, #48]	@ (800230c <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022dc:	4a0c      	ldr	r2, [pc, #48]	@ (8002310 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022e0:	e002      	b.n	80022e8 <LoopCopyDataInit>

080022e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022e6:	3304      	adds	r3, #4

080022e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022ec:	d3f9      	bcc.n	80022e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ee:	4a09      	ldr	r2, [pc, #36]	@ (8002314 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022f0:	4c09      	ldr	r4, [pc, #36]	@ (8002318 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022f4:	e001      	b.n	80022fa <LoopFillZerobss>

080022f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022f8:	3204      	adds	r2, #4

080022fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022fc:	d3fb      	bcc.n	80022f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022fe:	f003 fe41 	bl	8005f84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002302:	f7ff f8f7 	bl	80014f4 <main>
  bx lr
 8002306:	4770      	bx	lr
  ldr r0, =_sdata
 8002308:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800230c:	20000204 	.word	0x20000204
  ldr r2, =_sidata
 8002310:	0800a368 	.word	0x0800a368
  ldr r2, =_sbss
 8002314:	20000208 	.word	0x20000208
  ldr r4, =_ebss
 8002318:	20000728 	.word	0x20000728

0800231c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800231c:	e7fe      	b.n	800231c <ADC1_2_IRQHandler>
	...

08002320 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002320:	b580      	push	{r7, lr}
 8002322:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002324:	4b08      	ldr	r3, [pc, #32]	@ (8002348 <HAL_Init+0x28>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4a07      	ldr	r2, [pc, #28]	@ (8002348 <HAL_Init+0x28>)
 800232a:	f043 0310 	orr.w	r3, r3, #16
 800232e:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002330:	2003      	movs	r0, #3
 8002332:	f000 fdcf 	bl	8002ed4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002336:	200f      	movs	r0, #15
 8002338:	f7ff fe46 	bl	8001fc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800233c:	f7ff fd72 	bl	8001e24 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002340:	2300      	movs	r3, #0
}
 8002342:	4618      	mov	r0, r3
 8002344:	bd80      	pop	{r7, pc}
 8002346:	bf00      	nop
 8002348:	40022000 	.word	0x40022000

0800234c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002350:	4b05      	ldr	r3, [pc, #20]	@ (8002368 <HAL_IncTick+0x1c>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	461a      	mov	r2, r3
 8002356:	4b05      	ldr	r3, [pc, #20]	@ (800236c <HAL_IncTick+0x20>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4413      	add	r3, r2
 800235c:	4a03      	ldr	r2, [pc, #12]	@ (800236c <HAL_IncTick+0x20>)
 800235e:	6013      	str	r3, [r2, #0]
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	bc80      	pop	{r7}
 8002366:	4770      	bx	lr
 8002368:	20000038 	.word	0x20000038
 800236c:	200003d0 	.word	0x200003d0

08002370 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002370:	b480      	push	{r7}
 8002372:	af00      	add	r7, sp, #0
  return uwTick;
 8002374:	4b02      	ldr	r3, [pc, #8]	@ (8002380 <HAL_GetTick+0x10>)
 8002376:	681b      	ldr	r3, [r3, #0]
}
 8002378:	4618      	mov	r0, r3
 800237a:	46bd      	mov	sp, r7
 800237c:	bc80      	pop	{r7}
 800237e:	4770      	bx	lr
 8002380:	200003d0 	.word	0x200003d0

08002384 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800238c:	f7ff fff0 	bl	8002370 <HAL_GetTick>
 8002390:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002396:	68fb      	ldr	r3, [r7, #12]
 8002398:	f1b3 3fff 	cmp.w	r3, #4294967295
 800239c:	d005      	beq.n	80023aa <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800239e:	4b0a      	ldr	r3, [pc, #40]	@ (80023c8 <HAL_Delay+0x44>)
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	4413      	add	r3, r2
 80023a8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023aa:	bf00      	nop
 80023ac:	f7ff ffe0 	bl	8002370 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68bb      	ldr	r3, [r7, #8]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d8f7      	bhi.n	80023ac <HAL_Delay+0x28>
  {
  }
}
 80023bc:	bf00      	nop
 80023be:	bf00      	nop
 80023c0:	3710      	adds	r7, #16
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000038 	.word	0x20000038

080023cc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023cc:	b580      	push	{r7, lr}
 80023ce:	b086      	sub	sp, #24
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023d4:	2300      	movs	r3, #0
 80023d6:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 80023d8:	2300      	movs	r3, #0
 80023da:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023dc:	2300      	movs	r3, #0
 80023de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d101      	bne.n	80023ee <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	e0be      	b.n	800256c <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	689b      	ldr	r3, [r3, #8]
 80023f2:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d109      	bne.n	8002410 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	2200      	movs	r2, #0
 8002400:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	2200      	movs	r2, #0
 8002406:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f7ff fd3c 	bl	8001e88 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f000 fbc5 	bl	8002ba0 <ADC_ConversionStop_Disable>
 8002416:	4603      	mov	r3, r0
 8002418:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800241e:	f003 0310 	and.w	r3, r3, #16
 8002422:	2b00      	cmp	r3, #0
 8002424:	f040 8099 	bne.w	800255a <HAL_ADC_Init+0x18e>
 8002428:	7dfb      	ldrb	r3, [r7, #23]
 800242a:	2b00      	cmp	r3, #0
 800242c:	f040 8095 	bne.w	800255a <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002434:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002438:	f023 0302 	bic.w	r3, r3, #2
 800243c:	f043 0202 	orr.w	r2, r3, #2
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800244c:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	7b1b      	ldrb	r3, [r3, #12]
 8002452:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002454:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002456:	68ba      	ldr	r2, [r7, #8]
 8002458:	4313      	orrs	r3, r2
 800245a:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002464:	d003      	beq.n	800246e <HAL_ADC_Init+0xa2>
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	2b01      	cmp	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_ADC_Init+0xa8>
 800246e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002472:	e000      	b.n	8002476 <HAL_ADC_Init+0xaa>
 8002474:	2300      	movs	r3, #0
 8002476:	693a      	ldr	r2, [r7, #16]
 8002478:	4313      	orrs	r3, r2
 800247a:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	7d1b      	ldrb	r3, [r3, #20]
 8002480:	2b01      	cmp	r3, #1
 8002482:	d119      	bne.n	80024b8 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	7b1b      	ldrb	r3, [r3, #12]
 8002488:	2b00      	cmp	r3, #0
 800248a:	d109      	bne.n	80024a0 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	3b01      	subs	r3, #1
 8002492:	035a      	lsls	r2, r3, #13
 8002494:	693b      	ldr	r3, [r7, #16]
 8002496:	4313      	orrs	r3, r2
 8002498:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800249c:	613b      	str	r3, [r7, #16]
 800249e:	e00b      	b.n	80024b8 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024a4:	f043 0220 	orr.w	r2, r3, #32
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024b0:	f043 0201 	orr.w	r2, r3, #1
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	693a      	ldr	r2, [r7, #16]
 80024c8:	430a      	orrs	r2, r1
 80024ca:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	689a      	ldr	r2, [r3, #8]
 80024d2:	4b28      	ldr	r3, [pc, #160]	@ (8002574 <HAL_ADC_Init+0x1a8>)
 80024d4:	4013      	ands	r3, r2
 80024d6:	687a      	ldr	r2, [r7, #4]
 80024d8:	6812      	ldr	r2, [r2, #0]
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	430b      	orrs	r3, r1
 80024de:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024e8:	d003      	beq.n	80024f2 <HAL_ADC_Init+0x126>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	689b      	ldr	r3, [r3, #8]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d104      	bne.n	80024fc <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	3b01      	subs	r3, #1
 80024f8:	051b      	lsls	r3, r3, #20
 80024fa:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002502:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	430a      	orrs	r2, r1
 800250e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	689a      	ldr	r2, [r3, #8]
 8002516:	4b18      	ldr	r3, [pc, #96]	@ (8002578 <HAL_ADC_Init+0x1ac>)
 8002518:	4013      	ands	r3, r2
 800251a:	68ba      	ldr	r2, [r7, #8]
 800251c:	429a      	cmp	r2, r3
 800251e:	d10b      	bne.n	8002538 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800252a:	f023 0303 	bic.w	r3, r3, #3
 800252e:	f043 0201 	orr.w	r2, r3, #1
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002536:	e018      	b.n	800256a <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800253c:	f023 0312 	bic.w	r3, r3, #18
 8002540:	f043 0210 	orr.w	r2, r3, #16
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800254c:	f043 0201 	orr.w	r2, r3, #1
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002558:	e007      	b.n	800256a <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800255e:	f043 0210 	orr.w	r2, r3, #16
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800256a:	7dfb      	ldrb	r3, [r7, #23]
}
 800256c:	4618      	mov	r0, r3
 800256e:	3718      	adds	r7, #24
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	ffe1f7fd 	.word	0xffe1f7fd
 8002578:	ff1f0efe 	.word	0xff1f0efe

0800257c <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b084      	sub	sp, #16
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002584:	2300      	movs	r3, #0
 8002586:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800258e:	2b01      	cmp	r3, #1
 8002590:	d101      	bne.n	8002596 <HAL_ADC_Start+0x1a>
 8002592:	2302      	movs	r3, #2
 8002594:	e098      	b.n	80026c8 <HAL_ADC_Start+0x14c>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	2201      	movs	r2, #1
 800259a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 800259e:	6878      	ldr	r0, [r7, #4]
 80025a0:	f000 faa4 	bl	8002aec <ADC_Enable>
 80025a4:	4603      	mov	r3, r0
 80025a6:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80025a8:	7bfb      	ldrb	r3, [r7, #15]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 8087 	bne.w	80026be <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025b4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025b8:	f023 0301 	bic.w	r3, r3, #1
 80025bc:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	4a41      	ldr	r2, [pc, #260]	@ (80026d0 <HAL_ADC_Start+0x154>)
 80025ca:	4293      	cmp	r3, r2
 80025cc:	d105      	bne.n	80025da <HAL_ADC_Start+0x5e>
 80025ce:	4b41      	ldr	r3, [pc, #260]	@ (80026d4 <HAL_ADC_Start+0x158>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d115      	bne.n	8002606 <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025de:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d026      	beq.n	8002642 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025f8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025fc:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002604:	e01d      	b.n	8002642 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4a2f      	ldr	r2, [pc, #188]	@ (80026d4 <HAL_ADC_Start+0x158>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d004      	beq.n	8002626 <HAL_ADC_Start+0xaa>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a2b      	ldr	r2, [pc, #172]	@ (80026d0 <HAL_ADC_Start+0x154>)
 8002622:	4293      	cmp	r3, r2
 8002624:	d10d      	bne.n	8002642 <HAL_ADC_Start+0xc6>
 8002626:	4b2b      	ldr	r3, [pc, #172]	@ (80026d4 <HAL_ADC_Start+0x158>)
 8002628:	685b      	ldr	r3, [r3, #4]
 800262a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800262e:	2b00      	cmp	r3, #0
 8002630:	d007      	beq.n	8002642 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002636:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800263a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002646:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d006      	beq.n	800265c <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002652:	f023 0206 	bic.w	r2, r3, #6
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	62da      	str	r2, [r3, #44]	@ 0x2c
 800265a:	e002      	b.n	8002662 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2200      	movs	r2, #0
 8002660:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2200      	movs	r2, #0
 8002666:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f06f 0202 	mvn.w	r2, #2
 8002672:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	689b      	ldr	r3, [r3, #8]
 800267a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800267e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002682:	d113      	bne.n	80026ac <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002688:	4a11      	ldr	r2, [pc, #68]	@ (80026d0 <HAL_ADC_Start+0x154>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d105      	bne.n	800269a <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800268e:	4b11      	ldr	r3, [pc, #68]	@ (80026d4 <HAL_ADC_Start+0x158>)
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002696:	2b00      	cmp	r3, #0
 8002698:	d108      	bne.n	80026ac <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	689a      	ldr	r2, [r3, #8]
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 80026a8:	609a      	str	r2, [r3, #8]
 80026aa:	e00c      	b.n	80026c6 <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	689a      	ldr	r2, [r3, #8]
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	e003      	b.n	80026c6 <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3710      	adds	r7, #16
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}
 80026d0:	40012800 	.word	0x40012800
 80026d4:	40012400 	.word	0x40012400

080026d8 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026d8:	b590      	push	{r4, r7, lr}
 80026da:	b087      	sub	sp, #28
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 80026ea:	2300      	movs	r3, #0
 80026ec:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 80026ee:	f7ff fe3f 	bl	8002370 <HAL_GetTick>
 80026f2:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	689b      	ldr	r3, [r3, #8]
 80026fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d00b      	beq.n	800271a <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002706:	f043 0220 	orr.w	r2, r3, #32
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	2200      	movs	r2, #0
 8002712:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	e0d3      	b.n	80028c2 <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002724:	2b00      	cmp	r3, #0
 8002726:	d131      	bne.n	800278c <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800272e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002732:	2b00      	cmp	r3, #0
 8002734:	d12a      	bne.n	800278c <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002736:	e021      	b.n	800277c <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800273e:	d01d      	beq.n	800277c <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d007      	beq.n	8002756 <HAL_ADC_PollForConversion+0x7e>
 8002746:	f7ff fe13 	bl	8002370 <HAL_GetTick>
 800274a:	4602      	mov	r2, r0
 800274c:	697b      	ldr	r3, [r7, #20]
 800274e:	1ad3      	subs	r3, r2, r3
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	429a      	cmp	r2, r3
 8002754:	d212      	bcs.n	800277c <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0302 	and.w	r3, r3, #2
 8002760:	2b00      	cmp	r3, #0
 8002762:	d10b      	bne.n	800277c <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	f043 0204 	orr.w	r2, r3, #4
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002778:	2303      	movs	r3, #3
 800277a:	e0a2      	b.n	80028c2 <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	f003 0302 	and.w	r3, r3, #2
 8002786:	2b00      	cmp	r3, #0
 8002788:	d0d6      	beq.n	8002738 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800278a:	e070      	b.n	800286e <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 800278c:	4b4f      	ldr	r3, [pc, #316]	@ (80028cc <HAL_ADC_PollForConversion+0x1f4>)
 800278e:	681c      	ldr	r4, [r3, #0]
 8002790:	2002      	movs	r0, #2
 8002792:	f001 ff2d 	bl	80045f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002796:	4603      	mov	r3, r0
 8002798:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6919      	ldr	r1, [r3, #16]
 80027a2:	4b4b      	ldr	r3, [pc, #300]	@ (80028d0 <HAL_ADC_PollForConversion+0x1f8>)
 80027a4:	400b      	ands	r3, r1
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d118      	bne.n	80027dc <HAL_ADC_PollForConversion+0x104>
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	68d9      	ldr	r1, [r3, #12]
 80027b0:	4b48      	ldr	r3, [pc, #288]	@ (80028d4 <HAL_ADC_PollForConversion+0x1fc>)
 80027b2:	400b      	ands	r3, r1
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d111      	bne.n	80027dc <HAL_ADC_PollForConversion+0x104>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	4b46      	ldr	r3, [pc, #280]	@ (80028d8 <HAL_ADC_PollForConversion+0x200>)
 80027c0:	400b      	ands	r3, r1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d108      	bne.n	80027d8 <HAL_ADC_PollForConversion+0x100>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68d9      	ldr	r1, [r3, #12]
 80027cc:	4b43      	ldr	r3, [pc, #268]	@ (80028dc <HAL_ADC_PollForConversion+0x204>)
 80027ce:	400b      	ands	r3, r1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d101      	bne.n	80027d8 <HAL_ADC_PollForConversion+0x100>
 80027d4:	2314      	movs	r3, #20
 80027d6:	e020      	b.n	800281a <HAL_ADC_PollForConversion+0x142>
 80027d8:	2329      	movs	r3, #41	@ 0x29
 80027da:	e01e      	b.n	800281a <HAL_ADC_PollForConversion+0x142>
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	6919      	ldr	r1, [r3, #16]
 80027e2:	4b3d      	ldr	r3, [pc, #244]	@ (80028d8 <HAL_ADC_PollForConversion+0x200>)
 80027e4:	400b      	ands	r3, r1
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d106      	bne.n	80027f8 <HAL_ADC_PollForConversion+0x120>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	68d9      	ldr	r1, [r3, #12]
 80027f0:	4b3a      	ldr	r3, [pc, #232]	@ (80028dc <HAL_ADC_PollForConversion+0x204>)
 80027f2:	400b      	ands	r3, r1
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00d      	beq.n	8002814 <HAL_ADC_PollForConversion+0x13c>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	4b38      	ldr	r3, [pc, #224]	@ (80028e0 <HAL_ADC_PollForConversion+0x208>)
 8002800:	400b      	ands	r3, r1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d108      	bne.n	8002818 <HAL_ADC_PollForConversion+0x140>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68d9      	ldr	r1, [r3, #12]
 800280c:	4b34      	ldr	r3, [pc, #208]	@ (80028e0 <HAL_ADC_PollForConversion+0x208>)
 800280e:	400b      	ands	r3, r1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_ADC_PollForConversion+0x140>
 8002814:	2354      	movs	r3, #84	@ 0x54
 8002816:	e000      	b.n	800281a <HAL_ADC_PollForConversion+0x142>
 8002818:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 800281a:	fb02 f303 	mul.w	r3, r2, r3
 800281e:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002820:	e021      	b.n	8002866 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002828:	d01a      	beq.n	8002860 <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d007      	beq.n	8002840 <HAL_ADC_PollForConversion+0x168>
 8002830:	f7ff fd9e 	bl	8002370 <HAL_GetTick>
 8002834:	4602      	mov	r2, r0
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	1ad3      	subs	r3, r2, r3
 800283a:	683a      	ldr	r2, [r7, #0]
 800283c:	429a      	cmp	r2, r3
 800283e:	d20f      	bcs.n	8002860 <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	429a      	cmp	r2, r3
 8002846:	d90b      	bls.n	8002860 <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800284c:	f043 0204 	orr.w	r2, r3, #4
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 800285c:	2303      	movs	r3, #3
 800285e:	e030      	b.n	80028c2 <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	3301      	adds	r3, #1
 8002864:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002866:	68fb      	ldr	r3, [r7, #12]
 8002868:	693a      	ldr	r2, [r7, #16]
 800286a:	429a      	cmp	r2, r3
 800286c:	d8d9      	bhi.n	8002822 <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f06f 0212 	mvn.w	r2, #18
 8002876:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800287c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	689b      	ldr	r3, [r3, #8]
 800288a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 800288e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002892:	d115      	bne.n	80028c0 <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8002898:	2b00      	cmp	r3, #0
 800289a:	d111      	bne.n	80028c0 <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d105      	bne.n	80028c0 <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028b8:	f043 0201 	orr.w	r2, r3, #1
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028c0:	2300      	movs	r3, #0
}
 80028c2:	4618      	mov	r0, r3
 80028c4:	371c      	adds	r7, #28
 80028c6:	46bd      	mov	sp, r7
 80028c8:	bd90      	pop	{r4, r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000030 	.word	0x20000030
 80028d0:	24924924 	.word	0x24924924
 80028d4:	00924924 	.word	0x00924924
 80028d8:	12492492 	.word	0x12492492
 80028dc:	00492492 	.word	0x00492492
 80028e0:	00249249 	.word	0x00249249

080028e4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	370c      	adds	r7, #12
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bc80      	pop	{r7}
 80028fa:	4770      	bx	lr

080028fc <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 80028fc:	b480      	push	{r7}
 80028fe:	b085      	sub	sp, #20
 8002900:	af00      	add	r7, sp, #0
 8002902:	6078      	str	r0, [r7, #4]
 8002904:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002906:	2300      	movs	r3, #0
 8002908:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800290a:	2300      	movs	r3, #0
 800290c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002914:	2b01      	cmp	r3, #1
 8002916:	d101      	bne.n	800291c <HAL_ADC_ConfigChannel+0x20>
 8002918:	2302      	movs	r3, #2
 800291a:	e0dc      	b.n	8002ad6 <HAL_ADC_ConfigChannel+0x1da>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	685b      	ldr	r3, [r3, #4]
 8002928:	2b06      	cmp	r3, #6
 800292a:	d81c      	bhi.n	8002966 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	3b05      	subs	r3, #5
 800293e:	221f      	movs	r2, #31
 8002940:	fa02 f303 	lsl.w	r3, r2, r3
 8002944:	43db      	mvns	r3, r3
 8002946:	4019      	ands	r1, r3
 8002948:	683b      	ldr	r3, [r7, #0]
 800294a:	6818      	ldr	r0, [r3, #0]
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685a      	ldr	r2, [r3, #4]
 8002950:	4613      	mov	r3, r2
 8002952:	009b      	lsls	r3, r3, #2
 8002954:	4413      	add	r3, r2
 8002956:	3b05      	subs	r3, #5
 8002958:	fa00 f203 	lsl.w	r2, r0, r3
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	430a      	orrs	r2, r1
 8002962:	635a      	str	r2, [r3, #52]	@ 0x34
 8002964:	e03c      	b.n	80029e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002966:	683b      	ldr	r3, [r7, #0]
 8002968:	685b      	ldr	r3, [r3, #4]
 800296a:	2b0c      	cmp	r3, #12
 800296c:	d81c      	bhi.n	80029a8 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	685a      	ldr	r2, [r3, #4]
 8002978:	4613      	mov	r3, r2
 800297a:	009b      	lsls	r3, r3, #2
 800297c:	4413      	add	r3, r2
 800297e:	3b23      	subs	r3, #35	@ 0x23
 8002980:	221f      	movs	r2, #31
 8002982:	fa02 f303 	lsl.w	r3, r2, r3
 8002986:	43db      	mvns	r3, r3
 8002988:	4019      	ands	r1, r3
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	6818      	ldr	r0, [r3, #0]
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	685a      	ldr	r2, [r3, #4]
 8002992:	4613      	mov	r3, r2
 8002994:	009b      	lsls	r3, r3, #2
 8002996:	4413      	add	r3, r2
 8002998:	3b23      	subs	r3, #35	@ 0x23
 800299a:	fa00 f203 	lsl.w	r2, r0, r3
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	430a      	orrs	r2, r1
 80029a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80029a6:	e01b      	b.n	80029e0 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	685a      	ldr	r2, [r3, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	009b      	lsls	r3, r3, #2
 80029b6:	4413      	add	r3, r2
 80029b8:	3b41      	subs	r3, #65	@ 0x41
 80029ba:	221f      	movs	r2, #31
 80029bc:	fa02 f303 	lsl.w	r3, r2, r3
 80029c0:	43db      	mvns	r3, r3
 80029c2:	4019      	ands	r1, r3
 80029c4:	683b      	ldr	r3, [r7, #0]
 80029c6:	6818      	ldr	r0, [r3, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]
 80029ca:	685a      	ldr	r2, [r3, #4]
 80029cc:	4613      	mov	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	4413      	add	r3, r2
 80029d2:	3b41      	subs	r3, #65	@ 0x41
 80029d4:	fa00 f203 	lsl.w	r2, r0, r3
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	430a      	orrs	r2, r1
 80029de:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	2b09      	cmp	r3, #9
 80029e6:	d91c      	bls.n	8002a22 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	68d9      	ldr	r1, [r3, #12]
 80029ee:	683b      	ldr	r3, [r7, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	4613      	mov	r3, r2
 80029f4:	005b      	lsls	r3, r3, #1
 80029f6:	4413      	add	r3, r2
 80029f8:	3b1e      	subs	r3, #30
 80029fa:	2207      	movs	r2, #7
 80029fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002a00:	43db      	mvns	r3, r3
 8002a02:	4019      	ands	r1, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	6898      	ldr	r0, [r3, #8]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	681a      	ldr	r2, [r3, #0]
 8002a0c:	4613      	mov	r3, r2
 8002a0e:	005b      	lsls	r3, r3, #1
 8002a10:	4413      	add	r3, r2
 8002a12:	3b1e      	subs	r3, #30
 8002a14:	fa00 f203 	lsl.w	r2, r0, r3
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	430a      	orrs	r2, r1
 8002a1e:	60da      	str	r2, [r3, #12]
 8002a20:	e019      	b.n	8002a56 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	6919      	ldr	r1, [r3, #16]
 8002a28:	683b      	ldr	r3, [r7, #0]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	4613      	mov	r3, r2
 8002a2e:	005b      	lsls	r3, r3, #1
 8002a30:	4413      	add	r3, r2
 8002a32:	2207      	movs	r2, #7
 8002a34:	fa02 f303 	lsl.w	r3, r2, r3
 8002a38:	43db      	mvns	r3, r3
 8002a3a:	4019      	ands	r1, r3
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	6898      	ldr	r0, [r3, #8]
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	4613      	mov	r3, r2
 8002a46:	005b      	lsls	r3, r3, #1
 8002a48:	4413      	add	r3, r2
 8002a4a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	430a      	orrs	r2, r1
 8002a54:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	2b10      	cmp	r3, #16
 8002a5c:	d003      	beq.n	8002a66 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a5e:	683b      	ldr	r3, [r7, #0]
 8002a60:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a62:	2b11      	cmp	r3, #17
 8002a64:	d132      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1d      	ldr	r2, [pc, #116]	@ (8002ae0 <HAL_ADC_ConfigChannel+0x1e4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d125      	bne.n	8002abc <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d126      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002a8c:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	2b10      	cmp	r3, #16
 8002a94:	d11a      	bne.n	8002acc <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a96:	4b13      	ldr	r3, [pc, #76]	@ (8002ae4 <HAL_ADC_ConfigChannel+0x1e8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	4a13      	ldr	r2, [pc, #76]	@ (8002ae8 <HAL_ADC_ConfigChannel+0x1ec>)
 8002a9c:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa0:	0c9a      	lsrs	r2, r3, #18
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	009b      	lsls	r3, r3, #2
 8002aa6:	4413      	add	r3, r2
 8002aa8:	005b      	lsls	r3, r3, #1
 8002aaa:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002aac:	e002      	b.n	8002ab4 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	3b01      	subs	r3, #1
 8002ab2:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d1f9      	bne.n	8002aae <HAL_ADC_ConfigChannel+0x1b2>
 8002aba:	e007      	b.n	8002acc <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ac0:	f043 0220 	orr.w	r2, r3, #32
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ac8:	2301      	movs	r3, #1
 8002aca:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	2200      	movs	r2, #0
 8002ad0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002ad4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	3714      	adds	r7, #20
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bc80      	pop	{r7}
 8002ade:	4770      	bx	lr
 8002ae0:	40012400 	.word	0x40012400
 8002ae4:	20000030 	.word	0x20000030
 8002ae8:	431bde83 	.word	0x431bde83

08002aec <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b084      	sub	sp, #16
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689b      	ldr	r3, [r3, #8]
 8002b02:	f003 0301 	and.w	r3, r3, #1
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d040      	beq.n	8002b8c <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	689a      	ldr	r2, [r3, #8]
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f042 0201 	orr.w	r2, r2, #1
 8002b18:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b1a:	4b1f      	ldr	r3, [pc, #124]	@ (8002b98 <ADC_Enable+0xac>)
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	4a1f      	ldr	r2, [pc, #124]	@ (8002b9c <ADC_Enable+0xb0>)
 8002b20:	fba2 2303 	umull	r2, r3, r2, r3
 8002b24:	0c9b      	lsrs	r3, r3, #18
 8002b26:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b28:	e002      	b.n	8002b30 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	3b01      	subs	r3, #1
 8002b2e:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d1f9      	bne.n	8002b2a <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b36:	f7ff fc1b 	bl	8002370 <HAL_GetTick>
 8002b3a:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b3c:	e01f      	b.n	8002b7e <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b3e:	f7ff fc17 	bl	8002370 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d918      	bls.n	8002b7e <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	689b      	ldr	r3, [r3, #8]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d011      	beq.n	8002b7e <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b5e:	f043 0210 	orr.w	r2, r3, #16
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b6a:	f043 0201 	orr.w	r2, r3, #1
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2200      	movs	r2, #0
 8002b76:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e007      	b.n	8002b8e <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 0301 	and.w	r3, r3, #1
 8002b88:	2b01      	cmp	r3, #1
 8002b8a:	d1d8      	bne.n	8002b3e <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002b8c:	2300      	movs	r3, #0
}
 8002b8e:	4618      	mov	r0, r3
 8002b90:	3710      	adds	r7, #16
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bd80      	pop	{r7, pc}
 8002b96:	bf00      	nop
 8002b98:	20000030 	.word	0x20000030
 8002b9c:	431bde83 	.word	0x431bde83

08002ba0 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b084      	sub	sp, #16
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	689b      	ldr	r3, [r3, #8]
 8002bb2:	f003 0301 	and.w	r3, r3, #1
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	d12e      	bne.n	8002c18 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 0201 	bic.w	r2, r2, #1
 8002bc8:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bca:	f7ff fbd1 	bl	8002370 <HAL_GetTick>
 8002bce:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bd0:	e01b      	b.n	8002c0a <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bd2:	f7ff fbcd 	bl	8002370 <HAL_GetTick>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	1ad3      	subs	r3, r2, r3
 8002bdc:	2b02      	cmp	r3, #2
 8002bde:	d914      	bls.n	8002c0a <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	689b      	ldr	r3, [r3, #8]
 8002be6:	f003 0301 	and.w	r3, r3, #1
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d10d      	bne.n	8002c0a <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf2:	f043 0210 	orr.w	r2, r3, #16
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfe:	f043 0201 	orr.w	r2, r3, #1
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002c06:	2301      	movs	r3, #1
 8002c08:	e007      	b.n	8002c1a <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f003 0301 	and.w	r3, r3, #1
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d0dc      	beq.n	8002bd2 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3710      	adds	r7, #16
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
	...

08002c24 <HAL_ADCEx_Calibration_Start>:
  *         the completion of this function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef* hadc)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b087      	sub	sp, #28
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	75fb      	strb	r3, [r7, #23]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0U;
 8002c30:	2300      	movs	r3, #0
 8002c32:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_ADCEx_Calibration_Start+0x1e>
 8002c3e:	2302      	movs	r3, #2
 8002c40:	e097      	b.n	8002d72 <HAL_ADCEx_Calibration_Start+0x14e>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2201      	movs	r2, #1
 8002c46:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
   /* 1. Disable ADC peripheral                                                 */
   tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f7ff ffa8 	bl	8002ba0 <ADC_ConversionStop_Disable>
 8002c50:	4603      	mov	r3, r0
 8002c52:	75fb      	strb	r3, [r7, #23]
  
   /* 2. Calibration prerequisite delay before starting the calibration.       */
   /*    - ADC must be enabled for at least two ADC clock cycles               */
   tmp_hal_status = ADC_Enable(hadc);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff49 	bl	8002aec <ADC_Enable>
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	75fb      	strb	r3, [r7, #23]

   /* Check if ADC is effectively enabled */
   if (tmp_hal_status == HAL_OK)
 8002c5e:	7dfb      	ldrb	r3, [r7, #23]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	f040 8081 	bne.w	8002d68 <HAL_ADCEx_Calibration_Start+0x144>
   {
     /* Set ADC state */
     ADC_STATE_CLR_SET(hadc->State,
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c6a:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002c6e:	f023 0302 	bic.w	r3, r3, #2
 8002c72:	f043 0202 	orr.w	r2, r3, #2
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Hardware prerequisite: delay before starting the calibration.          */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles.  */
    /*  - Wait for the expected ADC clock cycles delay */
    wait_loop_index = ((SystemCoreClock
                        / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 8002c7a:	4b40      	ldr	r3, [pc, #256]	@ (8002d7c <HAL_ADCEx_Calibration_Start+0x158>)
 8002c7c:	681c      	ldr	r4, [r3, #0]
 8002c7e:	2002      	movs	r0, #2
 8002c80:	f001 fcb6 	bl	80045f0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002c84:	4603      	mov	r3, r0
 8002c86:	fbb4 f3f3 	udiv	r3, r4, r3
                       * ADC_PRECALIBRATION_DELAY_ADCCLOCKCYCLES        );
 8002c8a:	005b      	lsls	r3, r3, #1
    wait_loop_index = ((SystemCoreClock
 8002c8c:	60fb      	str	r3, [r7, #12]

    while(wait_loop_index != 0U)
 8002c8e:	e002      	b.n	8002c96 <HAL_ADCEx_Calibration_Start+0x72>
    {
      wait_loop_index--;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	3b01      	subs	r3, #1
 8002c94:	60fb      	str	r3, [r7, #12]
    while(wait_loop_index != 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d1f9      	bne.n	8002c90 <HAL_ADCEx_Calibration_Start+0x6c>
    }

    /* 3. Resets ADC calibration registers */  
    SET_BIT(hadc->Instance->CR2, ADC_CR2_RSTCAL);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	689a      	ldr	r2, [r3, #8]
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f042 0208 	orr.w	r2, r2, #8
 8002caa:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002cac:	f7ff fb60 	bl	8002370 <HAL_GetTick>
 8002cb0:	6138      	str	r0, [r7, #16]

    /* Wait for calibration reset completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002cb2:	e01b      	b.n	8002cec <HAL_ADCEx_Calibration_Start+0xc8>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002cb4:	f7ff fb5c 	bl	8002370 <HAL_GetTick>
 8002cb8:	4602      	mov	r2, r0
 8002cba:	693b      	ldr	r3, [r7, #16]
 8002cbc:	1ad3      	subs	r3, r2, r3
 8002cbe:	2b0a      	cmp	r3, #10
 8002cc0:	d914      	bls.n	8002cec <HAL_ADCEx_Calibration_Start+0xc8>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f003 0308 	and.w	r3, r3, #8
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d00d      	beq.n	8002cec <HAL_ADCEx_Calibration_Start+0xc8>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cd4:	f023 0312 	bic.w	r3, r3, #18
 8002cd8:	f043 0210 	orr.w	r2, r3, #16
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	e042      	b.n	8002d72 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_RSTCAL))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0308 	and.w	r3, r3, #8
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d1dc      	bne.n	8002cb4 <HAL_ADCEx_Calibration_Start+0x90>
        }
      }
    }
    
    /* 4. Start ADC calibration */
    SET_BIT(hadc->Instance->CR2, ADC_CR2_CAL);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	689a      	ldr	r2, [r3, #8]
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f042 0204 	orr.w	r2, r2, #4
 8002d08:	609a      	str	r2, [r3, #8]
    
    tickstart = HAL_GetTick();  
 8002d0a:	f7ff fb31 	bl	8002370 <HAL_GetTick>
 8002d0e:	6138      	str	r0, [r7, #16]

    /* Wait for calibration completion */
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d10:	e01b      	b.n	8002d4a <HAL_ADCEx_Calibration_Start+0x126>
    {
      if((HAL_GetTick() - tickstart) > ADC_CALIBRATION_TIMEOUT)
 8002d12:	f7ff fb2d 	bl	8002370 <HAL_GetTick>
 8002d16:	4602      	mov	r2, r0
 8002d18:	693b      	ldr	r3, [r7, #16]
 8002d1a:	1ad3      	subs	r3, r2, r3
 8002d1c:	2b0a      	cmp	r3, #10
 8002d1e:	d914      	bls.n	8002d4a <HAL_ADCEx_Calibration_Start+0x126>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	689b      	ldr	r3, [r3, #8]
 8002d26:	f003 0304 	and.w	r3, r3, #4
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d00d      	beq.n	8002d4a <HAL_ADCEx_Calibration_Start+0x126>
        {
          /* Update ADC state machine to error */
          ADC_STATE_CLR_SET(hadc->State,
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d32:	f023 0312 	bic.w	r3, r3, #18
 8002d36:	f043 0210 	orr.w	r2, r3, #16
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	629a      	str	r2, [r3, #40]	@ 0x28
                            HAL_ADC_STATE_BUSY_INTERNAL,
                            HAL_ADC_STATE_ERROR_INTERNAL);

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	e013      	b.n	8002d72 <HAL_ADCEx_Calibration_Start+0x14e>
    while(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_CAL))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f003 0304 	and.w	r3, r3, #4
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d1dc      	bne.n	8002d12 <HAL_ADCEx_Calibration_Start+0xee>
        }
      }
    }
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d5c:	f023 0303 	bic.w	r3, r3, #3
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002d70:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	371c      	adds	r7, #28
 8002d76:	46bd      	mov	sp, r7
 8002d78:	bd90      	pop	{r4, r7, pc}
 8002d7a:	bf00      	nop
 8002d7c:	20000030 	.word	0x20000030

08002d80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d80:	b480      	push	{r7}
 8002d82:	b085      	sub	sp, #20
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d90:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002d92:	68db      	ldr	r3, [r3, #12]
 8002d94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d96:	68ba      	ldr	r2, [r7, #8]
 8002d98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002da4:	68bb      	ldr	r3, [r7, #8]
 8002da6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002da8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002db0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002db2:	4a04      	ldr	r2, [pc, #16]	@ (8002dc4 <__NVIC_SetPriorityGrouping+0x44>)
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	60d3      	str	r3, [r2, #12]
}
 8002db8:	bf00      	nop
 8002dba:	3714      	adds	r7, #20
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr
 8002dc2:	bf00      	nop
 8002dc4:	e000ed00 	.word	0xe000ed00

08002dc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002dcc:	4b04      	ldr	r3, [pc, #16]	@ (8002de0 <__NVIC_GetPriorityGrouping+0x18>)
 8002dce:	68db      	ldr	r3, [r3, #12]
 8002dd0:	0a1b      	lsrs	r3, r3, #8
 8002dd2:	f003 0307 	and.w	r3, r3, #7
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	46bd      	mov	sp, r7
 8002dda:	bc80      	pop	{r7}
 8002ddc:	4770      	bx	lr
 8002dde:	bf00      	nop
 8002de0:	e000ed00 	.word	0xe000ed00

08002de4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b083      	sub	sp, #12
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	4603      	mov	r3, r0
 8002dec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	db0b      	blt.n	8002e0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002df6:	79fb      	ldrb	r3, [r7, #7]
 8002df8:	f003 021f 	and.w	r2, r3, #31
 8002dfc:	4906      	ldr	r1, [pc, #24]	@ (8002e18 <__NVIC_EnableIRQ+0x34>)
 8002dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e02:	095b      	lsrs	r3, r3, #5
 8002e04:	2001      	movs	r0, #1
 8002e06:	fa00 f202 	lsl.w	r2, r0, r2
 8002e0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e0e:	bf00      	nop
 8002e10:	370c      	adds	r7, #12
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bc80      	pop	{r7}
 8002e16:	4770      	bx	lr
 8002e18:	e000e100 	.word	0xe000e100

08002e1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b083      	sub	sp, #12
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	4603      	mov	r3, r0
 8002e24:	6039      	str	r1, [r7, #0]
 8002e26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	db0a      	blt.n	8002e46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	b2da      	uxtb	r2, r3
 8002e34:	490c      	ldr	r1, [pc, #48]	@ (8002e68 <__NVIC_SetPriority+0x4c>)
 8002e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e3a:	0112      	lsls	r2, r2, #4
 8002e3c:	b2d2      	uxtb	r2, r2
 8002e3e:	440b      	add	r3, r1
 8002e40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e44:	e00a      	b.n	8002e5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	b2da      	uxtb	r2, r3
 8002e4a:	4908      	ldr	r1, [pc, #32]	@ (8002e6c <__NVIC_SetPriority+0x50>)
 8002e4c:	79fb      	ldrb	r3, [r7, #7]
 8002e4e:	f003 030f 	and.w	r3, r3, #15
 8002e52:	3b04      	subs	r3, #4
 8002e54:	0112      	lsls	r2, r2, #4
 8002e56:	b2d2      	uxtb	r2, r2
 8002e58:	440b      	add	r3, r1
 8002e5a:	761a      	strb	r2, [r3, #24]
}
 8002e5c:	bf00      	nop
 8002e5e:	370c      	adds	r7, #12
 8002e60:	46bd      	mov	sp, r7
 8002e62:	bc80      	pop	{r7}
 8002e64:	4770      	bx	lr
 8002e66:	bf00      	nop
 8002e68:	e000e100 	.word	0xe000e100
 8002e6c:	e000ed00 	.word	0xe000ed00

08002e70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e70:	b480      	push	{r7}
 8002e72:	b089      	sub	sp, #36	@ 0x24
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	60f8      	str	r0, [r7, #12]
 8002e78:	60b9      	str	r1, [r7, #8]
 8002e7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	f003 0307 	and.w	r3, r3, #7
 8002e82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e84:	69fb      	ldr	r3, [r7, #28]
 8002e86:	f1c3 0307 	rsb	r3, r3, #7
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	bf28      	it	cs
 8002e8e:	2304      	movcs	r3, #4
 8002e90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	3304      	adds	r3, #4
 8002e96:	2b06      	cmp	r3, #6
 8002e98:	d902      	bls.n	8002ea0 <NVIC_EncodePriority+0x30>
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	3b03      	subs	r3, #3
 8002e9e:	e000      	b.n	8002ea2 <NVIC_EncodePriority+0x32>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ea4:	f04f 32ff 	mov.w	r2, #4294967295
 8002ea8:	69bb      	ldr	r3, [r7, #24]
 8002eaa:	fa02 f303 	lsl.w	r3, r2, r3
 8002eae:	43da      	mvns	r2, r3
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	401a      	ands	r2, r3
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ebc:	697b      	ldr	r3, [r7, #20]
 8002ebe:	fa01 f303 	lsl.w	r3, r1, r3
 8002ec2:	43d9      	mvns	r1, r3
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ec8:	4313      	orrs	r3, r2
         );
}
 8002eca:	4618      	mov	r0, r3
 8002ecc:	3724      	adds	r7, #36	@ 0x24
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bc80      	pop	{r7}
 8002ed2:	4770      	bx	lr

08002ed4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b082      	sub	sp, #8
 8002ed8:	af00      	add	r7, sp, #0
 8002eda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7ff ff4f 	bl	8002d80 <__NVIC_SetPriorityGrouping>
}
 8002ee2:	bf00      	nop
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eea:	b580      	push	{r7, lr}
 8002eec:	b086      	sub	sp, #24
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	60b9      	str	r1, [r7, #8]
 8002ef4:	607a      	str	r2, [r7, #4]
 8002ef6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002efc:	f7ff ff64 	bl	8002dc8 <__NVIC_GetPriorityGrouping>
 8002f00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	68b9      	ldr	r1, [r7, #8]
 8002f06:	6978      	ldr	r0, [r7, #20]
 8002f08:	f7ff ffb2 	bl	8002e70 <NVIC_EncodePriority>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f12:	4611      	mov	r1, r2
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7ff ff81 	bl	8002e1c <__NVIC_SetPriority>
}
 8002f1a:	bf00      	nop
 8002f1c:	3718      	adds	r7, #24
 8002f1e:	46bd      	mov	sp, r7
 8002f20:	bd80      	pop	{r7, pc}

08002f22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f22:	b580      	push	{r7, lr}
 8002f24:	b082      	sub	sp, #8
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	4603      	mov	r3, r0
 8002f2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f30:	4618      	mov	r0, r3
 8002f32:	f7ff ff57 	bl	8002de4 <__NVIC_EnableIRQ>
}
 8002f36:	bf00      	nop
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
	...

08002f40 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b08b      	sub	sp, #44	@ 0x2c
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f4e:	2300      	movs	r3, #0
 8002f50:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f52:	e169      	b.n	8003228 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f54:	2201      	movs	r2, #1
 8002f56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69fa      	ldr	r2, [r7, #28]
 8002f64:	4013      	ands	r3, r2
 8002f66:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f68:	69ba      	ldr	r2, [r7, #24]
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	f040 8158 	bne.w	8003222 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	4a9a      	ldr	r2, [pc, #616]	@ (80031e0 <HAL_GPIO_Init+0x2a0>)
 8002f78:	4293      	cmp	r3, r2
 8002f7a:	d05e      	beq.n	800303a <HAL_GPIO_Init+0xfa>
 8002f7c:	4a98      	ldr	r2, [pc, #608]	@ (80031e0 <HAL_GPIO_Init+0x2a0>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d875      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002f82:	4a98      	ldr	r2, [pc, #608]	@ (80031e4 <HAL_GPIO_Init+0x2a4>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d058      	beq.n	800303a <HAL_GPIO_Init+0xfa>
 8002f88:	4a96      	ldr	r2, [pc, #600]	@ (80031e4 <HAL_GPIO_Init+0x2a4>)
 8002f8a:	4293      	cmp	r3, r2
 8002f8c:	d86f      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002f8e:	4a96      	ldr	r2, [pc, #600]	@ (80031e8 <HAL_GPIO_Init+0x2a8>)
 8002f90:	4293      	cmp	r3, r2
 8002f92:	d052      	beq.n	800303a <HAL_GPIO_Init+0xfa>
 8002f94:	4a94      	ldr	r2, [pc, #592]	@ (80031e8 <HAL_GPIO_Init+0x2a8>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d869      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002f9a:	4a94      	ldr	r2, [pc, #592]	@ (80031ec <HAL_GPIO_Init+0x2ac>)
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d04c      	beq.n	800303a <HAL_GPIO_Init+0xfa>
 8002fa0:	4a92      	ldr	r2, [pc, #584]	@ (80031ec <HAL_GPIO_Init+0x2ac>)
 8002fa2:	4293      	cmp	r3, r2
 8002fa4:	d863      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002fa6:	4a92      	ldr	r2, [pc, #584]	@ (80031f0 <HAL_GPIO_Init+0x2b0>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d046      	beq.n	800303a <HAL_GPIO_Init+0xfa>
 8002fac:	4a90      	ldr	r2, [pc, #576]	@ (80031f0 <HAL_GPIO_Init+0x2b0>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d85d      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002fb2:	2b12      	cmp	r3, #18
 8002fb4:	d82a      	bhi.n	800300c <HAL_GPIO_Init+0xcc>
 8002fb6:	2b12      	cmp	r3, #18
 8002fb8:	d859      	bhi.n	800306e <HAL_GPIO_Init+0x12e>
 8002fba:	a201      	add	r2, pc, #4	@ (adr r2, 8002fc0 <HAL_GPIO_Init+0x80>)
 8002fbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fc0:	0800303b 	.word	0x0800303b
 8002fc4:	08003015 	.word	0x08003015
 8002fc8:	08003027 	.word	0x08003027
 8002fcc:	08003069 	.word	0x08003069
 8002fd0:	0800306f 	.word	0x0800306f
 8002fd4:	0800306f 	.word	0x0800306f
 8002fd8:	0800306f 	.word	0x0800306f
 8002fdc:	0800306f 	.word	0x0800306f
 8002fe0:	0800306f 	.word	0x0800306f
 8002fe4:	0800306f 	.word	0x0800306f
 8002fe8:	0800306f 	.word	0x0800306f
 8002fec:	0800306f 	.word	0x0800306f
 8002ff0:	0800306f 	.word	0x0800306f
 8002ff4:	0800306f 	.word	0x0800306f
 8002ff8:	0800306f 	.word	0x0800306f
 8002ffc:	0800306f 	.word	0x0800306f
 8003000:	0800306f 	.word	0x0800306f
 8003004:	0800301d 	.word	0x0800301d
 8003008:	08003031 	.word	0x08003031
 800300c:	4a79      	ldr	r2, [pc, #484]	@ (80031f4 <HAL_GPIO_Init+0x2b4>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d013      	beq.n	800303a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003012:	e02c      	b.n	800306e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003014:	683b      	ldr	r3, [r7, #0]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	623b      	str	r3, [r7, #32]
          break;
 800301a:	e029      	b.n	8003070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800301c:	683b      	ldr	r3, [r7, #0]
 800301e:	68db      	ldr	r3, [r3, #12]
 8003020:	3304      	adds	r3, #4
 8003022:	623b      	str	r3, [r7, #32]
          break;
 8003024:	e024      	b.n	8003070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	68db      	ldr	r3, [r3, #12]
 800302a:	3308      	adds	r3, #8
 800302c:	623b      	str	r3, [r7, #32]
          break;
 800302e:	e01f      	b.n	8003070 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	68db      	ldr	r3, [r3, #12]
 8003034:	330c      	adds	r3, #12
 8003036:	623b      	str	r3, [r7, #32]
          break;
 8003038:	e01a      	b.n	8003070 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d102      	bne.n	8003048 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003042:	2304      	movs	r3, #4
 8003044:	623b      	str	r3, [r7, #32]
          break;
 8003046:	e013      	b.n	8003070 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003048:	683b      	ldr	r3, [r7, #0]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	2b01      	cmp	r3, #1
 800304e:	d105      	bne.n	800305c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003050:	2308      	movs	r3, #8
 8003052:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	69fa      	ldr	r2, [r7, #28]
 8003058:	611a      	str	r2, [r3, #16]
          break;
 800305a:	e009      	b.n	8003070 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800305c:	2308      	movs	r3, #8
 800305e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	615a      	str	r2, [r3, #20]
          break;
 8003066:	e003      	b.n	8003070 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003068:	2300      	movs	r3, #0
 800306a:	623b      	str	r3, [r7, #32]
          break;
 800306c:	e000      	b.n	8003070 <HAL_GPIO_Init+0x130>
          break;
 800306e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003070:	69bb      	ldr	r3, [r7, #24]
 8003072:	2bff      	cmp	r3, #255	@ 0xff
 8003074:	d801      	bhi.n	800307a <HAL_GPIO_Init+0x13a>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	e001      	b.n	800307e <HAL_GPIO_Init+0x13e>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	3304      	adds	r3, #4
 800307e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	2bff      	cmp	r3, #255	@ 0xff
 8003084:	d802      	bhi.n	800308c <HAL_GPIO_Init+0x14c>
 8003086:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	e002      	b.n	8003092 <HAL_GPIO_Init+0x152>
 800308c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800308e:	3b08      	subs	r3, #8
 8003090:	009b      	lsls	r3, r3, #2
 8003092:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	681a      	ldr	r2, [r3, #0]
 8003098:	210f      	movs	r1, #15
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	fa01 f303 	lsl.w	r3, r1, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	401a      	ands	r2, r3
 80030a4:	6a39      	ldr	r1, [r7, #32]
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	fa01 f303 	lsl.w	r3, r1, r3
 80030ac:	431a      	orrs	r2, r3
 80030ae:	697b      	ldr	r3, [r7, #20]
 80030b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	685b      	ldr	r3, [r3, #4]
 80030b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	f000 80b1 	beq.w	8003222 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030c0:	4b4d      	ldr	r3, [pc, #308]	@ (80031f8 <HAL_GPIO_Init+0x2b8>)
 80030c2:	699b      	ldr	r3, [r3, #24]
 80030c4:	4a4c      	ldr	r2, [pc, #304]	@ (80031f8 <HAL_GPIO_Init+0x2b8>)
 80030c6:	f043 0301 	orr.w	r3, r3, #1
 80030ca:	6193      	str	r3, [r2, #24]
 80030cc:	4b4a      	ldr	r3, [pc, #296]	@ (80031f8 <HAL_GPIO_Init+0x2b8>)
 80030ce:	699b      	ldr	r3, [r3, #24]
 80030d0:	f003 0301 	and.w	r3, r3, #1
 80030d4:	60bb      	str	r3, [r7, #8]
 80030d6:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80030d8:	4a48      	ldr	r2, [pc, #288]	@ (80031fc <HAL_GPIO_Init+0x2bc>)
 80030da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030dc:	089b      	lsrs	r3, r3, #2
 80030de:	3302      	adds	r3, #2
 80030e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80030e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030e8:	f003 0303 	and.w	r3, r3, #3
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	220f      	movs	r2, #15
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	68fa      	ldr	r2, [r7, #12]
 80030f8:	4013      	ands	r3, r2
 80030fa:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a40      	ldr	r2, [pc, #256]	@ (8003200 <HAL_GPIO_Init+0x2c0>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d013      	beq.n	800312c <HAL_GPIO_Init+0x1ec>
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	4a3f      	ldr	r2, [pc, #252]	@ (8003204 <HAL_GPIO_Init+0x2c4>)
 8003108:	4293      	cmp	r3, r2
 800310a:	d00d      	beq.n	8003128 <HAL_GPIO_Init+0x1e8>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	4a3e      	ldr	r2, [pc, #248]	@ (8003208 <HAL_GPIO_Init+0x2c8>)
 8003110:	4293      	cmp	r3, r2
 8003112:	d007      	beq.n	8003124 <HAL_GPIO_Init+0x1e4>
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4a3d      	ldr	r2, [pc, #244]	@ (800320c <HAL_GPIO_Init+0x2cc>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d101      	bne.n	8003120 <HAL_GPIO_Init+0x1e0>
 800311c:	2303      	movs	r3, #3
 800311e:	e006      	b.n	800312e <HAL_GPIO_Init+0x1ee>
 8003120:	2304      	movs	r3, #4
 8003122:	e004      	b.n	800312e <HAL_GPIO_Init+0x1ee>
 8003124:	2302      	movs	r3, #2
 8003126:	e002      	b.n	800312e <HAL_GPIO_Init+0x1ee>
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <HAL_GPIO_Init+0x1ee>
 800312c:	2300      	movs	r3, #0
 800312e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003130:	f002 0203 	and.w	r2, r2, #3
 8003134:	0092      	lsls	r2, r2, #2
 8003136:	4093      	lsls	r3, r2
 8003138:	68fa      	ldr	r2, [r7, #12]
 800313a:	4313      	orrs	r3, r2
 800313c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800313e:	492f      	ldr	r1, [pc, #188]	@ (80031fc <HAL_GPIO_Init+0x2bc>)
 8003140:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003142:	089b      	lsrs	r3, r3, #2
 8003144:	3302      	adds	r3, #2
 8003146:	68fa      	ldr	r2, [r7, #12]
 8003148:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003154:	2b00      	cmp	r3, #0
 8003156:	d006      	beq.n	8003166 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003158:	4b2d      	ldr	r3, [pc, #180]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 800315a:	689a      	ldr	r2, [r3, #8]
 800315c:	492c      	ldr	r1, [pc, #176]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 800315e:	69bb      	ldr	r3, [r7, #24]
 8003160:	4313      	orrs	r3, r2
 8003162:	608b      	str	r3, [r1, #8]
 8003164:	e006      	b.n	8003174 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8003166:	4b2a      	ldr	r3, [pc, #168]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 8003168:	689a      	ldr	r2, [r3, #8]
 800316a:	69bb      	ldr	r3, [r7, #24]
 800316c:	43db      	mvns	r3, r3
 800316e:	4928      	ldr	r1, [pc, #160]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 8003170:	4013      	ands	r3, r2
 8003172:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d006      	beq.n	800318e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003180:	4b23      	ldr	r3, [pc, #140]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 8003182:	68da      	ldr	r2, [r3, #12]
 8003184:	4922      	ldr	r1, [pc, #136]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	60cb      	str	r3, [r1, #12]
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800318e:	4b20      	ldr	r3, [pc, #128]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 8003190:	68da      	ldr	r2, [r3, #12]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	43db      	mvns	r3, r3
 8003196:	491e      	ldr	r1, [pc, #120]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 8003198:	4013      	ands	r3, r2
 800319a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d006      	beq.n	80031b6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031a8:	4b19      	ldr	r3, [pc, #100]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 80031aa:	685a      	ldr	r2, [r3, #4]
 80031ac:	4918      	ldr	r1, [pc, #96]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	604b      	str	r3, [r1, #4]
 80031b4:	e006      	b.n	80031c4 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031b6:	4b16      	ldr	r3, [pc, #88]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 80031b8:	685a      	ldr	r2, [r3, #4]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	43db      	mvns	r3, r3
 80031be:	4914      	ldr	r1, [pc, #80]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d021      	beq.n	8003214 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031d0:	4b0f      	ldr	r3, [pc, #60]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 80031d2:	681a      	ldr	r2, [r3, #0]
 80031d4:	490e      	ldr	r1, [pc, #56]	@ (8003210 <HAL_GPIO_Init+0x2d0>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	600b      	str	r3, [r1, #0]
 80031dc:	e021      	b.n	8003222 <HAL_GPIO_Init+0x2e2>
 80031de:	bf00      	nop
 80031e0:	10320000 	.word	0x10320000
 80031e4:	10310000 	.word	0x10310000
 80031e8:	10220000 	.word	0x10220000
 80031ec:	10210000 	.word	0x10210000
 80031f0:	10120000 	.word	0x10120000
 80031f4:	10110000 	.word	0x10110000
 80031f8:	40021000 	.word	0x40021000
 80031fc:	40010000 	.word	0x40010000
 8003200:	40010800 	.word	0x40010800
 8003204:	40010c00 	.word	0x40010c00
 8003208:	40011000 	.word	0x40011000
 800320c:	40011400 	.word	0x40011400
 8003210:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003214:	4b0b      	ldr	r3, [pc, #44]	@ (8003244 <HAL_GPIO_Init+0x304>)
 8003216:	681a      	ldr	r2, [r3, #0]
 8003218:	69bb      	ldr	r3, [r7, #24]
 800321a:	43db      	mvns	r3, r3
 800321c:	4909      	ldr	r1, [pc, #36]	@ (8003244 <HAL_GPIO_Init+0x304>)
 800321e:	4013      	ands	r3, r2
 8003220:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003224:	3301      	adds	r3, #1
 8003226:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003228:	683b      	ldr	r3, [r7, #0]
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800322e:	fa22 f303 	lsr.w	r3, r2, r3
 8003232:	2b00      	cmp	r3, #0
 8003234:	f47f ae8e 	bne.w	8002f54 <HAL_GPIO_Init+0x14>
  }
}
 8003238:	bf00      	nop
 800323a:	bf00      	nop
 800323c:	372c      	adds	r7, #44	@ 0x2c
 800323e:	46bd      	mov	sp, r7
 8003240:	bc80      	pop	{r7}
 8003242:	4770      	bx	lr
 8003244:	40010400 	.word	0x40010400

08003248 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003248:	b480      	push	{r7}
 800324a:	b085      	sub	sp, #20
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	460b      	mov	r3, r1
 8003252:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	689a      	ldr	r2, [r3, #8]
 8003258:	887b      	ldrh	r3, [r7, #2]
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003260:	2301      	movs	r3, #1
 8003262:	73fb      	strb	r3, [r7, #15]
 8003264:	e001      	b.n	800326a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003266:	2300      	movs	r3, #0
 8003268:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3714      	adds	r7, #20
 8003270:	46bd      	mov	sp, r7
 8003272:	bc80      	pop	{r7}
 8003274:	4770      	bx	lr

08003276 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003276:	b480      	push	{r7}
 8003278:	b083      	sub	sp, #12
 800327a:	af00      	add	r7, sp, #0
 800327c:	6078      	str	r0, [r7, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	807b      	strh	r3, [r7, #2]
 8003282:	4613      	mov	r3, r2
 8003284:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003286:	787b      	ldrb	r3, [r7, #1]
 8003288:	2b00      	cmp	r3, #0
 800328a:	d003      	beq.n	8003294 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800328c:	887a      	ldrh	r2, [r7, #2]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003292:	e003      	b.n	800329c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003294:	887b      	ldrh	r3, [r7, #2]
 8003296:	041a      	lsls	r2, r3, #16
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	611a      	str	r2, [r3, #16]
}
 800329c:	bf00      	nop
 800329e:	370c      	adds	r7, #12
 80032a0:	46bd      	mov	sp, r7
 80032a2:	bc80      	pop	{r7}
 80032a4:	4770      	bx	lr
	...

080032a8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032a8:	b580      	push	{r7, lr}
 80032aa:	b084      	sub	sp, #16
 80032ac:	af00      	add	r7, sp, #0
 80032ae:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032b6:	2301      	movs	r3, #1
 80032b8:	e12b      	b.n	8003512 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d106      	bne.n	80032d4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	2200      	movs	r2, #0
 80032ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f7fe fe16 	bl	8001f00 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2224      	movs	r2, #36	@ 0x24
 80032d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f022 0201 	bic.w	r2, r2, #1
 80032ea:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032fa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800330a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800330c:	f001 f844 	bl	8004398 <HAL_RCC_GetPCLK1Freq>
 8003310:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	4a81      	ldr	r2, [pc, #516]	@ (800351c <HAL_I2C_Init+0x274>)
 8003318:	4293      	cmp	r3, r2
 800331a:	d807      	bhi.n	800332c <HAL_I2C_Init+0x84>
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	4a80      	ldr	r2, [pc, #512]	@ (8003520 <HAL_I2C_Init+0x278>)
 8003320:	4293      	cmp	r3, r2
 8003322:	bf94      	ite	ls
 8003324:	2301      	movls	r3, #1
 8003326:	2300      	movhi	r3, #0
 8003328:	b2db      	uxtb	r3, r3
 800332a:	e006      	b.n	800333a <HAL_I2C_Init+0x92>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a7d      	ldr	r2, [pc, #500]	@ (8003524 <HAL_I2C_Init+0x27c>)
 8003330:	4293      	cmp	r3, r2
 8003332:	bf94      	ite	ls
 8003334:	2301      	movls	r3, #1
 8003336:	2300      	movhi	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	2b00      	cmp	r3, #0
 800333c:	d001      	beq.n	8003342 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e0e7      	b.n	8003512 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	4a78      	ldr	r2, [pc, #480]	@ (8003528 <HAL_I2C_Init+0x280>)
 8003346:	fba2 2303 	umull	r2, r3, r2, r3
 800334a:	0c9b      	lsrs	r3, r3, #18
 800334c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	68ba      	ldr	r2, [r7, #8]
 800335e:	430a      	orrs	r2, r1
 8003360:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	4a6a      	ldr	r2, [pc, #424]	@ (800351c <HAL_I2C_Init+0x274>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d802      	bhi.n	800337c <HAL_I2C_Init+0xd4>
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	3301      	adds	r3, #1
 800337a:	e009      	b.n	8003390 <HAL_I2C_Init+0xe8>
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003382:	fb02 f303 	mul.w	r3, r2, r3
 8003386:	4a69      	ldr	r2, [pc, #420]	@ (800352c <HAL_I2C_Init+0x284>)
 8003388:	fba2 2303 	umull	r2, r3, r2, r3
 800338c:	099b      	lsrs	r3, r3, #6
 800338e:	3301      	adds	r3, #1
 8003390:	687a      	ldr	r2, [r7, #4]
 8003392:	6812      	ldr	r2, [r2, #0]
 8003394:	430b      	orrs	r3, r1
 8003396:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	69db      	ldr	r3, [r3, #28]
 800339e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80033a2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	495c      	ldr	r1, [pc, #368]	@ (800351c <HAL_I2C_Init+0x274>)
 80033ac:	428b      	cmp	r3, r1
 80033ae:	d819      	bhi.n	80033e4 <HAL_I2C_Init+0x13c>
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	1e59      	subs	r1, r3, #1
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	685b      	ldr	r3, [r3, #4]
 80033b8:	005b      	lsls	r3, r3, #1
 80033ba:	fbb1 f3f3 	udiv	r3, r1, r3
 80033be:	1c59      	adds	r1, r3, #1
 80033c0:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80033c4:	400b      	ands	r3, r1
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d00a      	beq.n	80033e0 <HAL_I2C_Init+0x138>
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	1e59      	subs	r1, r3, #1
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	005b      	lsls	r3, r3, #1
 80033d4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033d8:	3301      	adds	r3, #1
 80033da:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033de:	e051      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 80033e0:	2304      	movs	r3, #4
 80033e2:	e04f      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	689b      	ldr	r3, [r3, #8]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d111      	bne.n	8003410 <HAL_I2C_Init+0x168>
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	1e58      	subs	r0, r3, #1
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6859      	ldr	r1, [r3, #4]
 80033f4:	460b      	mov	r3, r1
 80033f6:	005b      	lsls	r3, r3, #1
 80033f8:	440b      	add	r3, r1
 80033fa:	fbb0 f3f3 	udiv	r3, r0, r3
 80033fe:	3301      	adds	r3, #1
 8003400:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003404:	2b00      	cmp	r3, #0
 8003406:	bf0c      	ite	eq
 8003408:	2301      	moveq	r3, #1
 800340a:	2300      	movne	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e012      	b.n	8003436 <HAL_I2C_Init+0x18e>
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	1e58      	subs	r0, r3, #1
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6859      	ldr	r1, [r3, #4]
 8003418:	460b      	mov	r3, r1
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	0099      	lsls	r1, r3, #2
 8003420:	440b      	add	r3, r1
 8003422:	fbb0 f3f3 	udiv	r3, r0, r3
 8003426:	3301      	adds	r3, #1
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	2b00      	cmp	r3, #0
 800342e:	bf0c      	ite	eq
 8003430:	2301      	moveq	r3, #1
 8003432:	2300      	movne	r3, #0
 8003434:	b2db      	uxtb	r3, r3
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Init+0x196>
 800343a:	2301      	movs	r3, #1
 800343c:	e022      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10e      	bne.n	8003464 <HAL_I2C_Init+0x1bc>
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	1e58      	subs	r0, r3, #1
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6859      	ldr	r1, [r3, #4]
 800344e:	460b      	mov	r3, r1
 8003450:	005b      	lsls	r3, r3, #1
 8003452:	440b      	add	r3, r1
 8003454:	fbb0 f3f3 	udiv	r3, r0, r3
 8003458:	3301      	adds	r3, #1
 800345a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800345e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003462:	e00f      	b.n	8003484 <HAL_I2C_Init+0x1dc>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	1e58      	subs	r0, r3, #1
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6859      	ldr	r1, [r3, #4]
 800346c:	460b      	mov	r3, r1
 800346e:	009b      	lsls	r3, r3, #2
 8003470:	440b      	add	r3, r1
 8003472:	0099      	lsls	r1, r3, #2
 8003474:	440b      	add	r3, r1
 8003476:	fbb0 f3f3 	udiv	r3, r0, r3
 800347a:	3301      	adds	r3, #1
 800347c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003480:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003484:	6879      	ldr	r1, [r7, #4]
 8003486:	6809      	ldr	r1, [r1, #0]
 8003488:	4313      	orrs	r3, r2
 800348a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	69da      	ldr	r2, [r3, #28]
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	6a1b      	ldr	r3, [r3, #32]
 800349e:	431a      	orrs	r2, r3
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	430a      	orrs	r2, r1
 80034a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80034b2:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	6911      	ldr	r1, [r2, #16]
 80034ba:	687a      	ldr	r2, [r7, #4]
 80034bc:	68d2      	ldr	r2, [r2, #12]
 80034be:	4311      	orrs	r1, r2
 80034c0:	687a      	ldr	r2, [r7, #4]
 80034c2:	6812      	ldr	r2, [r2, #0]
 80034c4:	430b      	orrs	r3, r1
 80034c6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	68db      	ldr	r3, [r3, #12]
 80034ce:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	695a      	ldr	r2, [r3, #20]
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	431a      	orrs	r2, r3
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	430a      	orrs	r2, r1
 80034e2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	681a      	ldr	r2, [r3, #0]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	f042 0201 	orr.w	r2, r2, #1
 80034f2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2220      	movs	r2, #32
 80034fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	2200      	movs	r2, #0
 8003506:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2200      	movs	r2, #0
 800350c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003510:	2300      	movs	r3, #0
}
 8003512:	4618      	mov	r0, r3
 8003514:	3710      	adds	r7, #16
 8003516:	46bd      	mov	sp, r7
 8003518:	bd80      	pop	{r7, pc}
 800351a:	bf00      	nop
 800351c:	000186a0 	.word	0x000186a0
 8003520:	001e847f 	.word	0x001e847f
 8003524:	003d08ff 	.word	0x003d08ff
 8003528:	431bde83 	.word	0x431bde83
 800352c:	10624dd3 	.word	0x10624dd3

08003530 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b088      	sub	sp, #32
 8003534:	af02      	add	r7, sp, #8
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	4608      	mov	r0, r1
 800353a:	4611      	mov	r1, r2
 800353c:	461a      	mov	r2, r3
 800353e:	4603      	mov	r3, r0
 8003540:	817b      	strh	r3, [r7, #10]
 8003542:	460b      	mov	r3, r1
 8003544:	813b      	strh	r3, [r7, #8]
 8003546:	4613      	mov	r3, r2
 8003548:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800354a:	f7fe ff11 	bl	8002370 <HAL_GetTick>
 800354e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003556:	b2db      	uxtb	r3, r3
 8003558:	2b20      	cmp	r3, #32
 800355a:	f040 80d9 	bne.w	8003710 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	9300      	str	r3, [sp, #0]
 8003562:	2319      	movs	r3, #25
 8003564:	2201      	movs	r2, #1
 8003566:	496d      	ldr	r1, [pc, #436]	@ (800371c <HAL_I2C_Mem_Write+0x1ec>)
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f000 f971 	bl	8003850 <I2C_WaitOnFlagUntilTimeout>
 800356e:	4603      	mov	r3, r0
 8003570:	2b00      	cmp	r3, #0
 8003572:	d001      	beq.n	8003578 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003574:	2302      	movs	r3, #2
 8003576:	e0cc      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800357e:	2b01      	cmp	r3, #1
 8003580:	d101      	bne.n	8003586 <HAL_I2C_Mem_Write+0x56>
 8003582:	2302      	movs	r3, #2
 8003584:	e0c5      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	2201      	movs	r2, #1
 800358a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0301 	and.w	r3, r3, #1
 8003598:	2b01      	cmp	r3, #1
 800359a:	d007      	beq.n	80035ac <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	681a      	ldr	r2, [r3, #0]
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f042 0201 	orr.w	r2, r2, #1
 80035aa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80035ba:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	2221      	movs	r2, #33	@ 0x21
 80035c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	2240      	movs	r2, #64	@ 0x40
 80035c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	2200      	movs	r2, #0
 80035d0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	6a3a      	ldr	r2, [r7, #32]
 80035d6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80035dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035e2:	b29a      	uxth	r2, r3
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	4a4d      	ldr	r2, [pc, #308]	@ (8003720 <HAL_I2C_Mem_Write+0x1f0>)
 80035ec:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80035ee:	88f8      	ldrh	r0, [r7, #6]
 80035f0:	893a      	ldrh	r2, [r7, #8]
 80035f2:	8979      	ldrh	r1, [r7, #10]
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	9301      	str	r3, [sp, #4]
 80035f8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035fa:	9300      	str	r3, [sp, #0]
 80035fc:	4603      	mov	r3, r0
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f000 f890 	bl	8003724 <I2C_RequestMemoryWrite>
 8003604:	4603      	mov	r3, r0
 8003606:	2b00      	cmp	r3, #0
 8003608:	d052      	beq.n	80036b0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800360a:	2301      	movs	r3, #1
 800360c:	e081      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800360e:	697a      	ldr	r2, [r7, #20]
 8003610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003612:	68f8      	ldr	r0, [r7, #12]
 8003614:	f000 fa36 	bl	8003a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003618:	4603      	mov	r3, r0
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00d      	beq.n	800363a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003622:	2b04      	cmp	r3, #4
 8003624:	d107      	bne.n	8003636 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	681a      	ldr	r2, [r3, #0]
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003634:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e06b      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800363e:	781a      	ldrb	r2, [r3, #0]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364a:	1c5a      	adds	r2, r3, #1
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003654:	3b01      	subs	r3, #1
 8003656:	b29a      	uxth	r2, r3
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003660:	b29b      	uxth	r3, r3
 8003662:	3b01      	subs	r3, #1
 8003664:	b29a      	uxth	r2, r3
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	695b      	ldr	r3, [r3, #20]
 8003670:	f003 0304 	and.w	r3, r3, #4
 8003674:	2b04      	cmp	r3, #4
 8003676:	d11b      	bne.n	80036b0 <HAL_I2C_Mem_Write+0x180>
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800367c:	2b00      	cmp	r3, #0
 800367e:	d017      	beq.n	80036b0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003684:	781a      	ldrb	r2, [r3, #0]
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003690:	1c5a      	adds	r2, r3, #1
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369a:	3b01      	subs	r3, #1
 800369c:	b29a      	uxth	r2, r3
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	3b01      	subs	r3, #1
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d1aa      	bne.n	800360e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036b8:	697a      	ldr	r2, [r7, #20]
 80036ba:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80036bc:	68f8      	ldr	r0, [r7, #12]
 80036be:	f000 fa29 	bl	8003b14 <I2C_WaitOnBTFFlagUntilTimeout>
 80036c2:	4603      	mov	r3, r0
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d00d      	beq.n	80036e4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036cc:	2b04      	cmp	r3, #4
 80036ce:	d107      	bne.n	80036e0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	681a      	ldr	r2, [r3, #0]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036de:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80036e0:	2301      	movs	r3, #1
 80036e2:	e016      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80036f2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	2220      	movs	r2, #32
 80036f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	2200      	movs	r2, #0
 8003700:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800370c:	2300      	movs	r3, #0
 800370e:	e000      	b.n	8003712 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003710:	2302      	movs	r3, #2
  }
}
 8003712:	4618      	mov	r0, r3
 8003714:	3718      	adds	r7, #24
 8003716:	46bd      	mov	sp, r7
 8003718:	bd80      	pop	{r7, pc}
 800371a:	bf00      	nop
 800371c:	00100002 	.word	0x00100002
 8003720:	ffff0000 	.word	0xffff0000

08003724 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003724:	b580      	push	{r7, lr}
 8003726:	b088      	sub	sp, #32
 8003728:	af02      	add	r7, sp, #8
 800372a:	60f8      	str	r0, [r7, #12]
 800372c:	4608      	mov	r0, r1
 800372e:	4611      	mov	r1, r2
 8003730:	461a      	mov	r2, r3
 8003732:	4603      	mov	r3, r0
 8003734:	817b      	strh	r3, [r7, #10]
 8003736:	460b      	mov	r3, r1
 8003738:	813b      	strh	r3, [r7, #8]
 800373a:	4613      	mov	r3, r2
 800373c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	681a      	ldr	r2, [r3, #0]
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800374c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800374e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003750:	9300      	str	r3, [sp, #0]
 8003752:	6a3b      	ldr	r3, [r7, #32]
 8003754:	2200      	movs	r2, #0
 8003756:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800375a:	68f8      	ldr	r0, [r7, #12]
 800375c:	f000 f878 	bl	8003850 <I2C_WaitOnFlagUntilTimeout>
 8003760:	4603      	mov	r3, r0
 8003762:	2b00      	cmp	r3, #0
 8003764:	d00d      	beq.n	8003782 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003774:	d103      	bne.n	800377e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800377c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800377e:	2303      	movs	r3, #3
 8003780:	e05f      	b.n	8003842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003782:	897b      	ldrh	r3, [r7, #10]
 8003784:	b2db      	uxtb	r3, r3
 8003786:	461a      	mov	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003790:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003794:	6a3a      	ldr	r2, [r7, #32]
 8003796:	492d      	ldr	r1, [pc, #180]	@ (800384c <I2C_RequestMemoryWrite+0x128>)
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 f8d3 	bl	8003944 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e04c      	b.n	8003842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80037a8:	2300      	movs	r3, #0
 80037aa:	617b      	str	r3, [r7, #20]
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	695b      	ldr	r3, [r3, #20]
 80037b2:	617b      	str	r3, [r7, #20]
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	617b      	str	r3, [r7, #20]
 80037bc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80037be:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80037c0:	6a39      	ldr	r1, [r7, #32]
 80037c2:	68f8      	ldr	r0, [r7, #12]
 80037c4:	f000 f95e 	bl	8003a84 <I2C_WaitOnTXEFlagUntilTimeout>
 80037c8:	4603      	mov	r3, r0
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d00d      	beq.n	80037ea <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037d2:	2b04      	cmp	r3, #4
 80037d4:	d107      	bne.n	80037e6 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80037e4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80037e6:	2301      	movs	r3, #1
 80037e8:	e02b      	b.n	8003842 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80037ea:	88fb      	ldrh	r3, [r7, #6]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d105      	bne.n	80037fc <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80037f0:	893b      	ldrh	r3, [r7, #8]
 80037f2:	b2da      	uxtb	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	611a      	str	r2, [r3, #16]
 80037fa:	e021      	b.n	8003840 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80037fc:	893b      	ldrh	r3, [r7, #8]
 80037fe:	0a1b      	lsrs	r3, r3, #8
 8003800:	b29b      	uxth	r3, r3
 8003802:	b2da      	uxtb	r2, r3
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800380a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800380c:	6a39      	ldr	r1, [r7, #32]
 800380e:	68f8      	ldr	r0, [r7, #12]
 8003810:	f000 f938 	bl	8003a84 <I2C_WaitOnTXEFlagUntilTimeout>
 8003814:	4603      	mov	r3, r0
 8003816:	2b00      	cmp	r3, #0
 8003818:	d00d      	beq.n	8003836 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	2b04      	cmp	r3, #4
 8003820:	d107      	bne.n	8003832 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	681a      	ldr	r2, [r3, #0]
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003830:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e005      	b.n	8003842 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003836:	893b      	ldrh	r3, [r7, #8]
 8003838:	b2da      	uxtb	r2, r3
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003840:	2300      	movs	r3, #0
}
 8003842:	4618      	mov	r0, r3
 8003844:	3718      	adds	r7, #24
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}
 800384a:	bf00      	nop
 800384c:	00010002 	.word	0x00010002

08003850 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003850:	b580      	push	{r7, lr}
 8003852:	b084      	sub	sp, #16
 8003854:	af00      	add	r7, sp, #0
 8003856:	60f8      	str	r0, [r7, #12]
 8003858:	60b9      	str	r1, [r7, #8]
 800385a:	603b      	str	r3, [r7, #0]
 800385c:	4613      	mov	r3, r2
 800385e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003860:	e048      	b.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003868:	d044      	beq.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800386a:	f7fe fd81 	bl	8002370 <HAL_GetTick>
 800386e:	4602      	mov	r2, r0
 8003870:	69bb      	ldr	r3, [r7, #24]
 8003872:	1ad3      	subs	r3, r2, r3
 8003874:	683a      	ldr	r2, [r7, #0]
 8003876:	429a      	cmp	r2, r3
 8003878:	d302      	bcc.n	8003880 <I2C_WaitOnFlagUntilTimeout+0x30>
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2b00      	cmp	r3, #0
 800387e:	d139      	bne.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	0c1b      	lsrs	r3, r3, #16
 8003884:	b2db      	uxtb	r3, r3
 8003886:	2b01      	cmp	r3, #1
 8003888:	d10d      	bne.n	80038a6 <I2C_WaitOnFlagUntilTimeout+0x56>
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	43da      	mvns	r2, r3
 8003892:	68bb      	ldr	r3, [r7, #8]
 8003894:	4013      	ands	r3, r2
 8003896:	b29b      	uxth	r3, r3
 8003898:	2b00      	cmp	r3, #0
 800389a:	bf0c      	ite	eq
 800389c:	2301      	moveq	r3, #1
 800389e:	2300      	movne	r3, #0
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	461a      	mov	r2, r3
 80038a4:	e00c      	b.n	80038c0 <I2C_WaitOnFlagUntilTimeout+0x70>
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	699b      	ldr	r3, [r3, #24]
 80038ac:	43da      	mvns	r2, r3
 80038ae:	68bb      	ldr	r3, [r7, #8]
 80038b0:	4013      	ands	r3, r2
 80038b2:	b29b      	uxth	r3, r3
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	461a      	mov	r2, r3
 80038c0:	79fb      	ldrb	r3, [r7, #7]
 80038c2:	429a      	cmp	r2, r3
 80038c4:	d116      	bne.n	80038f4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	2200      	movs	r2, #0
 80038ca:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	2220      	movs	r2, #32
 80038d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	2200      	movs	r2, #0
 80038d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038e0:	f043 0220 	orr.w	r2, r3, #32
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	2200      	movs	r2, #0
 80038ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80038f0:	2301      	movs	r3, #1
 80038f2:	e023      	b.n	800393c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	0c1b      	lsrs	r3, r3, #16
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d10d      	bne.n	800391a <I2C_WaitOnFlagUntilTimeout+0xca>
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	695b      	ldr	r3, [r3, #20]
 8003904:	43da      	mvns	r2, r3
 8003906:	68bb      	ldr	r3, [r7, #8]
 8003908:	4013      	ands	r3, r2
 800390a:	b29b      	uxth	r3, r3
 800390c:	2b00      	cmp	r3, #0
 800390e:	bf0c      	ite	eq
 8003910:	2301      	moveq	r3, #1
 8003912:	2300      	movne	r3, #0
 8003914:	b2db      	uxtb	r3, r3
 8003916:	461a      	mov	r2, r3
 8003918:	e00c      	b.n	8003934 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	699b      	ldr	r3, [r3, #24]
 8003920:	43da      	mvns	r2, r3
 8003922:	68bb      	ldr	r3, [r7, #8]
 8003924:	4013      	ands	r3, r2
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	bf0c      	ite	eq
 800392c:	2301      	moveq	r3, #1
 800392e:	2300      	movne	r3, #0
 8003930:	b2db      	uxtb	r3, r3
 8003932:	461a      	mov	r2, r3
 8003934:	79fb      	ldrb	r3, [r7, #7]
 8003936:	429a      	cmp	r2, r3
 8003938:	d093      	beq.n	8003862 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800393a:	2300      	movs	r3, #0
}
 800393c:	4618      	mov	r0, r3
 800393e:	3710      	adds	r7, #16
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}

08003944 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	b084      	sub	sp, #16
 8003948:	af00      	add	r7, sp, #0
 800394a:	60f8      	str	r0, [r7, #12]
 800394c:	60b9      	str	r1, [r7, #8]
 800394e:	607a      	str	r2, [r7, #4]
 8003950:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003952:	e071      	b.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800395e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003962:	d123      	bne.n	80039ac <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	681a      	ldr	r2, [r3, #0]
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003972:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800397c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	2220      	movs	r2, #32
 8003988:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	2200      	movs	r2, #0
 8003990:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003998:	f043 0204 	orr.w	r2, r3, #4
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	2200      	movs	r2, #0
 80039a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80039a8:	2301      	movs	r3, #1
 80039aa:	e067      	b.n	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039b2:	d041      	beq.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039b4:	f7fe fcdc 	bl	8002370 <HAL_GetTick>
 80039b8:	4602      	mov	r2, r0
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	1ad3      	subs	r3, r2, r3
 80039be:	687a      	ldr	r2, [r7, #4]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d302      	bcc.n	80039ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d136      	bne.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80039ca:	68bb      	ldr	r3, [r7, #8]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	b2db      	uxtb	r3, r3
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d10c      	bne.n	80039ee <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	695b      	ldr	r3, [r3, #20]
 80039da:	43da      	mvns	r2, r3
 80039dc:	68bb      	ldr	r3, [r7, #8]
 80039de:	4013      	ands	r3, r2
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	bf14      	ite	ne
 80039e6:	2301      	movne	r3, #1
 80039e8:	2300      	moveq	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	e00b      	b.n	8003a06 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	699b      	ldr	r3, [r3, #24]
 80039f4:	43da      	mvns	r2, r3
 80039f6:	68bb      	ldr	r3, [r7, #8]
 80039f8:	4013      	ands	r3, r2
 80039fa:	b29b      	uxth	r3, r3
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	bf14      	ite	ne
 8003a00:	2301      	movne	r3, #1
 8003a02:	2300      	moveq	r3, #0
 8003a04:	b2db      	uxtb	r3, r3
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d016      	beq.n	8003a38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	2200      	movs	r2, #0
 8003a0e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	2220      	movs	r2, #32
 8003a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a24:	f043 0220 	orr.w	r2, r3, #32
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e021      	b.n	8003a7c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	0c1b      	lsrs	r3, r3, #16
 8003a3c:	b2db      	uxtb	r3, r3
 8003a3e:	2b01      	cmp	r3, #1
 8003a40:	d10c      	bne.n	8003a5c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	43da      	mvns	r2, r3
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	b29b      	uxth	r3, r3
 8003a50:	2b00      	cmp	r3, #0
 8003a52:	bf14      	ite	ne
 8003a54:	2301      	movne	r3, #1
 8003a56:	2300      	moveq	r3, #0
 8003a58:	b2db      	uxtb	r3, r3
 8003a5a:	e00b      	b.n	8003a74 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	43da      	mvns	r2, r3
 8003a64:	68bb      	ldr	r3, [r7, #8]
 8003a66:	4013      	ands	r3, r2
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	bf14      	ite	ne
 8003a6e:	2301      	movne	r3, #1
 8003a70:	2300      	moveq	r3, #0
 8003a72:	b2db      	uxtb	r3, r3
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	f47f af6d 	bne.w	8003954 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003a7a:	2300      	movs	r3, #0
}
 8003a7c:	4618      	mov	r0, r3
 8003a7e:	3710      	adds	r7, #16
 8003a80:	46bd      	mov	sp, r7
 8003a82:	bd80      	pop	{r7, pc}

08003a84 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a84:	b580      	push	{r7, lr}
 8003a86:	b084      	sub	sp, #16
 8003a88:	af00      	add	r7, sp, #0
 8003a8a:	60f8      	str	r0, [r7, #12]
 8003a8c:	60b9      	str	r1, [r7, #8]
 8003a8e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a90:	e034      	b.n	8003afc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a92:	68f8      	ldr	r0, [r7, #12]
 8003a94:	f000 f886 	bl	8003ba4 <I2C_IsAcknowledgeFailed>
 8003a98:	4603      	mov	r3, r0
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d001      	beq.n	8003aa2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e034      	b.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aa8:	d028      	beq.n	8003afc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003aaa:	f7fe fc61 	bl	8002370 <HAL_GetTick>
 8003aae:	4602      	mov	r2, r0
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	1ad3      	subs	r3, r2, r3
 8003ab4:	68ba      	ldr	r2, [r7, #8]
 8003ab6:	429a      	cmp	r2, r3
 8003ab8:	d302      	bcc.n	8003ac0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003aba:	68bb      	ldr	r3, [r7, #8]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d11d      	bne.n	8003afc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	695b      	ldr	r3, [r3, #20]
 8003ac6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003aca:	2b80      	cmp	r3, #128	@ 0x80
 8003acc:	d016      	beq.n	8003afc <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	2220      	movs	r2, #32
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	f043 0220 	orr.w	r2, r3, #32
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e007      	b.n	8003b0c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b06:	2b80      	cmp	r3, #128	@ 0x80
 8003b08:	d1c3      	bne.n	8003a92 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b0a:	2300      	movs	r3, #0
}
 8003b0c:	4618      	mov	r0, r3
 8003b0e:	3710      	adds	r7, #16
 8003b10:	46bd      	mov	sp, r7
 8003b12:	bd80      	pop	{r7, pc}

08003b14 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b084      	sub	sp, #16
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	60f8      	str	r0, [r7, #12]
 8003b1c:	60b9      	str	r1, [r7, #8]
 8003b1e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b20:	e034      	b.n	8003b8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 f83e 	bl	8003ba4 <I2C_IsAcknowledgeFailed>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e034      	b.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b38:	d028      	beq.n	8003b8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003b3a:	f7fe fc19 	bl	8002370 <HAL_GetTick>
 8003b3e:	4602      	mov	r2, r0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	1ad3      	subs	r3, r2, r3
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	429a      	cmp	r2, r3
 8003b48:	d302      	bcc.n	8003b50 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003b4a:	68bb      	ldr	r3, [r7, #8]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d11d      	bne.n	8003b8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	695b      	ldr	r3, [r3, #20]
 8003b56:	f003 0304 	and.w	r3, r3, #4
 8003b5a:	2b04      	cmp	r3, #4
 8003b5c:	d016      	beq.n	8003b8c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2220      	movs	r2, #32
 8003b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	2200      	movs	r2, #0
 8003b70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b78:	f043 0220 	orr.w	r2, r3, #32
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2200      	movs	r2, #0
 8003b84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	e007      	b.n	8003b9c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	695b      	ldr	r3, [r3, #20]
 8003b92:	f003 0304 	and.w	r3, r3, #4
 8003b96:	2b04      	cmp	r3, #4
 8003b98:	d1c3      	bne.n	8003b22 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003b9a:	2300      	movs	r3, #0
}
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695b      	ldr	r3, [r3, #20]
 8003bb2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bb6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bba:	d11b      	bne.n	8003bf4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bc4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2220      	movs	r2, #32
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003be0:	f043 0204 	orr.w	r2, r3, #4
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2200      	movs	r2, #0
 8003bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	e000      	b.n	8003bf6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003bf4:	2300      	movs	r3, #0
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	370c      	adds	r7, #12
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	bc80      	pop	{r7}
 8003bfe:	4770      	bx	lr

08003c00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b086      	sub	sp, #24
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d101      	bne.n	8003c12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003c0e:	2301      	movs	r3, #1
 8003c10:	e272      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	f003 0301 	and.w	r3, r3, #1
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	f000 8087 	beq.w	8003d2e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003c20:	4b92      	ldr	r3, [pc, #584]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	f003 030c 	and.w	r3, r3, #12
 8003c28:	2b04      	cmp	r3, #4
 8003c2a:	d00c      	beq.n	8003c46 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003c2c:	4b8f      	ldr	r3, [pc, #572]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	f003 030c 	and.w	r3, r3, #12
 8003c34:	2b08      	cmp	r3, #8
 8003c36:	d112      	bne.n	8003c5e <HAL_RCC_OscConfig+0x5e>
 8003c38:	4b8c      	ldr	r3, [pc, #560]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003c40:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c44:	d10b      	bne.n	8003c5e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c46:	4b89      	ldr	r3, [pc, #548]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d06c      	beq.n	8003d2c <HAL_RCC_OscConfig+0x12c>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	685b      	ldr	r3, [r3, #4]
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d168      	bne.n	8003d2c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e24c      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003c66:	d106      	bne.n	8003c76 <HAL_RCC_OscConfig+0x76>
 8003c68:	4b80      	ldr	r3, [pc, #512]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	4a7f      	ldr	r2, [pc, #508]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c6e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003c72:	6013      	str	r3, [r2, #0]
 8003c74:	e02e      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd4>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	685b      	ldr	r3, [r3, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d10c      	bne.n	8003c98 <HAL_RCC_OscConfig+0x98>
 8003c7e:	4b7b      	ldr	r3, [pc, #492]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	4a7a      	ldr	r2, [pc, #488]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c84:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003c88:	6013      	str	r3, [r2, #0]
 8003c8a:	4b78      	ldr	r3, [pc, #480]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	4a77      	ldr	r2, [pc, #476]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003c90:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003c94:	6013      	str	r3, [r2, #0]
 8003c96:	e01d      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd4>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003ca0:	d10c      	bne.n	8003cbc <HAL_RCC_OscConfig+0xbc>
 8003ca2:	4b72      	ldr	r3, [pc, #456]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a71      	ldr	r2, [pc, #452]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003ca8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003cac:	6013      	str	r3, [r2, #0]
 8003cae:	4b6f      	ldr	r3, [pc, #444]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a6e      	ldr	r2, [pc, #440]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cb4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003cb8:	6013      	str	r3, [r2, #0]
 8003cba:	e00b      	b.n	8003cd4 <HAL_RCC_OscConfig+0xd4>
 8003cbc:	4b6b      	ldr	r3, [pc, #428]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a6a      	ldr	r2, [pc, #424]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cc2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003cc6:	6013      	str	r3, [r2, #0]
 8003cc8:	4b68      	ldr	r3, [pc, #416]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a67      	ldr	r2, [pc, #412]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003cd2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	685b      	ldr	r3, [r3, #4]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d013      	beq.n	8003d04 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003cdc:	f7fe fb48 	bl	8002370 <HAL_GetTick>
 8003ce0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ce2:	e008      	b.n	8003cf6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ce4:	f7fe fb44 	bl	8002370 <HAL_GetTick>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	693b      	ldr	r3, [r7, #16]
 8003cec:	1ad3      	subs	r3, r2, r3
 8003cee:	2b64      	cmp	r3, #100	@ 0x64
 8003cf0:	d901      	bls.n	8003cf6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003cf2:	2303      	movs	r3, #3
 8003cf4:	e200      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003cf6:	4b5d      	ldr	r3, [pc, #372]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d0f0      	beq.n	8003ce4 <HAL_RCC_OscConfig+0xe4>
 8003d02:	e014      	b.n	8003d2e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d04:	f7fe fb34 	bl	8002370 <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d0a:	e008      	b.n	8003d1e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d0c:	f7fe fb30 	bl	8002370 <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	693b      	ldr	r3, [r7, #16]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	2b64      	cmp	r3, #100	@ 0x64
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e1ec      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003d1e:	4b53      	ldr	r3, [pc, #332]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d1f0      	bne.n	8003d0c <HAL_RCC_OscConfig+0x10c>
 8003d2a:	e000      	b.n	8003d2e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d2c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0302 	and.w	r3, r3, #2
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d063      	beq.n	8003e02 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003d3a:	4b4c      	ldr	r3, [pc, #304]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d3c:	685b      	ldr	r3, [r3, #4]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00b      	beq.n	8003d5e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003d46:	4b49      	ldr	r3, [pc, #292]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d11c      	bne.n	8003d8c <HAL_RCC_OscConfig+0x18c>
 8003d52:	4b46      	ldr	r3, [pc, #280]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d116      	bne.n	8003d8c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d5e:	4b43      	ldr	r3, [pc, #268]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d60:	681b      	ldr	r3, [r3, #0]
 8003d62:	f003 0302 	and.w	r3, r3, #2
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d005      	beq.n	8003d76 <HAL_RCC_OscConfig+0x176>
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	691b      	ldr	r3, [r3, #16]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d001      	beq.n	8003d76 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003d72:	2301      	movs	r3, #1
 8003d74:	e1c0      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003d76:	4b3d      	ldr	r3, [pc, #244]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	00db      	lsls	r3, r3, #3
 8003d84:	4939      	ldr	r1, [pc, #228]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003d86:	4313      	orrs	r3, r2
 8003d88:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003d8a:	e03a      	b.n	8003e02 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d020      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003d94:	4b36      	ldr	r3, [pc, #216]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003d96:	2201      	movs	r2, #1
 8003d98:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d9a:	f7fe fae9 	bl	8002370 <HAL_GetTick>
 8003d9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003da0:	e008      	b.n	8003db4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003da2:	f7fe fae5 	bl	8002370 <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b02      	cmp	r3, #2
 8003dae:	d901      	bls.n	8003db4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003db0:	2303      	movs	r3, #3
 8003db2:	e1a1      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003db4:	4b2d      	ldr	r3, [pc, #180]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f003 0302 	and.w	r3, r3, #2
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d0f0      	beq.n	8003da2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003dc0:	4b2a      	ldr	r3, [pc, #168]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	695b      	ldr	r3, [r3, #20]
 8003dcc:	00db      	lsls	r3, r3, #3
 8003dce:	4927      	ldr	r1, [pc, #156]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	600b      	str	r3, [r1, #0]
 8003dd4:	e015      	b.n	8003e02 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003dd6:	4b26      	ldr	r3, [pc, #152]	@ (8003e70 <HAL_RCC_OscConfig+0x270>)
 8003dd8:	2200      	movs	r2, #0
 8003dda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ddc:	f7fe fac8 	bl	8002370 <HAL_GetTick>
 8003de0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003de2:	e008      	b.n	8003df6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003de4:	f7fe fac4 	bl	8002370 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	693b      	ldr	r3, [r7, #16]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	2b02      	cmp	r3, #2
 8003df0:	d901      	bls.n	8003df6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003df2:	2303      	movs	r3, #3
 8003df4:	e180      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003df6:	4b1d      	ldr	r3, [pc, #116]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f003 0302 	and.w	r3, r3, #2
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1f0      	bne.n	8003de4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f003 0308 	and.w	r3, r3, #8
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d03a      	beq.n	8003e84 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	699b      	ldr	r3, [r3, #24]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d019      	beq.n	8003e4a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003e16:	4b17      	ldr	r3, [pc, #92]	@ (8003e74 <HAL_RCC_OscConfig+0x274>)
 8003e18:	2201      	movs	r2, #1
 8003e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e1c:	f7fe faa8 	bl	8002370 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e24:	f7fe faa4 	bl	8002370 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e160      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003e36:	4b0d      	ldr	r3, [pc, #52]	@ (8003e6c <HAL_RCC_OscConfig+0x26c>)
 8003e38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3a:	f003 0302 	and.w	r3, r3, #2
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d0f0      	beq.n	8003e24 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003e42:	2001      	movs	r0, #1
 8003e44:	f000 fb00 	bl	8004448 <RCC_Delay>
 8003e48:	e01c      	b.n	8003e84 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003e4a:	4b0a      	ldr	r3, [pc, #40]	@ (8003e74 <HAL_RCC_OscConfig+0x274>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e50:	f7fe fa8e 	bl	8002370 <HAL_GetTick>
 8003e54:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e56:	e00f      	b.n	8003e78 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003e58:	f7fe fa8a 	bl	8002370 <HAL_GetTick>
 8003e5c:	4602      	mov	r2, r0
 8003e5e:	693b      	ldr	r3, [r7, #16]
 8003e60:	1ad3      	subs	r3, r2, r3
 8003e62:	2b02      	cmp	r3, #2
 8003e64:	d908      	bls.n	8003e78 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e146      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
 8003e6a:	bf00      	nop
 8003e6c:	40021000 	.word	0x40021000
 8003e70:	42420000 	.word	0x42420000
 8003e74:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003e78:	4b92      	ldr	r3, [pc, #584]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7c:	f003 0302 	and.w	r3, r3, #2
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1e9      	bne.n	8003e58 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0304 	and.w	r3, r3, #4
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	f000 80a6 	beq.w	8003fde <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e92:	2300      	movs	r3, #0
 8003e94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e96:	4b8b      	ldr	r3, [pc, #556]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003e98:	69db      	ldr	r3, [r3, #28]
 8003e9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d10d      	bne.n	8003ebe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003ea2:	4b88      	ldr	r3, [pc, #544]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003ea4:	69db      	ldr	r3, [r3, #28]
 8003ea6:	4a87      	ldr	r2, [pc, #540]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003ea8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003eac:	61d3      	str	r3, [r2, #28]
 8003eae:	4b85      	ldr	r3, [pc, #532]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003eb0:	69db      	ldr	r3, [r3, #28]
 8003eb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003eb6:	60bb      	str	r3, [r7, #8]
 8003eb8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ebe:	4b82      	ldr	r3, [pc, #520]	@ (80040c8 <HAL_RCC_OscConfig+0x4c8>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d118      	bne.n	8003efc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003eca:	4b7f      	ldr	r3, [pc, #508]	@ (80040c8 <HAL_RCC_OscConfig+0x4c8>)
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a7e      	ldr	r2, [pc, #504]	@ (80040c8 <HAL_RCC_OscConfig+0x4c8>)
 8003ed0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ed4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003ed6:	f7fe fa4b 	bl	8002370 <HAL_GetTick>
 8003eda:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003edc:	e008      	b.n	8003ef0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003ede:	f7fe fa47 	bl	8002370 <HAL_GetTick>
 8003ee2:	4602      	mov	r2, r0
 8003ee4:	693b      	ldr	r3, [r7, #16]
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b64      	cmp	r3, #100	@ 0x64
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e103      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ef0:	4b75      	ldr	r3, [pc, #468]	@ (80040c8 <HAL_RCC_OscConfig+0x4c8>)
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d0f0      	beq.n	8003ede <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d106      	bne.n	8003f12 <HAL_RCC_OscConfig+0x312>
 8003f04:	4b6f      	ldr	r3, [pc, #444]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f06:	6a1b      	ldr	r3, [r3, #32]
 8003f08:	4a6e      	ldr	r2, [pc, #440]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f0a:	f043 0301 	orr.w	r3, r3, #1
 8003f0e:	6213      	str	r3, [r2, #32]
 8003f10:	e02d      	b.n	8003f6e <HAL_RCC_OscConfig+0x36e>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	68db      	ldr	r3, [r3, #12]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d10c      	bne.n	8003f34 <HAL_RCC_OscConfig+0x334>
 8003f1a:	4b6a      	ldr	r3, [pc, #424]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	4a69      	ldr	r2, [pc, #420]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f20:	f023 0301 	bic.w	r3, r3, #1
 8003f24:	6213      	str	r3, [r2, #32]
 8003f26:	4b67      	ldr	r3, [pc, #412]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f28:	6a1b      	ldr	r3, [r3, #32]
 8003f2a:	4a66      	ldr	r2, [pc, #408]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f2c:	f023 0304 	bic.w	r3, r3, #4
 8003f30:	6213      	str	r3, [r2, #32]
 8003f32:	e01c      	b.n	8003f6e <HAL_RCC_OscConfig+0x36e>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	68db      	ldr	r3, [r3, #12]
 8003f38:	2b05      	cmp	r3, #5
 8003f3a:	d10c      	bne.n	8003f56 <HAL_RCC_OscConfig+0x356>
 8003f3c:	4b61      	ldr	r3, [pc, #388]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f3e:	6a1b      	ldr	r3, [r3, #32]
 8003f40:	4a60      	ldr	r2, [pc, #384]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f42:	f043 0304 	orr.w	r3, r3, #4
 8003f46:	6213      	str	r3, [r2, #32]
 8003f48:	4b5e      	ldr	r3, [pc, #376]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f4a:	6a1b      	ldr	r3, [r3, #32]
 8003f4c:	4a5d      	ldr	r2, [pc, #372]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f4e:	f043 0301 	orr.w	r3, r3, #1
 8003f52:	6213      	str	r3, [r2, #32]
 8003f54:	e00b      	b.n	8003f6e <HAL_RCC_OscConfig+0x36e>
 8003f56:	4b5b      	ldr	r3, [pc, #364]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f58:	6a1b      	ldr	r3, [r3, #32]
 8003f5a:	4a5a      	ldr	r2, [pc, #360]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f5c:	f023 0301 	bic.w	r3, r3, #1
 8003f60:	6213      	str	r3, [r2, #32]
 8003f62:	4b58      	ldr	r3, [pc, #352]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f64:	6a1b      	ldr	r3, [r3, #32]
 8003f66:	4a57      	ldr	r2, [pc, #348]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f68:	f023 0304 	bic.w	r3, r3, #4
 8003f6c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	68db      	ldr	r3, [r3, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d015      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f76:	f7fe f9fb 	bl	8002370 <HAL_GetTick>
 8003f7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f7c:	e00a      	b.n	8003f94 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f7e:	f7fe f9f7 	bl	8002370 <HAL_GetTick>
 8003f82:	4602      	mov	r2, r0
 8003f84:	693b      	ldr	r3, [r7, #16]
 8003f86:	1ad3      	subs	r3, r2, r3
 8003f88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d901      	bls.n	8003f94 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003f90:	2303      	movs	r3, #3
 8003f92:	e0b1      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003f94:	4b4b      	ldr	r3, [pc, #300]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	f003 0302 	and.w	r3, r3, #2
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d0ee      	beq.n	8003f7e <HAL_RCC_OscConfig+0x37e>
 8003fa0:	e014      	b.n	8003fcc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003fa2:	f7fe f9e5 	bl	8002370 <HAL_GetTick>
 8003fa6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fa8:	e00a      	b.n	8003fc0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003faa:	f7fe f9e1 	bl	8002370 <HAL_GetTick>
 8003fae:	4602      	mov	r2, r0
 8003fb0:	693b      	ldr	r3, [r7, #16]
 8003fb2:	1ad3      	subs	r3, r2, r3
 8003fb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003fb8:	4293      	cmp	r3, r2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e09b      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003fc0:	4b40      	ldr	r3, [pc, #256]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003fc2:	6a1b      	ldr	r3, [r3, #32]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d1ee      	bne.n	8003faa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003fcc:	7dfb      	ldrb	r3, [r7, #23]
 8003fce:	2b01      	cmp	r3, #1
 8003fd0:	d105      	bne.n	8003fde <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fd2:	4b3c      	ldr	r3, [pc, #240]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003fd4:	69db      	ldr	r3, [r3, #28]
 8003fd6:	4a3b      	ldr	r2, [pc, #236]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003fd8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003fdc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	f000 8087 	beq.w	80040f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003fe8:	4b36      	ldr	r3, [pc, #216]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f003 030c 	and.w	r3, r3, #12
 8003ff0:	2b08      	cmp	r3, #8
 8003ff2:	d061      	beq.n	80040b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	69db      	ldr	r3, [r3, #28]
 8003ff8:	2b02      	cmp	r3, #2
 8003ffa:	d146      	bne.n	800408a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ffc:	4b33      	ldr	r3, [pc, #204]	@ (80040cc <HAL_RCC_OscConfig+0x4cc>)
 8003ffe:	2200      	movs	r2, #0
 8004000:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004002:	f7fe f9b5 	bl	8002370 <HAL_GetTick>
 8004006:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004008:	e008      	b.n	800401c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800400a:	f7fe f9b1 	bl	8002370 <HAL_GetTick>
 800400e:	4602      	mov	r2, r0
 8004010:	693b      	ldr	r3, [r7, #16]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	2b02      	cmp	r3, #2
 8004016:	d901      	bls.n	800401c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e06d      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800401c:	4b29      	ldr	r3, [pc, #164]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d1f0      	bne.n	800400a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6a1b      	ldr	r3, [r3, #32]
 800402c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004030:	d108      	bne.n	8004044 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004032:	4b24      	ldr	r3, [pc, #144]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	689b      	ldr	r3, [r3, #8]
 800403e:	4921      	ldr	r1, [pc, #132]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8004040:	4313      	orrs	r3, r2
 8004042:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004044:	4b1f      	ldr	r3, [pc, #124]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8004046:	685b      	ldr	r3, [r3, #4]
 8004048:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	6a19      	ldr	r1, [r3, #32]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004054:	430b      	orrs	r3, r1
 8004056:	491b      	ldr	r1, [pc, #108]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 8004058:	4313      	orrs	r3, r2
 800405a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800405c:	4b1b      	ldr	r3, [pc, #108]	@ (80040cc <HAL_RCC_OscConfig+0x4cc>)
 800405e:	2201      	movs	r2, #1
 8004060:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004062:	f7fe f985 	bl	8002370 <HAL_GetTick>
 8004066:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004068:	e008      	b.n	800407c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800406a:	f7fe f981 	bl	8002370 <HAL_GetTick>
 800406e:	4602      	mov	r2, r0
 8004070:	693b      	ldr	r3, [r7, #16]
 8004072:	1ad3      	subs	r3, r2, r3
 8004074:	2b02      	cmp	r3, #2
 8004076:	d901      	bls.n	800407c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004078:	2303      	movs	r3, #3
 800407a:	e03d      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800407c:	4b11      	ldr	r3, [pc, #68]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0f0      	beq.n	800406a <HAL_RCC_OscConfig+0x46a>
 8004088:	e035      	b.n	80040f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800408a:	4b10      	ldr	r3, [pc, #64]	@ (80040cc <HAL_RCC_OscConfig+0x4cc>)
 800408c:	2200      	movs	r2, #0
 800408e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004090:	f7fe f96e 	bl	8002370 <HAL_GetTick>
 8004094:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004096:	e008      	b.n	80040aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004098:	f7fe f96a 	bl	8002370 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	693b      	ldr	r3, [r7, #16]
 80040a0:	1ad3      	subs	r3, r2, r3
 80040a2:	2b02      	cmp	r3, #2
 80040a4:	d901      	bls.n	80040aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80040a6:	2303      	movs	r3, #3
 80040a8:	e026      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040aa:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <HAL_RCC_OscConfig+0x4c4>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1f0      	bne.n	8004098 <HAL_RCC_OscConfig+0x498>
 80040b6:	e01e      	b.n	80040f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	69db      	ldr	r3, [r3, #28]
 80040bc:	2b01      	cmp	r3, #1
 80040be:	d107      	bne.n	80040d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80040c0:	2301      	movs	r3, #1
 80040c2:	e019      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
 80040c4:	40021000 	.word	0x40021000
 80040c8:	40007000 	.word	0x40007000
 80040cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80040d0:	4b0b      	ldr	r3, [pc, #44]	@ (8004100 <HAL_RCC_OscConfig+0x500>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6a1b      	ldr	r3, [r3, #32]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d106      	bne.n	80040f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80040ee:	429a      	cmp	r2, r3
 80040f0:	d001      	beq.n	80040f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e000      	b.n	80040f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80040f6:	2300      	movs	r3, #0
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3718      	adds	r7, #24
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	40021000 	.word	0x40021000

08004104 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004104:	b580      	push	{r7, lr}
 8004106:	b084      	sub	sp, #16
 8004108:	af00      	add	r7, sp, #0
 800410a:	6078      	str	r0, [r7, #4]
 800410c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d101      	bne.n	8004118 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004114:	2301      	movs	r3, #1
 8004116:	e0d0      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004118:	4b6a      	ldr	r3, [pc, #424]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f003 0307 	and.w	r3, r3, #7
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	429a      	cmp	r2, r3
 8004124:	d910      	bls.n	8004148 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004126:	4b67      	ldr	r3, [pc, #412]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f023 0207 	bic.w	r2, r3, #7
 800412e:	4965      	ldr	r1, [pc, #404]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	4313      	orrs	r3, r2
 8004134:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004136:	4b63      	ldr	r3, [pc, #396]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f003 0307 	and.w	r3, r3, #7
 800413e:	683a      	ldr	r2, [r7, #0]
 8004140:	429a      	cmp	r2, r3
 8004142:	d001      	beq.n	8004148 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004144:	2301      	movs	r3, #1
 8004146:	e0b8      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d020      	beq.n	8004196 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0304 	and.w	r3, r3, #4
 800415c:	2b00      	cmp	r3, #0
 800415e:	d005      	beq.n	800416c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004160:	4b59      	ldr	r3, [pc, #356]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004162:	685b      	ldr	r3, [r3, #4]
 8004164:	4a58      	ldr	r2, [pc, #352]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004166:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800416a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0308 	and.w	r3, r3, #8
 8004174:	2b00      	cmp	r3, #0
 8004176:	d005      	beq.n	8004184 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004178:	4b53      	ldr	r3, [pc, #332]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	4a52      	ldr	r2, [pc, #328]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 800417e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8004182:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004184:	4b50      	ldr	r3, [pc, #320]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	689b      	ldr	r3, [r3, #8]
 8004190:	494d      	ldr	r1, [pc, #308]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004192:	4313      	orrs	r3, r2
 8004194:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f003 0301 	and.w	r3, r3, #1
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d040      	beq.n	8004224 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	685b      	ldr	r3, [r3, #4]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d107      	bne.n	80041ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80041aa:	4b47      	ldr	r3, [pc, #284]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d115      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	e07f      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	685b      	ldr	r3, [r3, #4]
 80041be:	2b02      	cmp	r3, #2
 80041c0:	d107      	bne.n	80041d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80041c2:	4b41      	ldr	r3, [pc, #260]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d109      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e073      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041d2:	4b3d      	ldr	r3, [pc, #244]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f003 0302 	and.w	r3, r3, #2
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d101      	bne.n	80041e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80041de:	2301      	movs	r3, #1
 80041e0:	e06b      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80041e2:	4b39      	ldr	r3, [pc, #228]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041e4:	685b      	ldr	r3, [r3, #4]
 80041e6:	f023 0203 	bic.w	r2, r3, #3
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	685b      	ldr	r3, [r3, #4]
 80041ee:	4936      	ldr	r1, [pc, #216]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 80041f0:	4313      	orrs	r3, r2
 80041f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80041f4:	f7fe f8bc 	bl	8002370 <HAL_GetTick>
 80041f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80041fa:	e00a      	b.n	8004212 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80041fc:	f7fe f8b8 	bl	8002370 <HAL_GetTick>
 8004200:	4602      	mov	r2, r0
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	1ad3      	subs	r3, r2, r3
 8004206:	f241 3288 	movw	r2, #5000	@ 0x1388
 800420a:	4293      	cmp	r3, r2
 800420c:	d901      	bls.n	8004212 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800420e:	2303      	movs	r3, #3
 8004210:	e053      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004212:	4b2d      	ldr	r3, [pc, #180]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004214:	685b      	ldr	r3, [r3, #4]
 8004216:	f003 020c 	and.w	r2, r3, #12
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	009b      	lsls	r3, r3, #2
 8004220:	429a      	cmp	r2, r3
 8004222:	d1eb      	bne.n	80041fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004224:	4b27      	ldr	r3, [pc, #156]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0307 	and.w	r3, r3, #7
 800422c:	683a      	ldr	r2, [r7, #0]
 800422e:	429a      	cmp	r2, r3
 8004230:	d210      	bcs.n	8004254 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004232:	4b24      	ldr	r3, [pc, #144]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f023 0207 	bic.w	r2, r3, #7
 800423a:	4922      	ldr	r1, [pc, #136]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	4313      	orrs	r3, r2
 8004240:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004242:	4b20      	ldr	r3, [pc, #128]	@ (80042c4 <HAL_RCC_ClockConfig+0x1c0>)
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	f003 0307 	and.w	r3, r3, #7
 800424a:	683a      	ldr	r2, [r7, #0]
 800424c:	429a      	cmp	r2, r3
 800424e:	d001      	beq.n	8004254 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004250:	2301      	movs	r3, #1
 8004252:	e032      	b.n	80042ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d008      	beq.n	8004272 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004260:	4b19      	ldr	r3, [pc, #100]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	4916      	ldr	r1, [pc, #88]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 800426e:	4313      	orrs	r3, r2
 8004270:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 0308 	and.w	r3, r3, #8
 800427a:	2b00      	cmp	r3, #0
 800427c:	d009      	beq.n	8004292 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800427e:	4b12      	ldr	r3, [pc, #72]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 8004280:	685b      	ldr	r3, [r3, #4]
 8004282:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	691b      	ldr	r3, [r3, #16]
 800428a:	00db      	lsls	r3, r3, #3
 800428c:	490e      	ldr	r1, [pc, #56]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 800428e:	4313      	orrs	r3, r2
 8004290:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004292:	f000 f821 	bl	80042d8 <HAL_RCC_GetSysClockFreq>
 8004296:	4602      	mov	r2, r0
 8004298:	4b0b      	ldr	r3, [pc, #44]	@ (80042c8 <HAL_RCC_ClockConfig+0x1c4>)
 800429a:	685b      	ldr	r3, [r3, #4]
 800429c:	091b      	lsrs	r3, r3, #4
 800429e:	f003 030f 	and.w	r3, r3, #15
 80042a2:	490a      	ldr	r1, [pc, #40]	@ (80042cc <HAL_RCC_ClockConfig+0x1c8>)
 80042a4:	5ccb      	ldrb	r3, [r1, r3]
 80042a6:	fa22 f303 	lsr.w	r3, r2, r3
 80042aa:	4a09      	ldr	r2, [pc, #36]	@ (80042d0 <HAL_RCC_ClockConfig+0x1cc>)
 80042ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80042ae:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <HAL_RCC_ClockConfig+0x1d0>)
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	4618      	mov	r0, r3
 80042b4:	f7fd fe88 	bl	8001fc8 <HAL_InitTick>

  return HAL_OK;
 80042b8:	2300      	movs	r3, #0
}
 80042ba:	4618      	mov	r0, r3
 80042bc:	3710      	adds	r7, #16
 80042be:	46bd      	mov	sp, r7
 80042c0:	bd80      	pop	{r7, pc}
 80042c2:	bf00      	nop
 80042c4:	40022000 	.word	0x40022000
 80042c8:	40021000 	.word	0x40021000
 80042cc:	080084c8 	.word	0x080084c8
 80042d0:	20000030 	.word	0x20000030
 80042d4:	20000034 	.word	0x20000034

080042d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80042d8:	b480      	push	{r7}
 80042da:	b087      	sub	sp, #28
 80042dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80042de:	2300      	movs	r3, #0
 80042e0:	60fb      	str	r3, [r7, #12]
 80042e2:	2300      	movs	r3, #0
 80042e4:	60bb      	str	r3, [r7, #8]
 80042e6:	2300      	movs	r3, #0
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	2300      	movs	r3, #0
 80042ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80042ee:	2300      	movs	r3, #0
 80042f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80042f2:	4b1e      	ldr	r3, [pc, #120]	@ (800436c <HAL_RCC_GetSysClockFreq+0x94>)
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f003 030c 	and.w	r3, r3, #12
 80042fe:	2b04      	cmp	r3, #4
 8004300:	d002      	beq.n	8004308 <HAL_RCC_GetSysClockFreq+0x30>
 8004302:	2b08      	cmp	r3, #8
 8004304:	d003      	beq.n	800430e <HAL_RCC_GetSysClockFreq+0x36>
 8004306:	e027      	b.n	8004358 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004308:	4b19      	ldr	r3, [pc, #100]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x98>)
 800430a:	613b      	str	r3, [r7, #16]
      break;
 800430c:	e027      	b.n	800435e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	0c9b      	lsrs	r3, r3, #18
 8004312:	f003 030f 	and.w	r3, r3, #15
 8004316:	4a17      	ldr	r2, [pc, #92]	@ (8004374 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004318:	5cd3      	ldrb	r3, [r2, r3]
 800431a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d010      	beq.n	8004348 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004326:	4b11      	ldr	r3, [pc, #68]	@ (800436c <HAL_RCC_GetSysClockFreq+0x94>)
 8004328:	685b      	ldr	r3, [r3, #4]
 800432a:	0c5b      	lsrs	r3, r3, #17
 800432c:	f003 0301 	and.w	r3, r3, #1
 8004330:	4a11      	ldr	r2, [pc, #68]	@ (8004378 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004332:	5cd3      	ldrb	r3, [r2, r3]
 8004334:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a0d      	ldr	r2, [pc, #52]	@ (8004370 <HAL_RCC_GetSysClockFreq+0x98>)
 800433a:	fb03 f202 	mul.w	r2, r3, r2
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	fbb2 f3f3 	udiv	r3, r2, r3
 8004344:	617b      	str	r3, [r7, #20]
 8004346:	e004      	b.n	8004352 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a0c      	ldr	r2, [pc, #48]	@ (800437c <HAL_RCC_GetSysClockFreq+0xa4>)
 800434c:	fb02 f303 	mul.w	r3, r2, r3
 8004350:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	613b      	str	r3, [r7, #16]
      break;
 8004356:	e002      	b.n	800435e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004358:	4b09      	ldr	r3, [pc, #36]	@ (8004380 <HAL_RCC_GetSysClockFreq+0xa8>)
 800435a:	613b      	str	r3, [r7, #16]
      break;
 800435c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800435e:	693b      	ldr	r3, [r7, #16]
}
 8004360:	4618      	mov	r0, r3
 8004362:	371c      	adds	r7, #28
 8004364:	46bd      	mov	sp, r7
 8004366:	bc80      	pop	{r7}
 8004368:	4770      	bx	lr
 800436a:	bf00      	nop
 800436c:	40021000 	.word	0x40021000
 8004370:	00f42400 	.word	0x00f42400
 8004374:	080084e0 	.word	0x080084e0
 8004378:	080084f0 	.word	0x080084f0
 800437c:	003d0900 	.word	0x003d0900
 8004380:	007a1200 	.word	0x007a1200

08004384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004384:	b480      	push	{r7}
 8004386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004388:	4b02      	ldr	r3, [pc, #8]	@ (8004394 <HAL_RCC_GetHCLKFreq+0x10>)
 800438a:	681b      	ldr	r3, [r3, #0]
}
 800438c:	4618      	mov	r0, r3
 800438e:	46bd      	mov	sp, r7
 8004390:	bc80      	pop	{r7}
 8004392:	4770      	bx	lr
 8004394:	20000030 	.word	0x20000030

08004398 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004398:	b580      	push	{r7, lr}
 800439a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800439c:	f7ff fff2 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043a0:	4602      	mov	r2, r0
 80043a2:	4b05      	ldr	r3, [pc, #20]	@ (80043b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043a4:	685b      	ldr	r3, [r3, #4]
 80043a6:	0a1b      	lsrs	r3, r3, #8
 80043a8:	f003 0307 	and.w	r3, r3, #7
 80043ac:	4903      	ldr	r1, [pc, #12]	@ (80043bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ae:	5ccb      	ldrb	r3, [r1, r3]
 80043b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	bd80      	pop	{r7, pc}
 80043b8:	40021000 	.word	0x40021000
 80043bc:	080084d8 	.word	0x080084d8

080043c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80043c4:	f7ff ffde 	bl	8004384 <HAL_RCC_GetHCLKFreq>
 80043c8:	4602      	mov	r2, r0
 80043ca:	4b05      	ldr	r3, [pc, #20]	@ (80043e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	0adb      	lsrs	r3, r3, #11
 80043d0:	f003 0307 	and.w	r3, r3, #7
 80043d4:	4903      	ldr	r1, [pc, #12]	@ (80043e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80043d6:	5ccb      	ldrb	r3, [r1, r3]
 80043d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043dc:	4618      	mov	r0, r3
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40021000 	.word	0x40021000
 80043e4:	080084d8 	.word	0x080084d8

080043e8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b083      	sub	sp, #12
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	6078      	str	r0, [r7, #4]
 80043f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	220f      	movs	r2, #15
 80043f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80043f8:	4b11      	ldr	r3, [pc, #68]	@ (8004440 <HAL_RCC_GetClockConfig+0x58>)
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f003 0203 	and.w	r2, r3, #3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004404:	4b0e      	ldr	r3, [pc, #56]	@ (8004440 <HAL_RCC_GetClockConfig+0x58>)
 8004406:	685b      	ldr	r3, [r3, #4]
 8004408:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8004410:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <HAL_RCC_GetClockConfig+0x58>)
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800441c:	4b08      	ldr	r3, [pc, #32]	@ (8004440 <HAL_RCC_GetClockConfig+0x58>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	08db      	lsrs	r3, r3, #3
 8004422:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800442a:	4b06      	ldr	r3, [pc, #24]	@ (8004444 <HAL_RCC_GetClockConfig+0x5c>)
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0207 	and.w	r2, r3, #7
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8004436:	bf00      	nop
 8004438:	370c      	adds	r7, #12
 800443a:	46bd      	mov	sp, r7
 800443c:	bc80      	pop	{r7}
 800443e:	4770      	bx	lr
 8004440:	40021000 	.word	0x40021000
 8004444:	40022000 	.word	0x40022000

08004448 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004450:	4b0a      	ldr	r3, [pc, #40]	@ (800447c <RCC_Delay+0x34>)
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	4a0a      	ldr	r2, [pc, #40]	@ (8004480 <RCC_Delay+0x38>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	0a5b      	lsrs	r3, r3, #9
 800445c:	687a      	ldr	r2, [r7, #4]
 800445e:	fb02 f303 	mul.w	r3, r2, r3
 8004462:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004464:	bf00      	nop
  }
  while (Delay --);
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	1e5a      	subs	r2, r3, #1
 800446a:	60fa      	str	r2, [r7, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d1f9      	bne.n	8004464 <RCC_Delay+0x1c>
}
 8004470:	bf00      	nop
 8004472:	bf00      	nop
 8004474:	3714      	adds	r7, #20
 8004476:	46bd      	mov	sp, r7
 8004478:	bc80      	pop	{r7}
 800447a:	4770      	bx	lr
 800447c:	20000030 	.word	0x20000030
 8004480:	10624dd3 	.word	0x10624dd3

08004484 <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004484:	b580      	push	{r7, lr}
 8004486:	b086      	sub	sp, #24
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	613b      	str	r3, [r7, #16]
 8004490:	2300      	movs	r3, #0
 8004492:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f003 0301 	and.w	r3, r3, #1
 800449c:	2b00      	cmp	r3, #0
 800449e:	d07d      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80044a0:	2300      	movs	r3, #0
 80044a2:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044a4:	4b4f      	ldr	r3, [pc, #316]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044a6:	69db      	ldr	r3, [r3, #28]
 80044a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10d      	bne.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044b0:	4b4c      	ldr	r3, [pc, #304]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b2:	69db      	ldr	r3, [r3, #28]
 80044b4:	4a4b      	ldr	r2, [pc, #300]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044ba:	61d3      	str	r3, [r2, #28]
 80044bc:	4b49      	ldr	r3, [pc, #292]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c4:	60bb      	str	r3, [r7, #8]
 80044c6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044c8:	2301      	movs	r3, #1
 80044ca:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044cc:	4b46      	ldr	r3, [pc, #280]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d118      	bne.n	800450a <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044d8:	4b43      	ldr	r3, [pc, #268]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	4a42      	ldr	r2, [pc, #264]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044de:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044e2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044e4:	f7fd ff44 	bl	8002370 <HAL_GetTick>
 80044e8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044ea:	e008      	b.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80044ec:	f7fd ff40 	bl	8002370 <HAL_GetTick>
 80044f0:	4602      	mov	r2, r0
 80044f2:	693b      	ldr	r3, [r7, #16]
 80044f4:	1ad3      	subs	r3, r2, r3
 80044f6:	2b64      	cmp	r3, #100	@ 0x64
 80044f8:	d901      	bls.n	80044fe <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 80044fa:	2303      	movs	r3, #3
 80044fc:	e06d      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044fe:	4b3a      	ldr	r3, [pc, #232]	@ (80045e8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004506:	2b00      	cmp	r3, #0
 8004508:	d0f0      	beq.n	80044ec <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800450a:	4b36      	ldr	r3, [pc, #216]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004512:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d02e      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
 800451e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004522:	68fa      	ldr	r2, [r7, #12]
 8004524:	429a      	cmp	r2, r3
 8004526:	d027      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004528:	4b2e      	ldr	r3, [pc, #184]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800452a:	6a1b      	ldr	r3, [r3, #32]
 800452c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004530:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004532:	4b2e      	ldr	r3, [pc, #184]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004534:	2201      	movs	r2, #1
 8004536:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004538:	4b2c      	ldr	r3, [pc, #176]	@ (80045ec <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800453a:	2200      	movs	r2, #0
 800453c:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800453e:	4a29      	ldr	r2, [pc, #164]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	f003 0301 	and.w	r3, r3, #1
 800454a:	2b00      	cmp	r3, #0
 800454c:	d014      	beq.n	8004578 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800454e:	f7fd ff0f 	bl	8002370 <HAL_GetTick>
 8004552:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004554:	e00a      	b.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004556:	f7fd ff0b 	bl	8002370 <HAL_GetTick>
 800455a:	4602      	mov	r2, r0
 800455c:	693b      	ldr	r3, [r7, #16]
 800455e:	1ad3      	subs	r3, r2, r3
 8004560:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004564:	4293      	cmp	r3, r2
 8004566:	d901      	bls.n	800456c <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004568:	2303      	movs	r3, #3
 800456a:	e036      	b.n	80045da <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800456c:	4b1d      	ldr	r3, [pc, #116]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800456e:	6a1b      	ldr	r3, [r3, #32]
 8004570:	f003 0302 	and.w	r3, r3, #2
 8004574:	2b00      	cmp	r3, #0
 8004576:	d0ee      	beq.n	8004556 <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004578:	4b1a      	ldr	r3, [pc, #104]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800457a:	6a1b      	ldr	r3, [r3, #32]
 800457c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	4917      	ldr	r1, [pc, #92]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004586:	4313      	orrs	r3, r2
 8004588:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800458a:	7dfb      	ldrb	r3, [r7, #23]
 800458c:	2b01      	cmp	r3, #1
 800458e:	d105      	bne.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004590:	4b14      	ldr	r3, [pc, #80]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004592:	69db      	ldr	r3, [r3, #28]
 8004594:	4a13      	ldr	r2, [pc, #76]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004596:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800459a:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f003 0302 	and.w	r3, r3, #2
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	d008      	beq.n	80045ba <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80045a8:	4b0e      	ldr	r3, [pc, #56]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	490b      	ldr	r1, [pc, #44]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045b6:	4313      	orrs	r3, r2
 80045b8:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f003 0310 	and.w	r3, r3, #16
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d008      	beq.n	80045d8 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80045c6:	4b07      	ldr	r3, [pc, #28]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	68db      	ldr	r3, [r3, #12]
 80045d2:	4904      	ldr	r1, [pc, #16]	@ (80045e4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045d4:	4313      	orrs	r3, r2
 80045d6:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80045d8:	2300      	movs	r3, #0
}
 80045da:	4618      	mov	r0, r3
 80045dc:	3718      	adds	r7, #24
 80045de:	46bd      	mov	sp, r7
 80045e0:	bd80      	pop	{r7, pc}
 80045e2:	bf00      	nop
 80045e4:	40021000 	.word	0x40021000
 80045e8:	40007000 	.word	0x40007000
 80045ec:	42420440 	.word	0x42420440

080045f0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b088      	sub	sp, #32
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	617b      	str	r3, [r7, #20]
 80045fc:	2300      	movs	r3, #0
 80045fe:	61fb      	str	r3, [r7, #28]
 8004600:	2300      	movs	r3, #0
 8004602:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	60fb      	str	r3, [r7, #12]
 8004608:	2300      	movs	r3, #0
 800460a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2b10      	cmp	r3, #16
 8004610:	d00a      	beq.n	8004628 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b10      	cmp	r3, #16
 8004616:	f200 8089 	bhi.w	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	2b01      	cmp	r3, #1
 800461e:	d045      	beq.n	80046ac <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2b02      	cmp	r3, #2
 8004624:	d074      	beq.n	8004710 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8004626:	e081      	b.n	800472c <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
      temp_reg = RCC->CFGR;
 8004628:	4b45      	ldr	r3, [pc, #276]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800462a:	685b      	ldr	r3, [r3, #4]
 800462c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800462e:	4b44      	ldr	r3, [pc, #272]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d07a      	beq.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	0c9b      	lsrs	r3, r3, #18
 800463e:	f003 030f 	and.w	r3, r3, #15
 8004642:	4a40      	ldr	r2, [pc, #256]	@ (8004744 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8004644:	5cd3      	ldrb	r3, [r2, r3]
 8004646:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800464e:	2b00      	cmp	r3, #0
 8004650:	d015      	beq.n	800467e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004652:	4b3b      	ldr	r3, [pc, #236]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	0c5b      	lsrs	r3, r3, #17
 8004658:	f003 0301 	and.w	r3, r3, #1
 800465c:	4a3a      	ldr	r2, [pc, #232]	@ (8004748 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 800465e:	5cd3      	ldrb	r3, [r2, r3]
 8004660:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004668:	2b00      	cmp	r3, #0
 800466a:	d00d      	beq.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 800466c:	4a37      	ldr	r2, [pc, #220]	@ (800474c <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800466e:	697b      	ldr	r3, [r7, #20]
 8004670:	fbb2 f2f3 	udiv	r2, r2, r3
 8004674:	693b      	ldr	r3, [r7, #16]
 8004676:	fb02 f303 	mul.w	r3, r2, r3
 800467a:	61fb      	str	r3, [r7, #28]
 800467c:	e004      	b.n	8004688 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4a33      	ldr	r2, [pc, #204]	@ (8004750 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8004688:	4b2d      	ldr	r3, [pc, #180]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004690:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004694:	d102      	bne.n	800469c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8004696:	69fb      	ldr	r3, [r7, #28]
 8004698:	61bb      	str	r3, [r7, #24]
      break;
 800469a:	e049      	b.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
          frequency = (pllclk * 2) / 3;
 800469c:	69fb      	ldr	r3, [r7, #28]
 800469e:	005b      	lsls	r3, r3, #1
 80046a0:	4a2c      	ldr	r2, [pc, #176]	@ (8004754 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 80046a2:	fba2 2303 	umull	r2, r3, r2, r3
 80046a6:	085b      	lsrs	r3, r3, #1
 80046a8:	61bb      	str	r3, [r7, #24]
      break;
 80046aa:	e041      	b.n	8004730 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      temp_reg = RCC->BDCR;
 80046ac:	4b24      	ldr	r3, [pc, #144]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80046ae:	6a1b      	ldr	r3, [r3, #32]
 80046b0:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80046bc:	d108      	bne.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	f003 0302 	and.w	r3, r3, #2
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d003      	beq.n	80046d0 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80046c8:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80046cc:	61bb      	str	r3, [r7, #24]
 80046ce:	e01e      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80046d0:	68fb      	ldr	r3, [r7, #12]
 80046d2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046da:	d109      	bne.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80046dc:	4b18      	ldr	r3, [pc, #96]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80046de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046e0:	f003 0302 	and.w	r3, r3, #2
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d003      	beq.n	80046f0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80046e8:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e00e      	b.n	800470e <HAL_RCCEx_GetPeriphCLKFreq+0x11e>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046f6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80046fa:	d11b      	bne.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 80046fc:	4b10      	ldr	r3, [pc, #64]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004704:	2b00      	cmp	r3, #0
 8004706:	d015      	beq.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
        frequency = HSE_VALUE / 128U;
 8004708:	4b13      	ldr	r3, [pc, #76]	@ (8004758 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800470a:	61bb      	str	r3, [r7, #24]
      break;
 800470c:	e012      	b.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
 800470e:	e011      	b.n	8004734 <HAL_RCCEx_GetPeriphCLKFreq+0x144>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8004710:	f7ff fe56 	bl	80043c0 <HAL_RCC_GetPCLK2Freq>
 8004714:	4602      	mov	r2, r0
 8004716:	4b0a      	ldr	r3, [pc, #40]	@ (8004740 <HAL_RCCEx_GetPeriphCLKFreq+0x150>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	0b9b      	lsrs	r3, r3, #14
 800471c:	f003 0303 	and.w	r3, r3, #3
 8004720:	3301      	adds	r3, #1
 8004722:	005b      	lsls	r3, r3, #1
 8004724:	fbb2 f3f3 	udiv	r3, r2, r3
 8004728:	61bb      	str	r3, [r7, #24]
      break;
 800472a:	e004      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 800472c:	bf00      	nop
 800472e:	e002      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004730:	bf00      	nop
 8004732:	e000      	b.n	8004736 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      break;
 8004734:	bf00      	nop
    }
  }
  return (frequency);
 8004736:	69bb      	ldr	r3, [r7, #24]
}
 8004738:	4618      	mov	r0, r3
 800473a:	3720      	adds	r7, #32
 800473c:	46bd      	mov	sp, r7
 800473e:	bd80      	pop	{r7, pc}
 8004740:	40021000 	.word	0x40021000
 8004744:	080084f4 	.word	0x080084f4
 8004748:	08008504 	.word	0x08008504
 800474c:	00f42400 	.word	0x00f42400
 8004750:	003d0900 	.word	0x003d0900
 8004754:	aaaaaaab 	.word	0xaaaaaaab
 8004758:	0001e848 	.word	0x0001e848

0800475c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b082      	sub	sp, #8
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d101      	bne.n	800476e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800476a:	2301      	movs	r3, #1
 800476c:	e041      	b.n	80047f2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004774:	b2db      	uxtb	r3, r3
 8004776:	2b00      	cmp	r3, #0
 8004778:	d106      	bne.n	8004788 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	2200      	movs	r2, #0
 800477e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004782:	6878      	ldr	r0, [r7, #4]
 8004784:	f7fd fbfa 	bl	8001f7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2202      	movs	r2, #2
 800478c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	3304      	adds	r3, #4
 8004798:	4619      	mov	r1, r3
 800479a:	4610      	mov	r0, r2
 800479c:	f000 fa5c 	bl	8004c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2201      	movs	r2, #1
 80047ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
	...

080047fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80047fc:	b480      	push	{r7}
 80047fe:	b085      	sub	sp, #20
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	d001      	beq.n	8004814 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e03a      	b.n	800488a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	2202      	movs	r2, #2
 8004818:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	68da      	ldr	r2, [r3, #12]
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f042 0201 	orr.w	r2, r2, #1
 800482a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	4a18      	ldr	r2, [pc, #96]	@ (8004894 <HAL_TIM_Base_Start_IT+0x98>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d00e      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x58>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800483e:	d009      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x58>
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	4a14      	ldr	r2, [pc, #80]	@ (8004898 <HAL_TIM_Base_Start_IT+0x9c>)
 8004846:	4293      	cmp	r3, r2
 8004848:	d004      	beq.n	8004854 <HAL_TIM_Base_Start_IT+0x58>
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	4a13      	ldr	r2, [pc, #76]	@ (800489c <HAL_TIM_Base_Start_IT+0xa0>)
 8004850:	4293      	cmp	r3, r2
 8004852:	d111      	bne.n	8004878 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f003 0307 	and.w	r3, r3, #7
 800485e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	2b06      	cmp	r3, #6
 8004864:	d010      	beq.n	8004888 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f042 0201 	orr.w	r2, r2, #1
 8004874:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004876:	e007      	b.n	8004888 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f042 0201 	orr.w	r2, r2, #1
 8004886:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004888:	2300      	movs	r3, #0
}
 800488a:	4618      	mov	r0, r3
 800488c:	3714      	adds	r7, #20
 800488e:	46bd      	mov	sp, r7
 8004890:	bc80      	pop	{r7}
 8004892:	4770      	bx	lr
 8004894:	40012c00 	.word	0x40012c00
 8004898:	40000400 	.word	0x40000400
 800489c:	40000800 	.word	0x40000800

080048a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b084      	sub	sp, #16
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68db      	ldr	r3, [r3, #12]
 80048ae:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	691b      	ldr	r3, [r3, #16]
 80048b6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	f003 0302 	and.w	r3, r3, #2
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d020      	beq.n	8004904 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	f003 0302 	and.w	r3, r3, #2
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d01b      	beq.n	8004904 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f06f 0202 	mvn.w	r2, #2
 80048d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2201      	movs	r2, #1
 80048da:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d003      	beq.n	80048f2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80048ea:	6878      	ldr	r0, [r7, #4]
 80048ec:	f000 f998 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 80048f0:	e005      	b.n	80048fe <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80048f2:	6878      	ldr	r0, [r7, #4]
 80048f4:	f000 f98b 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f000 f99a 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	2200      	movs	r2, #0
 8004902:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004904:	68bb      	ldr	r3, [r7, #8]
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d020      	beq.n	8004950 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	f003 0304 	and.w	r3, r3, #4
 8004914:	2b00      	cmp	r3, #0
 8004916:	d01b      	beq.n	8004950 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f06f 0204 	mvn.w	r2, #4
 8004920:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	2202      	movs	r2, #2
 8004926:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699b      	ldr	r3, [r3, #24]
 800492e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004932:	2b00      	cmp	r3, #0
 8004934:	d003      	beq.n	800493e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f000 f972 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 800493c:	e005      	b.n	800494a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f965 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f974 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 0308 	and.w	r3, r3, #8
 8004956:	2b00      	cmp	r3, #0
 8004958:	d020      	beq.n	800499c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f003 0308 	and.w	r3, r3, #8
 8004960:	2b00      	cmp	r3, #0
 8004962:	d01b      	beq.n	800499c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f06f 0208 	mvn.w	r2, #8
 800496c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2204      	movs	r2, #4
 8004972:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	69db      	ldr	r3, [r3, #28]
 800497a:	f003 0303 	and.w	r3, r3, #3
 800497e:	2b00      	cmp	r3, #0
 8004980:	d003      	beq.n	800498a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004982:	6878      	ldr	r0, [r7, #4]
 8004984:	f000 f94c 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 8004988:	e005      	b.n	8004996 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f93f 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004990:	6878      	ldr	r0, [r7, #4]
 8004992:	f000 f94e 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 0310 	and.w	r3, r3, #16
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d020      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	f003 0310 	and.w	r3, r3, #16
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d01b      	beq.n	80049e8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f06f 0210 	mvn.w	r2, #16
 80049b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	2208      	movs	r2, #8
 80049be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	69db      	ldr	r3, [r3, #28]
 80049c6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d003      	beq.n	80049d6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 f926 	bl	8004c20 <HAL_TIM_IC_CaptureCallback>
 80049d4:	e005      	b.n	80049e2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049d6:	6878      	ldr	r0, [r7, #4]
 80049d8:	f000 f919 	bl	8004c0e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049dc:	6878      	ldr	r0, [r7, #4]
 80049de:	f000 f928 	bl	8004c32 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2200      	movs	r2, #0
 80049e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80049e8:	68bb      	ldr	r3, [r7, #8]
 80049ea:	f003 0301 	and.w	r3, r3, #1
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d00c      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	f003 0301 	and.w	r3, r3, #1
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d007      	beq.n	8004a0c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f06f 0201 	mvn.w	r2, #1
 8004a04:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a06:	6878      	ldr	r0, [r7, #4]
 8004a08:	f7fd f9c4 	bl	8001d94 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d00c      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d007      	beq.n	8004a30 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004a28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004a2a:	6878      	ldr	r0, [r7, #4]
 8004a2c:	f000 fa7f 	bl	8004f2e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004a30:	68bb      	ldr	r3, [r7, #8]
 8004a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d00c      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d007      	beq.n	8004a54 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004a4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004a4e:	6878      	ldr	r0, [r7, #4]
 8004a50:	f000 f8f8 	bl	8004c44 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	f003 0320 	and.w	r3, r3, #32
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d00c      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	f003 0320 	and.w	r3, r3, #32
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d007      	beq.n	8004a78 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f06f 0220 	mvn.w	r2, #32
 8004a70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 fa52 	bl	8004f1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004a80:	b580      	push	{r7, lr}
 8004a82:	b084      	sub	sp, #16
 8004a84:	af00      	add	r7, sp, #0
 8004a86:	6078      	str	r0, [r7, #4]
 8004a88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d101      	bne.n	8004a9c <HAL_TIM_ConfigClockSource+0x1c>
 8004a98:	2302      	movs	r3, #2
 8004a9a:	e0b4      	b.n	8004c06 <HAL_TIM_ConfigClockSource+0x186>
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	2201      	movs	r2, #1
 8004aa0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2202      	movs	r2, #2
 8004aa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	689b      	ldr	r3, [r3, #8]
 8004ab2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004ab4:	68bb      	ldr	r3, [r7, #8]
 8004ab6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8004aba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004abc:	68bb      	ldr	r3, [r7, #8]
 8004abe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004ac2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	68ba      	ldr	r2, [r7, #8]
 8004aca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ad4:	d03e      	beq.n	8004b54 <HAL_TIM_ConfigClockSource+0xd4>
 8004ad6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ada:	f200 8087 	bhi.w	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004ade:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae2:	f000 8086 	beq.w	8004bf2 <HAL_TIM_ConfigClockSource+0x172>
 8004ae6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004aea:	d87f      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004aec:	2b70      	cmp	r3, #112	@ 0x70
 8004aee:	d01a      	beq.n	8004b26 <HAL_TIM_ConfigClockSource+0xa6>
 8004af0:	2b70      	cmp	r3, #112	@ 0x70
 8004af2:	d87b      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004af4:	2b60      	cmp	r3, #96	@ 0x60
 8004af6:	d050      	beq.n	8004b9a <HAL_TIM_ConfigClockSource+0x11a>
 8004af8:	2b60      	cmp	r3, #96	@ 0x60
 8004afa:	d877      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004afc:	2b50      	cmp	r3, #80	@ 0x50
 8004afe:	d03c      	beq.n	8004b7a <HAL_TIM_ConfigClockSource+0xfa>
 8004b00:	2b50      	cmp	r3, #80	@ 0x50
 8004b02:	d873      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004b04:	2b40      	cmp	r3, #64	@ 0x40
 8004b06:	d058      	beq.n	8004bba <HAL_TIM_ConfigClockSource+0x13a>
 8004b08:	2b40      	cmp	r3, #64	@ 0x40
 8004b0a:	d86f      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004b0c:	2b30      	cmp	r3, #48	@ 0x30
 8004b0e:	d064      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x15a>
 8004b10:	2b30      	cmp	r3, #48	@ 0x30
 8004b12:	d86b      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004b14:	2b20      	cmp	r3, #32
 8004b16:	d060      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x15a>
 8004b18:	2b20      	cmp	r3, #32
 8004b1a:	d867      	bhi.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d05c      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x15a>
 8004b20:	2b10      	cmp	r3, #16
 8004b22:	d05a      	beq.n	8004bda <HAL_TIM_ConfigClockSource+0x15a>
 8004b24:	e062      	b.n	8004bec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b2e:	683b      	ldr	r3, [r7, #0]
 8004b30:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b32:	683b      	ldr	r3, [r7, #0]
 8004b34:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b36:	f000 f974 	bl	8004e22 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	689b      	ldr	r3, [r3, #8]
 8004b40:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004b48:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	68ba      	ldr	r2, [r7, #8]
 8004b50:	609a      	str	r2, [r3, #8]
      break;
 8004b52:	e04f      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004b64:	f000 f95d 	bl	8004e22 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	689a      	ldr	r2, [r3, #8]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004b76:	609a      	str	r2, [r3, #8]
      break;
 8004b78:	e03c      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004b86:	461a      	mov	r2, r3
 8004b88:	f000 f8d4 	bl	8004d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2150      	movs	r1, #80	@ 0x50
 8004b92:	4618      	mov	r0, r3
 8004b94:	f000 f92b 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004b98:	e02c      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004ba6:	461a      	mov	r2, r3
 8004ba8:	f000 f8f2 	bl	8004d90 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	2160      	movs	r1, #96	@ 0x60
 8004bb2:	4618      	mov	r0, r3
 8004bb4:	f000 f91b 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004bb8:	e01c      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	f000 f8b4 	bl	8004d34 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	2140      	movs	r1, #64	@ 0x40
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	f000 f90b 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004bd8:	e00c      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681a      	ldr	r2, [r3, #0]
 8004bde:	683b      	ldr	r3, [r7, #0]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	4619      	mov	r1, r3
 8004be4:	4610      	mov	r0, r2
 8004be6:	f000 f902 	bl	8004dee <TIM_ITRx_SetConfig>
      break;
 8004bea:	e003      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004bec:	2301      	movs	r3, #1
 8004bee:	73fb      	strb	r3, [r7, #15]
      break;
 8004bf0:	e000      	b.n	8004bf4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004bf2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2201      	movs	r2, #1
 8004bf8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2200      	movs	r2, #0
 8004c00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004c04:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c06:	4618      	mov	r0, r3
 8004c08:	3710      	adds	r7, #16
 8004c0a:	46bd      	mov	sp, r7
 8004c0c:	bd80      	pop	{r7, pc}

08004c0e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c0e:	b480      	push	{r7}
 8004c10:	b083      	sub	sp, #12
 8004c12:	af00      	add	r7, sp, #0
 8004c14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004c16:	bf00      	nop
 8004c18:	370c      	adds	r7, #12
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	bc80      	pop	{r7}
 8004c1e:	4770      	bx	lr

08004c20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004c20:	b480      	push	{r7}
 8004c22:	b083      	sub	sp, #12
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	bc80      	pop	{r7}
 8004c30:	4770      	bx	lr

08004c32 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004c32:	b480      	push	{r7}
 8004c34:	b083      	sub	sp, #12
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004c3a:	bf00      	nop
 8004c3c:	370c      	adds	r7, #12
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bc80      	pop	{r7}
 8004c42:	4770      	bx	lr

08004c44 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b083      	sub	sp, #12
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004c4c:	bf00      	nop
 8004c4e:	370c      	adds	r7, #12
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bc80      	pop	{r7}
 8004c54:	4770      	bx	lr
	...

08004c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004c58:	b480      	push	{r7}
 8004c5a:	b085      	sub	sp, #20
 8004c5c:	af00      	add	r7, sp, #0
 8004c5e:	6078      	str	r0, [r7, #4]
 8004c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	4a2f      	ldr	r2, [pc, #188]	@ (8004d28 <TIM_Base_SetConfig+0xd0>)
 8004c6c:	4293      	cmp	r3, r2
 8004c6e:	d00b      	beq.n	8004c88 <TIM_Base_SetConfig+0x30>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004c76:	d007      	beq.n	8004c88 <TIM_Base_SetConfig+0x30>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	4a2c      	ldr	r2, [pc, #176]	@ (8004d2c <TIM_Base_SetConfig+0xd4>)
 8004c7c:	4293      	cmp	r3, r2
 8004c7e:	d003      	beq.n	8004c88 <TIM_Base_SetConfig+0x30>
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	4a2b      	ldr	r2, [pc, #172]	@ (8004d30 <TIM_Base_SetConfig+0xd8>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d108      	bne.n	8004c9a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004c8e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	685b      	ldr	r3, [r3, #4]
 8004c94:	68fa      	ldr	r2, [r7, #12]
 8004c96:	4313      	orrs	r3, r2
 8004c98:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	4a22      	ldr	r2, [pc, #136]	@ (8004d28 <TIM_Base_SetConfig+0xd0>)
 8004c9e:	4293      	cmp	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <TIM_Base_SetConfig+0x62>
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ca8:	d007      	beq.n	8004cba <TIM_Base_SetConfig+0x62>
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	4a1f      	ldr	r2, [pc, #124]	@ (8004d2c <TIM_Base_SetConfig+0xd4>)
 8004cae:	4293      	cmp	r3, r2
 8004cb0:	d003      	beq.n	8004cba <TIM_Base_SetConfig+0x62>
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	4a1e      	ldr	r2, [pc, #120]	@ (8004d30 <TIM_Base_SetConfig+0xd8>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d108      	bne.n	8004ccc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004cc0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004cc2:	683b      	ldr	r3, [r7, #0]
 8004cc4:	68db      	ldr	r3, [r3, #12]
 8004cc6:	68fa      	ldr	r2, [r7, #12]
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	695b      	ldr	r3, [r3, #20]
 8004cd6:	4313      	orrs	r3, r2
 8004cd8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	68fa      	ldr	r2, [r7, #12]
 8004cde:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ce0:	683b      	ldr	r3, [r7, #0]
 8004ce2:	689a      	ldr	r2, [r3, #8]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004ce8:	683b      	ldr	r3, [r7, #0]
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	4a0d      	ldr	r2, [pc, #52]	@ (8004d28 <TIM_Base_SetConfig+0xd0>)
 8004cf4:	4293      	cmp	r3, r2
 8004cf6:	d103      	bne.n	8004d00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004cf8:	683b      	ldr	r3, [r7, #0]
 8004cfa:	691a      	ldr	r2, [r3, #16]
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	691b      	ldr	r3, [r3, #16]
 8004d0a:	f003 0301 	and.w	r3, r3, #1
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d005      	beq.n	8004d1e <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	691b      	ldr	r3, [r3, #16]
 8004d16:	f023 0201 	bic.w	r2, r3, #1
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	611a      	str	r2, [r3, #16]
  }
}
 8004d1e:	bf00      	nop
 8004d20:	3714      	adds	r7, #20
 8004d22:	46bd      	mov	sp, r7
 8004d24:	bc80      	pop	{r7}
 8004d26:	4770      	bx	lr
 8004d28:	40012c00 	.word	0x40012c00
 8004d2c:	40000400 	.word	0x40000400
 8004d30:	40000800 	.word	0x40000800

08004d34 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b087      	sub	sp, #28
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	6a1b      	ldr	r3, [r3, #32]
 8004d44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	6a1b      	ldr	r3, [r3, #32]
 8004d4a:	f023 0201 	bic.w	r2, r3, #1
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	699b      	ldr	r3, [r3, #24]
 8004d56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004d58:	693b      	ldr	r3, [r7, #16]
 8004d5a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004d5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	011b      	lsls	r3, r3, #4
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	f023 030a 	bic.w	r3, r3, #10
 8004d70:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004d72:	697a      	ldr	r2, [r7, #20]
 8004d74:	68bb      	ldr	r3, [r7, #8]
 8004d76:	4313      	orrs	r3, r2
 8004d78:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	693a      	ldr	r2, [r7, #16]
 8004d7e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	697a      	ldr	r2, [r7, #20]
 8004d84:	621a      	str	r2, [r3, #32]
}
 8004d86:	bf00      	nop
 8004d88:	371c      	adds	r7, #28
 8004d8a:	46bd      	mov	sp, r7
 8004d8c:	bc80      	pop	{r7}
 8004d8e:	4770      	bx	lr

08004d90 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b087      	sub	sp, #28
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	60f8      	str	r0, [r7, #12]
 8004d98:	60b9      	str	r1, [r7, #8]
 8004d9a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	6a1b      	ldr	r3, [r3, #32]
 8004da0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	6a1b      	ldr	r3, [r3, #32]
 8004da6:	f023 0210 	bic.w	r2, r3, #16
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004dba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	031b      	lsls	r3, r3, #12
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	4313      	orrs	r3, r2
 8004dc4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004dc6:	697b      	ldr	r3, [r7, #20]
 8004dc8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004dcc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	011b      	lsls	r3, r3, #4
 8004dd2:	697a      	ldr	r2, [r7, #20]
 8004dd4:	4313      	orrs	r3, r2
 8004dd6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	693a      	ldr	r2, [r7, #16]
 8004ddc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	697a      	ldr	r2, [r7, #20]
 8004de2:	621a      	str	r2, [r3, #32]
}
 8004de4:	bf00      	nop
 8004de6:	371c      	adds	r7, #28
 8004de8:	46bd      	mov	sp, r7
 8004dea:	bc80      	pop	{r7}
 8004dec:	4770      	bx	lr

08004dee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004dee:	b480      	push	{r7}
 8004df0:	b085      	sub	sp, #20
 8004df2:	af00      	add	r7, sp, #0
 8004df4:	6078      	str	r0, [r7, #4]
 8004df6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	689b      	ldr	r3, [r3, #8]
 8004dfc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e04:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	f043 0307 	orr.w	r3, r3, #7
 8004e10:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	68fa      	ldr	r2, [r7, #12]
 8004e16:	609a      	str	r2, [r3, #8]
}
 8004e18:	bf00      	nop
 8004e1a:	3714      	adds	r7, #20
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bc80      	pop	{r7}
 8004e20:	4770      	bx	lr

08004e22 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b087      	sub	sp, #28
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	60f8      	str	r0, [r7, #12]
 8004e2a:	60b9      	str	r1, [r7, #8]
 8004e2c:	607a      	str	r2, [r7, #4]
 8004e2e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004e3e:	683b      	ldr	r3, [r7, #0]
 8004e40:	021a      	lsls	r2, r3, #8
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	431a      	orrs	r2, r3
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	4313      	orrs	r3, r2
 8004e4a:	697a      	ldr	r2, [r7, #20]
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	697a      	ldr	r2, [r7, #20]
 8004e54:	609a      	str	r2, [r3, #8]
}
 8004e56:	bf00      	nop
 8004e58:	371c      	adds	r7, #28
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bc80      	pop	{r7}
 8004e5e:	4770      	bx	lr

08004e60 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004e60:	b480      	push	{r7}
 8004e62:	b085      	sub	sp, #20
 8004e64:	af00      	add	r7, sp, #0
 8004e66:	6078      	str	r0, [r7, #4]
 8004e68:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d101      	bne.n	8004e78 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e74:	2302      	movs	r3, #2
 8004e76:	e046      	b.n	8004f06 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	2201      	movs	r2, #1
 8004e7c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	2202      	movs	r2, #2
 8004e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004e9e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4313      	orrs	r3, r2
 8004ea8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68fa      	ldr	r2, [r7, #12]
 8004eb0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	4a16      	ldr	r2, [pc, #88]	@ (8004f10 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004eb8:	4293      	cmp	r3, r2
 8004eba:	d00e      	beq.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004ec4:	d009      	beq.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	4a12      	ldr	r2, [pc, #72]	@ (8004f14 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d004      	beq.n	8004eda <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a10      	ldr	r2, [pc, #64]	@ (8004f18 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d10c      	bne.n	8004ef4 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004eda:	68bb      	ldr	r3, [r7, #8]
 8004edc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004ee0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68ba      	ldr	r2, [r7, #8]
 8004ee8:	4313      	orrs	r3, r2
 8004eea:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	68ba      	ldr	r2, [r7, #8]
 8004ef2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	2200      	movs	r2, #0
 8004f00:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004f04:	2300      	movs	r3, #0
}
 8004f06:	4618      	mov	r0, r3
 8004f08:	3714      	adds	r7, #20
 8004f0a:	46bd      	mov	sp, r7
 8004f0c:	bc80      	pop	{r7}
 8004f0e:	4770      	bx	lr
 8004f10:	40012c00 	.word	0x40012c00
 8004f14:	40000400 	.word	0x40000400
 8004f18:	40000800 	.word	0x40000800

08004f1c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004f24:	bf00      	nop
 8004f26:	370c      	adds	r7, #12
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bc80      	pop	{r7}
 8004f2c:	4770      	bx	lr

08004f2e <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004f2e:	b480      	push	{r7}
 8004f30:	b083      	sub	sp, #12
 8004f32:	af00      	add	r7, sp, #0
 8004f34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004f36:	bf00      	nop
 8004f38:	370c      	adds	r7, #12
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	bc80      	pop	{r7}
 8004f3e:	4770      	bx	lr

08004f40 <ssd1306_Reset>:
#include <stdlib.h>
#include <string.h>  // For memcpy

#if defined(SSD1306_USE_I2C)

void ssd1306_Reset(void) {
 8004f40:	b480      	push	{r7}
 8004f42:	af00      	add	r7, sp, #0
    /* for I2C - do nothing */
}
 8004f44:	bf00      	nop
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bc80      	pop	{r7}
 8004f4a:	4770      	bx	lr

08004f4c <ssd1306_WriteCommand>:

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b086      	sub	sp, #24
 8004f50:	af04      	add	r7, sp, #16
 8004f52:	4603      	mov	r3, r0
 8004f54:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 8004f56:	f04f 33ff 	mov.w	r3, #4294967295
 8004f5a:	9302      	str	r3, [sp, #8]
 8004f5c:	2301      	movs	r3, #1
 8004f5e:	9301      	str	r3, [sp, #4]
 8004f60:	1dfb      	adds	r3, r7, #7
 8004f62:	9300      	str	r3, [sp, #0]
 8004f64:	2301      	movs	r3, #1
 8004f66:	2200      	movs	r2, #0
 8004f68:	2178      	movs	r1, #120	@ 0x78
 8004f6a:	4803      	ldr	r0, [pc, #12]	@ (8004f78 <ssd1306_WriteCommand+0x2c>)
 8004f6c:	f7fe fae0 	bl	8003530 <HAL_I2C_Mem_Write>
}
 8004f70:	bf00      	nop
 8004f72:	3708      	adds	r7, #8
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd80      	pop	{r7, pc}
 8004f78:	200002b0 	.word	0x200002b0

08004f7c <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b086      	sub	sp, #24
 8004f80:	af04      	add	r7, sp, #16
 8004f82:	6078      	str	r0, [r7, #4]
 8004f84:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	b29b      	uxth	r3, r3
 8004f8a:	f04f 32ff 	mov.w	r2, #4294967295
 8004f8e:	9202      	str	r2, [sp, #8]
 8004f90:	9301      	str	r3, [sp, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	2301      	movs	r3, #1
 8004f98:	2240      	movs	r2, #64	@ 0x40
 8004f9a:	2178      	movs	r1, #120	@ 0x78
 8004f9c:	4803      	ldr	r0, [pc, #12]	@ (8004fac <ssd1306_WriteData+0x30>)
 8004f9e:	f7fe fac7 	bl	8003530 <HAL_I2C_Mem_Write>
}
 8004fa2:	bf00      	nop
 8004fa4:	3708      	adds	r7, #8
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	200002b0 	.word	0x200002b0

08004fb0 <ssd1306_Init>:
    }
    return ret;
}

/* Initialize the oled screen */
void ssd1306_Init(void) {
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
    // Reset OLED
    ssd1306_Reset();
 8004fb4:	f7ff ffc4 	bl	8004f40 <ssd1306_Reset>

    // Wait for the screen to boot
    HAL_Delay(100);
 8004fb8:	2064      	movs	r0, #100	@ 0x64
 8004fba:	f7fd f9e3 	bl	8002384 <HAL_Delay>

    // Init OLED
    ssd1306_SetDisplayOn(0); //display off
 8004fbe:	2000      	movs	r0, #0
 8004fc0:	f000 f9d4 	bl	800536c <ssd1306_SetDisplayOn>

    ssd1306_WriteCommand(0x20); //Set Memory Addressing Mode
 8004fc4:	2020      	movs	r0, #32
 8004fc6:	f7ff ffc1 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); // 00b,Horizontal Addressing Mode; 01b,Vertical Addressing Mode;
 8004fca:	2000      	movs	r0, #0
 8004fcc:	f7ff ffbe 	bl	8004f4c <ssd1306_WriteCommand>
                                // 10b,Page Addressing Mode (RESET); 11b,Invalid

    ssd1306_WriteCommand(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 8004fd0:	20b0      	movs	r0, #176	@ 0xb0
 8004fd2:	f7ff ffbb 	bl	8004f4c <ssd1306_WriteCommand>

#ifdef SSD1306_MIRROR_VERT
    ssd1306_WriteCommand(0xC0); // Mirror vertically
 8004fd6:	20c0      	movs	r0, #192	@ 0xc0
 8004fd8:	f7ff ffb8 	bl	8004f4c <ssd1306_WriteCommand>
#else
    ssd1306_WriteCommand(0xC8); //Set COM Output Scan Direction
#endif

    ssd1306_WriteCommand(0x00); //---set low column address
 8004fdc:	2000      	movs	r0, #0
 8004fde:	f7ff ffb5 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x10); //---set high column address
 8004fe2:	2010      	movs	r0, #16
 8004fe4:	f7ff ffb2 	bl	8004f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x40); //--set start line address - CHECK
 8004fe8:	2040      	movs	r0, #64	@ 0x40
 8004fea:	f7ff ffaf 	bl	8004f4c <ssd1306_WriteCommand>

    ssd1306_SetContrast(0xFF);
 8004fee:	20ff      	movs	r0, #255	@ 0xff
 8004ff0:	f000 f9a8 	bl	8005344 <ssd1306_SetContrast>

#ifdef SSD1306_MIRROR_HORIZ
    ssd1306_WriteCommand(0xA0); // Mirror horizontally
 8004ff4:	20a0      	movs	r0, #160	@ 0xa0
 8004ff6:	f7ff ffa9 	bl	8004f4c <ssd1306_WriteCommand>
#endif

#ifdef SSD1306_INVERSE_COLOR
    ssd1306_WriteCommand(0xA7); //--set inverse color
#else
    ssd1306_WriteCommand(0xA6); //--set normal color
 8004ffa:	20a6      	movs	r0, #166	@ 0xa6
 8004ffc:	f7ff ffa6 	bl	8004f4c <ssd1306_WriteCommand>
// Set multiplex ratio.
#if (SSD1306_HEIGHT == 128)
    // Found in the Luma Python lib for SH1106.
    ssd1306_WriteCommand(0xFF);
#else
    ssd1306_WriteCommand(0xA8); //--set multiplex ratio(1 to 64) - CHECK
 8005000:	20a8      	movs	r0, #168	@ 0xa8
 8005002:	f7ff ffa3 	bl	8004f4c <ssd1306_WriteCommand>
#endif

#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x1F); //
 8005006:	201f      	movs	r0, #31
 8005008:	f7ff ffa0 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x3F); // Seems to work for 128px high displays too.
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800500c:	20a4      	movs	r0, #164	@ 0xa4
 800500e:	f7ff ff9d 	bl	8004f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD3); //-set display offset - CHECK
 8005012:	20d3      	movs	r0, #211	@ 0xd3
 8005014:	f7ff ff9a 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x00); //-not offset
 8005018:	2000      	movs	r0, #0
 800501a:	f7ff ff97 	bl	8004f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD5); //--set display clock divide ratio/oscillator frequency
 800501e:	20d5      	movs	r0, #213	@ 0xd5
 8005020:	f7ff ff94 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0xF0); //--set divide ratio
 8005024:	20f0      	movs	r0, #240	@ 0xf0
 8005026:	f7ff ff91 	bl	8004f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xD9); //--set pre-charge period
 800502a:	20d9      	movs	r0, #217	@ 0xd9
 800502c:	f7ff ff8e 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x22); //
 8005030:	2022      	movs	r0, #34	@ 0x22
 8005032:	f7ff ff8b 	bl	8004f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0xDA); //--set com pins hardware configuration - CHECK
 8005036:	20da      	movs	r0, #218	@ 0xda
 8005038:	f7ff ff88 	bl	8004f4c <ssd1306_WriteCommand>
#if (SSD1306_HEIGHT == 32)
    ssd1306_WriteCommand(0x02);
 800503c:	2002      	movs	r0, #2
 800503e:	f7ff ff85 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x12);
#else
#error "Only 32, 64, or 128 lines of height are supported!"
#endif

    ssd1306_WriteCommand(0xDB); //--set vcomh
 8005042:	20db      	movs	r0, #219	@ 0xdb
 8005044:	f7ff ff82 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x20); //0x20,0.77xVcc
 8005048:	2020      	movs	r0, #32
 800504a:	f7ff ff7f 	bl	8004f4c <ssd1306_WriteCommand>

    ssd1306_WriteCommand(0x8D); //--set DC-DC enable
 800504e:	208d      	movs	r0, #141	@ 0x8d
 8005050:	f7ff ff7c 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(0x14); //
 8005054:	2014      	movs	r0, #20
 8005056:	f7ff ff79 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_SetDisplayOn(1); //--turn on SSD1306 panel
 800505a:	2001      	movs	r0, #1
 800505c:	f000 f986 	bl	800536c <ssd1306_SetDisplayOn>

    // Clear screen
    ssd1306_Fill(Black);
 8005060:	2000      	movs	r0, #0
 8005062:	f000 f80f 	bl	8005084 <ssd1306_Fill>
    
    // Flush buffer to screen
    ssd1306_UpdateScreen();
 8005066:	f000 f825 	bl	80050b4 <ssd1306_UpdateScreen>
    
    // Set default values for screen object
    SSD1306.CurrentX = 0;
 800506a:	4b05      	ldr	r3, [pc, #20]	@ (8005080 <ssd1306_Init+0xd0>)
 800506c:	2200      	movs	r2, #0
 800506e:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = 0;
 8005070:	4b03      	ldr	r3, [pc, #12]	@ (8005080 <ssd1306_Init+0xd0>)
 8005072:	2200      	movs	r2, #0
 8005074:	805a      	strh	r2, [r3, #2]
    
    SSD1306.Initialized = 1;
 8005076:	4b02      	ldr	r3, [pc, #8]	@ (8005080 <ssd1306_Init+0xd0>)
 8005078:	2201      	movs	r2, #1
 800507a:	711a      	strb	r2, [r3, #4]
}
 800507c:	bf00      	nop
 800507e:	bd80      	pop	{r7, pc}
 8005080:	200005d4 	.word	0x200005d4

08005084 <ssd1306_Fill>:

/* Fill the whole screen with the given color */
void ssd1306_Fill(SSD1306_COLOR color) {
 8005084:	b580      	push	{r7, lr}
 8005086:	b082      	sub	sp, #8
 8005088:	af00      	add	r7, sp, #0
 800508a:	4603      	mov	r3, r0
 800508c:	71fb      	strb	r3, [r7, #7]
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 800508e:	79fb      	ldrb	r3, [r7, #7]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d101      	bne.n	8005098 <ssd1306_Fill+0x14>
 8005094:	2300      	movs	r3, #0
 8005096:	e000      	b.n	800509a <ssd1306_Fill+0x16>
 8005098:	23ff      	movs	r3, #255	@ 0xff
 800509a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800509e:	4619      	mov	r1, r3
 80050a0:	4803      	ldr	r0, [pc, #12]	@ (80050b0 <ssd1306_Fill+0x2c>)
 80050a2:	f000 ff16 	bl	8005ed2 <memset>
}
 80050a6:	bf00      	nop
 80050a8:	3708      	adds	r7, #8
 80050aa:	46bd      	mov	sp, r7
 80050ac:	bd80      	pop	{r7, pc}
 80050ae:	bf00      	nop
 80050b0:	200003d4 	.word	0x200003d4

080050b4 <ssd1306_UpdateScreen>:

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80050b4:	b580      	push	{r7, lr}
 80050b6:	b082      	sub	sp, #8
 80050b8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80050ba:	2300      	movs	r3, #0
 80050bc:	71fb      	strb	r3, [r7, #7]
 80050be:	e016      	b.n	80050ee <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80050c0:	79fb      	ldrb	r3, [r7, #7]
 80050c2:	3b50      	subs	r3, #80	@ 0x50
 80050c4:	b2db      	uxtb	r3, r3
 80050c6:	4618      	mov	r0, r3
 80050c8:	f7ff ff40 	bl	8004f4c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80050cc:	2000      	movs	r0, #0
 80050ce:	f7ff ff3d 	bl	8004f4c <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80050d2:	2010      	movs	r0, #16
 80050d4:	f7ff ff3a 	bl	8004f4c <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80050d8:	79fb      	ldrb	r3, [r7, #7]
 80050da:	01db      	lsls	r3, r3, #7
 80050dc:	4a08      	ldr	r2, [pc, #32]	@ (8005100 <ssd1306_UpdateScreen+0x4c>)
 80050de:	4413      	add	r3, r2
 80050e0:	2180      	movs	r1, #128	@ 0x80
 80050e2:	4618      	mov	r0, r3
 80050e4:	f7ff ff4a 	bl	8004f7c <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80050e8:	79fb      	ldrb	r3, [r7, #7]
 80050ea:	3301      	adds	r3, #1
 80050ec:	71fb      	strb	r3, [r7, #7]
 80050ee:	79fb      	ldrb	r3, [r7, #7]
 80050f0:	2b03      	cmp	r3, #3
 80050f2:	d9e5      	bls.n	80050c0 <ssd1306_UpdateScreen+0xc>
    }
}
 80050f4:	bf00      	nop
 80050f6:	bf00      	nop
 80050f8:	3708      	adds	r7, #8
 80050fa:	46bd      	mov	sp, r7
 80050fc:	bd80      	pop	{r7, pc}
 80050fe:	bf00      	nop
 8005100:	200003d4 	.word	0x200003d4

08005104 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005104:	b480      	push	{r7}
 8005106:	b083      	sub	sp, #12
 8005108:	af00      	add	r7, sp, #0
 800510a:	4603      	mov	r3, r0
 800510c:	71fb      	strb	r3, [r7, #7]
 800510e:	460b      	mov	r3, r1
 8005110:	71bb      	strb	r3, [r7, #6]
 8005112:	4613      	mov	r3, r2
 8005114:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005116:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800511a:	2b00      	cmp	r3, #0
 800511c:	db3d      	blt.n	800519a <ssd1306_DrawPixel+0x96>
 800511e:	79bb      	ldrb	r3, [r7, #6]
 8005120:	2b1f      	cmp	r3, #31
 8005122:	d83a      	bhi.n	800519a <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005124:	797b      	ldrb	r3, [r7, #5]
 8005126:	2b01      	cmp	r3, #1
 8005128:	d11a      	bne.n	8005160 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800512a:	79fa      	ldrb	r2, [r7, #7]
 800512c:	79bb      	ldrb	r3, [r7, #6]
 800512e:	08db      	lsrs	r3, r3, #3
 8005130:	b2d8      	uxtb	r0, r3
 8005132:	4603      	mov	r3, r0
 8005134:	01db      	lsls	r3, r3, #7
 8005136:	4413      	add	r3, r2
 8005138:	4a1a      	ldr	r2, [pc, #104]	@ (80051a4 <ssd1306_DrawPixel+0xa0>)
 800513a:	5cd3      	ldrb	r3, [r2, r3]
 800513c:	b25a      	sxtb	r2, r3
 800513e:	79bb      	ldrb	r3, [r7, #6]
 8005140:	f003 0307 	and.w	r3, r3, #7
 8005144:	2101      	movs	r1, #1
 8005146:	fa01 f303 	lsl.w	r3, r1, r3
 800514a:	b25b      	sxtb	r3, r3
 800514c:	4313      	orrs	r3, r2
 800514e:	b259      	sxtb	r1, r3
 8005150:	79fa      	ldrb	r2, [r7, #7]
 8005152:	4603      	mov	r3, r0
 8005154:	01db      	lsls	r3, r3, #7
 8005156:	4413      	add	r3, r2
 8005158:	b2c9      	uxtb	r1, r1
 800515a:	4a12      	ldr	r2, [pc, #72]	@ (80051a4 <ssd1306_DrawPixel+0xa0>)
 800515c:	54d1      	strb	r1, [r2, r3]
 800515e:	e01d      	b.n	800519c <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005160:	79fa      	ldrb	r2, [r7, #7]
 8005162:	79bb      	ldrb	r3, [r7, #6]
 8005164:	08db      	lsrs	r3, r3, #3
 8005166:	b2d8      	uxtb	r0, r3
 8005168:	4603      	mov	r3, r0
 800516a:	01db      	lsls	r3, r3, #7
 800516c:	4413      	add	r3, r2
 800516e:	4a0d      	ldr	r2, [pc, #52]	@ (80051a4 <ssd1306_DrawPixel+0xa0>)
 8005170:	5cd3      	ldrb	r3, [r2, r3]
 8005172:	b25a      	sxtb	r2, r3
 8005174:	79bb      	ldrb	r3, [r7, #6]
 8005176:	f003 0307 	and.w	r3, r3, #7
 800517a:	2101      	movs	r1, #1
 800517c:	fa01 f303 	lsl.w	r3, r1, r3
 8005180:	b25b      	sxtb	r3, r3
 8005182:	43db      	mvns	r3, r3
 8005184:	b25b      	sxtb	r3, r3
 8005186:	4013      	ands	r3, r2
 8005188:	b259      	sxtb	r1, r3
 800518a:	79fa      	ldrb	r2, [r7, #7]
 800518c:	4603      	mov	r3, r0
 800518e:	01db      	lsls	r3, r3, #7
 8005190:	4413      	add	r3, r2
 8005192:	b2c9      	uxtb	r1, r1
 8005194:	4a03      	ldr	r2, [pc, #12]	@ (80051a4 <ssd1306_DrawPixel+0xa0>)
 8005196:	54d1      	strb	r1, [r2, r3]
 8005198:	e000      	b.n	800519c <ssd1306_DrawPixel+0x98>
        return;
 800519a:	bf00      	nop
    }
}
 800519c:	370c      	adds	r7, #12
 800519e:	46bd      	mov	sp, r7
 80051a0:	bc80      	pop	{r7}
 80051a2:	4770      	bx	lr
 80051a4:	200003d4 	.word	0x200003d4

080051a8 <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80051a8:	b590      	push	{r4, r7, lr}
 80051aa:	b089      	sub	sp, #36	@ 0x24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	4604      	mov	r4, r0
 80051b0:	4638      	mov	r0, r7
 80051b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80051b6:	4623      	mov	r3, r4
 80051b8:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80051ba:	7bfb      	ldrb	r3, [r7, #15]
 80051bc:	2b1f      	cmp	r3, #31
 80051be:	d902      	bls.n	80051c6 <ssd1306_WriteChar+0x1e>
 80051c0:	7bfb      	ldrb	r3, [r7, #15]
 80051c2:	2b7e      	cmp	r3, #126	@ 0x7e
 80051c4:	d901      	bls.n	80051ca <ssd1306_WriteChar+0x22>
        return 0;
 80051c6:	2300      	movs	r3, #0
 80051c8:	e077      	b.n	80052ba <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80051ca:	4b3e      	ldr	r3, [pc, #248]	@ (80052c4 <ssd1306_WriteChar+0x11c>)
 80051cc:	881b      	ldrh	r3, [r3, #0]
 80051ce:	461a      	mov	r2, r3
 80051d0:	783b      	ldrb	r3, [r7, #0]
 80051d2:	4413      	add	r3, r2
 80051d4:	2b80      	cmp	r3, #128	@ 0x80
 80051d6:	dc06      	bgt.n	80051e6 <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80051d8:	4b3a      	ldr	r3, [pc, #232]	@ (80052c4 <ssd1306_WriteChar+0x11c>)
 80051da:	885b      	ldrh	r3, [r3, #2]
 80051dc:	461a      	mov	r2, r3
 80051de:	787b      	ldrb	r3, [r7, #1]
 80051e0:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80051e2:	2b20      	cmp	r3, #32
 80051e4:	dd01      	ble.n	80051ea <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80051e6:	2300      	movs	r3, #0
 80051e8:	e067      	b.n	80052ba <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80051ea:	2300      	movs	r3, #0
 80051ec:	61fb      	str	r3, [r7, #28]
 80051ee:	e04e      	b.n	800528e <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 80051f0:	687a      	ldr	r2, [r7, #4]
 80051f2:	7bfb      	ldrb	r3, [r7, #15]
 80051f4:	3b20      	subs	r3, #32
 80051f6:	7879      	ldrb	r1, [r7, #1]
 80051f8:	fb01 f303 	mul.w	r3, r1, r3
 80051fc:	4619      	mov	r1, r3
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	440b      	add	r3, r1
 8005202:	005b      	lsls	r3, r3, #1
 8005204:	4413      	add	r3, r2
 8005206:	881b      	ldrh	r3, [r3, #0]
 8005208:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800520a:	2300      	movs	r3, #0
 800520c:	61bb      	str	r3, [r7, #24]
 800520e:	e036      	b.n	800527e <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8005210:	697a      	ldr	r2, [r7, #20]
 8005212:	69bb      	ldr	r3, [r7, #24]
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800521c:	2b00      	cmp	r3, #0
 800521e:	d013      	beq.n	8005248 <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005220:	4b28      	ldr	r3, [pc, #160]	@ (80052c4 <ssd1306_WriteChar+0x11c>)
 8005222:	881b      	ldrh	r3, [r3, #0]
 8005224:	b2da      	uxtb	r2, r3
 8005226:	69bb      	ldr	r3, [r7, #24]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	4413      	add	r3, r2
 800522c:	b2d8      	uxtb	r0, r3
 800522e:	4b25      	ldr	r3, [pc, #148]	@ (80052c4 <ssd1306_WriteChar+0x11c>)
 8005230:	885b      	ldrh	r3, [r3, #2]
 8005232:	b2da      	uxtb	r2, r3
 8005234:	69fb      	ldr	r3, [r7, #28]
 8005236:	b2db      	uxtb	r3, r3
 8005238:	4413      	add	r3, r2
 800523a:	b2db      	uxtb	r3, r3
 800523c:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005240:	4619      	mov	r1, r3
 8005242:	f7ff ff5f 	bl	8005104 <ssd1306_DrawPixel>
 8005246:	e017      	b.n	8005278 <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 8005248:	4b1e      	ldr	r3, [pc, #120]	@ (80052c4 <ssd1306_WriteChar+0x11c>)
 800524a:	881b      	ldrh	r3, [r3, #0]
 800524c:	b2da      	uxtb	r2, r3
 800524e:	69bb      	ldr	r3, [r7, #24]
 8005250:	b2db      	uxtb	r3, r3
 8005252:	4413      	add	r3, r2
 8005254:	b2d8      	uxtb	r0, r3
 8005256:	4b1b      	ldr	r3, [pc, #108]	@ (80052c4 <ssd1306_WriteChar+0x11c>)
 8005258:	885b      	ldrh	r3, [r3, #2]
 800525a:	b2da      	uxtb	r2, r3
 800525c:	69fb      	ldr	r3, [r7, #28]
 800525e:	b2db      	uxtb	r3, r3
 8005260:	4413      	add	r3, r2
 8005262:	b2d9      	uxtb	r1, r3
 8005264:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 8005268:	2b00      	cmp	r3, #0
 800526a:	bf0c      	ite	eq
 800526c:	2301      	moveq	r3, #1
 800526e:	2300      	movne	r3, #0
 8005270:	b2db      	uxtb	r3, r3
 8005272:	461a      	mov	r2, r3
 8005274:	f7ff ff46 	bl	8005104 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	3301      	adds	r3, #1
 800527c:	61bb      	str	r3, [r7, #24]
 800527e:	783b      	ldrb	r3, [r7, #0]
 8005280:	461a      	mov	r2, r3
 8005282:	69bb      	ldr	r3, [r7, #24]
 8005284:	4293      	cmp	r3, r2
 8005286:	d3c3      	bcc.n	8005210 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	3301      	adds	r3, #1
 800528c:	61fb      	str	r3, [r7, #28]
 800528e:	787b      	ldrb	r3, [r7, #1]
 8005290:	461a      	mov	r2, r3
 8005292:	69fb      	ldr	r3, [r7, #28]
 8005294:	4293      	cmp	r3, r2
 8005296:	d3ab      	bcc.n	80051f0 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 8005298:	4b0a      	ldr	r3, [pc, #40]	@ (80052c4 <ssd1306_WriteChar+0x11c>)
 800529a:	881b      	ldrh	r3, [r3, #0]
 800529c:	68ba      	ldr	r2, [r7, #8]
 800529e:	2a00      	cmp	r2, #0
 80052a0:	d005      	beq.n	80052ae <ssd1306_WriteChar+0x106>
 80052a2:	68b9      	ldr	r1, [r7, #8]
 80052a4:	7bfa      	ldrb	r2, [r7, #15]
 80052a6:	3a20      	subs	r2, #32
 80052a8:	440a      	add	r2, r1
 80052aa:	7812      	ldrb	r2, [r2, #0]
 80052ac:	e000      	b.n	80052b0 <ssd1306_WriteChar+0x108>
 80052ae:	783a      	ldrb	r2, [r7, #0]
 80052b0:	4413      	add	r3, r2
 80052b2:	b29a      	uxth	r2, r3
 80052b4:	4b03      	ldr	r3, [pc, #12]	@ (80052c4 <ssd1306_WriteChar+0x11c>)
 80052b6:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80052b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80052ba:	4618      	mov	r0, r3
 80052bc:	3724      	adds	r7, #36	@ 0x24
 80052be:	46bd      	mov	sp, r7
 80052c0:	bd90      	pop	{r4, r7, pc}
 80052c2:	bf00      	nop
 80052c4:	200005d4 	.word	0x200005d4

080052c8 <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b086      	sub	sp, #24
 80052cc:	af02      	add	r7, sp, #8
 80052ce:	60f8      	str	r0, [r7, #12]
 80052d0:	4638      	mov	r0, r7
 80052d2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80052d6:	e013      	b.n	8005300 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	7818      	ldrb	r0, [r3, #0]
 80052dc:	7e3b      	ldrb	r3, [r7, #24]
 80052de:	9300      	str	r3, [sp, #0]
 80052e0:	463b      	mov	r3, r7
 80052e2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80052e4:	f7ff ff60 	bl	80051a8 <ssd1306_WriteChar>
 80052e8:	4603      	mov	r3, r0
 80052ea:	461a      	mov	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	781b      	ldrb	r3, [r3, #0]
 80052f0:	429a      	cmp	r2, r3
 80052f2:	d002      	beq.n	80052fa <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	781b      	ldrb	r3, [r3, #0]
 80052f8:	e008      	b.n	800530c <ssd1306_WriteString+0x44>
        }
        str++;
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	3301      	adds	r3, #1
 80052fe:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	781b      	ldrb	r3, [r3, #0]
 8005304:	2b00      	cmp	r3, #0
 8005306:	d1e7      	bne.n	80052d8 <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	781b      	ldrb	r3, [r3, #0]
}
 800530c:	4618      	mov	r0, r3
 800530e:	3710      	adds	r7, #16
 8005310:	46bd      	mov	sp, r7
 8005312:	bd80      	pop	{r7, pc}

08005314 <ssd1306_SetCursor>:

/* Position the cursor */
void ssd1306_SetCursor(uint8_t x, uint8_t y) {
 8005314:	b480      	push	{r7}
 8005316:	b083      	sub	sp, #12
 8005318:	af00      	add	r7, sp, #0
 800531a:	4603      	mov	r3, r0
 800531c:	460a      	mov	r2, r1
 800531e:	71fb      	strb	r3, [r7, #7]
 8005320:	4613      	mov	r3, r2
 8005322:	71bb      	strb	r3, [r7, #6]
    SSD1306.CurrentX = x;
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	b29a      	uxth	r2, r3
 8005328:	4b05      	ldr	r3, [pc, #20]	@ (8005340 <ssd1306_SetCursor+0x2c>)
 800532a:	801a      	strh	r2, [r3, #0]
    SSD1306.CurrentY = y;
 800532c:	79bb      	ldrb	r3, [r7, #6]
 800532e:	b29a      	uxth	r2, r3
 8005330:	4b03      	ldr	r3, [pc, #12]	@ (8005340 <ssd1306_SetCursor+0x2c>)
 8005332:	805a      	strh	r2, [r3, #2]
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	bc80      	pop	{r7}
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	200005d4 	.word	0x200005d4

08005344 <ssd1306_SetContrast>:
        }
    }
    return;
}

void ssd1306_SetContrast(const uint8_t value) {
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	4603      	mov	r3, r0
 800534c:	71fb      	strb	r3, [r7, #7]
    const uint8_t kSetContrastControlRegister = 0x81;
 800534e:	2381      	movs	r3, #129	@ 0x81
 8005350:	73fb      	strb	r3, [r7, #15]
    ssd1306_WriteCommand(kSetContrastControlRegister);
 8005352:	7bfb      	ldrb	r3, [r7, #15]
 8005354:	4618      	mov	r0, r3
 8005356:	f7ff fdf9 	bl	8004f4c <ssd1306_WriteCommand>
    ssd1306_WriteCommand(value);
 800535a:	79fb      	ldrb	r3, [r7, #7]
 800535c:	4618      	mov	r0, r3
 800535e:	f7ff fdf5 	bl	8004f4c <ssd1306_WriteCommand>
}
 8005362:	bf00      	nop
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}
	...

0800536c <ssd1306_SetDisplayOn>:

void ssd1306_SetDisplayOn(const uint8_t on) {
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	4603      	mov	r3, r0
 8005374:	71fb      	strb	r3, [r7, #7]
    uint8_t value;
    if (on) {
 8005376:	79fb      	ldrb	r3, [r7, #7]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d005      	beq.n	8005388 <ssd1306_SetDisplayOn+0x1c>
        value = 0xAF;   // Display on
 800537c:	23af      	movs	r3, #175	@ 0xaf
 800537e:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 1;
 8005380:	4b08      	ldr	r3, [pc, #32]	@ (80053a4 <ssd1306_SetDisplayOn+0x38>)
 8005382:	2201      	movs	r2, #1
 8005384:	715a      	strb	r2, [r3, #5]
 8005386:	e004      	b.n	8005392 <ssd1306_SetDisplayOn+0x26>
    } else {
        value = 0xAE;   // Display off
 8005388:	23ae      	movs	r3, #174	@ 0xae
 800538a:	73fb      	strb	r3, [r7, #15]
        SSD1306.DisplayOn = 0;
 800538c:	4b05      	ldr	r3, [pc, #20]	@ (80053a4 <ssd1306_SetDisplayOn+0x38>)
 800538e:	2200      	movs	r2, #0
 8005390:	715a      	strb	r2, [r3, #5]
    }
    ssd1306_WriteCommand(value);
 8005392:	7bfb      	ldrb	r3, [r7, #15]
 8005394:	4618      	mov	r0, r3
 8005396:	f7ff fdd9 	bl	8004f4c <ssd1306_WriteCommand>
}
 800539a:	bf00      	nop
 800539c:	3710      	adds	r7, #16
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	200005d4 	.word	0x200005d4

080053a8 <__cvt>:
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80053ae:	461d      	mov	r5, r3
 80053b0:	bfbb      	ittet	lt
 80053b2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80053b6:	461d      	movlt	r5, r3
 80053b8:	2300      	movge	r3, #0
 80053ba:	232d      	movlt	r3, #45	@ 0x2d
 80053bc:	b088      	sub	sp, #32
 80053be:	4614      	mov	r4, r2
 80053c0:	bfb8      	it	lt
 80053c2:	4614      	movlt	r4, r2
 80053c4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80053c6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80053c8:	7013      	strb	r3, [r2, #0]
 80053ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80053cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80053d0:	f023 0820 	bic.w	r8, r3, #32
 80053d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80053d8:	d005      	beq.n	80053e6 <__cvt+0x3e>
 80053da:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80053de:	d100      	bne.n	80053e2 <__cvt+0x3a>
 80053e0:	3601      	adds	r6, #1
 80053e2:	2302      	movs	r3, #2
 80053e4:	e000      	b.n	80053e8 <__cvt+0x40>
 80053e6:	2303      	movs	r3, #3
 80053e8:	aa07      	add	r2, sp, #28
 80053ea:	9204      	str	r2, [sp, #16]
 80053ec:	aa06      	add	r2, sp, #24
 80053ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80053f2:	e9cd 3600 	strd	r3, r6, [sp]
 80053f6:	4622      	mov	r2, r4
 80053f8:	462b      	mov	r3, r5
 80053fa:	f000 fe91 	bl	8006120 <_dtoa_r>
 80053fe:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8005402:	4607      	mov	r7, r0
 8005404:	d119      	bne.n	800543a <__cvt+0x92>
 8005406:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8005408:	07db      	lsls	r3, r3, #31
 800540a:	d50e      	bpl.n	800542a <__cvt+0x82>
 800540c:	eb00 0906 	add.w	r9, r0, r6
 8005410:	2200      	movs	r2, #0
 8005412:	2300      	movs	r3, #0
 8005414:	4620      	mov	r0, r4
 8005416:	4629      	mov	r1, r5
 8005418:	f7fb fac6 	bl	80009a8 <__aeabi_dcmpeq>
 800541c:	b108      	cbz	r0, 8005422 <__cvt+0x7a>
 800541e:	f8cd 901c 	str.w	r9, [sp, #28]
 8005422:	2230      	movs	r2, #48	@ 0x30
 8005424:	9b07      	ldr	r3, [sp, #28]
 8005426:	454b      	cmp	r3, r9
 8005428:	d31e      	bcc.n	8005468 <__cvt+0xc0>
 800542a:	4638      	mov	r0, r7
 800542c:	9b07      	ldr	r3, [sp, #28]
 800542e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8005430:	1bdb      	subs	r3, r3, r7
 8005432:	6013      	str	r3, [r2, #0]
 8005434:	b008      	add	sp, #32
 8005436:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800543a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800543e:	eb00 0906 	add.w	r9, r0, r6
 8005442:	d1e5      	bne.n	8005410 <__cvt+0x68>
 8005444:	7803      	ldrb	r3, [r0, #0]
 8005446:	2b30      	cmp	r3, #48	@ 0x30
 8005448:	d10a      	bne.n	8005460 <__cvt+0xb8>
 800544a:	2200      	movs	r2, #0
 800544c:	2300      	movs	r3, #0
 800544e:	4620      	mov	r0, r4
 8005450:	4629      	mov	r1, r5
 8005452:	f7fb faa9 	bl	80009a8 <__aeabi_dcmpeq>
 8005456:	b918      	cbnz	r0, 8005460 <__cvt+0xb8>
 8005458:	f1c6 0601 	rsb	r6, r6, #1
 800545c:	f8ca 6000 	str.w	r6, [sl]
 8005460:	f8da 3000 	ldr.w	r3, [sl]
 8005464:	4499      	add	r9, r3
 8005466:	e7d3      	b.n	8005410 <__cvt+0x68>
 8005468:	1c59      	adds	r1, r3, #1
 800546a:	9107      	str	r1, [sp, #28]
 800546c:	701a      	strb	r2, [r3, #0]
 800546e:	e7d9      	b.n	8005424 <__cvt+0x7c>

08005470 <__exponent>:
 8005470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005472:	2900      	cmp	r1, #0
 8005474:	bfb6      	itet	lt
 8005476:	232d      	movlt	r3, #45	@ 0x2d
 8005478:	232b      	movge	r3, #43	@ 0x2b
 800547a:	4249      	neglt	r1, r1
 800547c:	2909      	cmp	r1, #9
 800547e:	7002      	strb	r2, [r0, #0]
 8005480:	7043      	strb	r3, [r0, #1]
 8005482:	dd29      	ble.n	80054d8 <__exponent+0x68>
 8005484:	f10d 0307 	add.w	r3, sp, #7
 8005488:	461d      	mov	r5, r3
 800548a:	270a      	movs	r7, #10
 800548c:	fbb1 f6f7 	udiv	r6, r1, r7
 8005490:	461a      	mov	r2, r3
 8005492:	fb07 1416 	mls	r4, r7, r6, r1
 8005496:	3430      	adds	r4, #48	@ 0x30
 8005498:	f802 4c01 	strb.w	r4, [r2, #-1]
 800549c:	460c      	mov	r4, r1
 800549e:	2c63      	cmp	r4, #99	@ 0x63
 80054a0:	4631      	mov	r1, r6
 80054a2:	f103 33ff 	add.w	r3, r3, #4294967295
 80054a6:	dcf1      	bgt.n	800548c <__exponent+0x1c>
 80054a8:	3130      	adds	r1, #48	@ 0x30
 80054aa:	1e94      	subs	r4, r2, #2
 80054ac:	f803 1c01 	strb.w	r1, [r3, #-1]
 80054b0:	4623      	mov	r3, r4
 80054b2:	1c41      	adds	r1, r0, #1
 80054b4:	42ab      	cmp	r3, r5
 80054b6:	d30a      	bcc.n	80054ce <__exponent+0x5e>
 80054b8:	f10d 0309 	add.w	r3, sp, #9
 80054bc:	1a9b      	subs	r3, r3, r2
 80054be:	42ac      	cmp	r4, r5
 80054c0:	bf88      	it	hi
 80054c2:	2300      	movhi	r3, #0
 80054c4:	3302      	adds	r3, #2
 80054c6:	4403      	add	r3, r0
 80054c8:	1a18      	subs	r0, r3, r0
 80054ca:	b003      	add	sp, #12
 80054cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054ce:	f813 6b01 	ldrb.w	r6, [r3], #1
 80054d2:	f801 6f01 	strb.w	r6, [r1, #1]!
 80054d6:	e7ed      	b.n	80054b4 <__exponent+0x44>
 80054d8:	2330      	movs	r3, #48	@ 0x30
 80054da:	3130      	adds	r1, #48	@ 0x30
 80054dc:	7083      	strb	r3, [r0, #2]
 80054de:	70c1      	strb	r1, [r0, #3]
 80054e0:	1d03      	adds	r3, r0, #4
 80054e2:	e7f1      	b.n	80054c8 <__exponent+0x58>

080054e4 <_printf_float>:
 80054e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054e8:	b091      	sub	sp, #68	@ 0x44
 80054ea:	460c      	mov	r4, r1
 80054ec:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 80054f0:	4616      	mov	r6, r2
 80054f2:	461f      	mov	r7, r3
 80054f4:	4605      	mov	r5, r0
 80054f6:	f000 fcf5 	bl	8005ee4 <_localeconv_r>
 80054fa:	6803      	ldr	r3, [r0, #0]
 80054fc:	4618      	mov	r0, r3
 80054fe:	9308      	str	r3, [sp, #32]
 8005500:	f7fa fe26 	bl	8000150 <strlen>
 8005504:	2300      	movs	r3, #0
 8005506:	930e      	str	r3, [sp, #56]	@ 0x38
 8005508:	f8d8 3000 	ldr.w	r3, [r8]
 800550c:	9009      	str	r0, [sp, #36]	@ 0x24
 800550e:	3307      	adds	r3, #7
 8005510:	f023 0307 	bic.w	r3, r3, #7
 8005514:	f103 0208 	add.w	r2, r3, #8
 8005518:	f894 a018 	ldrb.w	sl, [r4, #24]
 800551c:	f8d4 b000 	ldr.w	fp, [r4]
 8005520:	f8c8 2000 	str.w	r2, [r8]
 8005524:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005528:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800552c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800552e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8005532:	f04f 32ff 	mov.w	r2, #4294967295
 8005536:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800553a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800553e:	4b9c      	ldr	r3, [pc, #624]	@ (80057b0 <_printf_float+0x2cc>)
 8005540:	f7fb fa64 	bl	8000a0c <__aeabi_dcmpun>
 8005544:	bb70      	cbnz	r0, 80055a4 <_printf_float+0xc0>
 8005546:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800554a:	f04f 32ff 	mov.w	r2, #4294967295
 800554e:	4b98      	ldr	r3, [pc, #608]	@ (80057b0 <_printf_float+0x2cc>)
 8005550:	f7fb fa3e 	bl	80009d0 <__aeabi_dcmple>
 8005554:	bb30      	cbnz	r0, 80055a4 <_printf_float+0xc0>
 8005556:	2200      	movs	r2, #0
 8005558:	2300      	movs	r3, #0
 800555a:	4640      	mov	r0, r8
 800555c:	4649      	mov	r1, r9
 800555e:	f7fb fa2d 	bl	80009bc <__aeabi_dcmplt>
 8005562:	b110      	cbz	r0, 800556a <_printf_float+0x86>
 8005564:	232d      	movs	r3, #45	@ 0x2d
 8005566:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800556a:	4a92      	ldr	r2, [pc, #584]	@ (80057b4 <_printf_float+0x2d0>)
 800556c:	4b92      	ldr	r3, [pc, #584]	@ (80057b8 <_printf_float+0x2d4>)
 800556e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005572:	bf94      	ite	ls
 8005574:	4690      	movls	r8, r2
 8005576:	4698      	movhi	r8, r3
 8005578:	2303      	movs	r3, #3
 800557a:	f04f 0900 	mov.w	r9, #0
 800557e:	6123      	str	r3, [r4, #16]
 8005580:	f02b 0304 	bic.w	r3, fp, #4
 8005584:	6023      	str	r3, [r4, #0]
 8005586:	4633      	mov	r3, r6
 8005588:	4621      	mov	r1, r4
 800558a:	4628      	mov	r0, r5
 800558c:	9700      	str	r7, [sp, #0]
 800558e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8005590:	f000 f9d4 	bl	800593c <_printf_common>
 8005594:	3001      	adds	r0, #1
 8005596:	f040 8090 	bne.w	80056ba <_printf_float+0x1d6>
 800559a:	f04f 30ff 	mov.w	r0, #4294967295
 800559e:	b011      	add	sp, #68	@ 0x44
 80055a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80055a4:	4642      	mov	r2, r8
 80055a6:	464b      	mov	r3, r9
 80055a8:	4640      	mov	r0, r8
 80055aa:	4649      	mov	r1, r9
 80055ac:	f7fb fa2e 	bl	8000a0c <__aeabi_dcmpun>
 80055b0:	b148      	cbz	r0, 80055c6 <_printf_float+0xe2>
 80055b2:	464b      	mov	r3, r9
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	bfb8      	it	lt
 80055b8:	232d      	movlt	r3, #45	@ 0x2d
 80055ba:	4a80      	ldr	r2, [pc, #512]	@ (80057bc <_printf_float+0x2d8>)
 80055bc:	bfb8      	it	lt
 80055be:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80055c2:	4b7f      	ldr	r3, [pc, #508]	@ (80057c0 <_printf_float+0x2dc>)
 80055c4:	e7d3      	b.n	800556e <_printf_float+0x8a>
 80055c6:	6863      	ldr	r3, [r4, #4]
 80055c8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 80055cc:	1c5a      	adds	r2, r3, #1
 80055ce:	d13f      	bne.n	8005650 <_printf_float+0x16c>
 80055d0:	2306      	movs	r3, #6
 80055d2:	6063      	str	r3, [r4, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 80055da:	6023      	str	r3, [r4, #0]
 80055dc:	9206      	str	r2, [sp, #24]
 80055de:	aa0e      	add	r2, sp, #56	@ 0x38
 80055e0:	e9cd a204 	strd	sl, r2, [sp, #16]
 80055e4:	aa0d      	add	r2, sp, #52	@ 0x34
 80055e6:	9203      	str	r2, [sp, #12]
 80055e8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 80055ec:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80055f0:	6863      	ldr	r3, [r4, #4]
 80055f2:	4642      	mov	r2, r8
 80055f4:	9300      	str	r3, [sp, #0]
 80055f6:	4628      	mov	r0, r5
 80055f8:	464b      	mov	r3, r9
 80055fa:	910a      	str	r1, [sp, #40]	@ 0x28
 80055fc:	f7ff fed4 	bl	80053a8 <__cvt>
 8005600:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005602:	4680      	mov	r8, r0
 8005604:	2947      	cmp	r1, #71	@ 0x47
 8005606:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8005608:	d128      	bne.n	800565c <_printf_float+0x178>
 800560a:	1cc8      	adds	r0, r1, #3
 800560c:	db02      	blt.n	8005614 <_printf_float+0x130>
 800560e:	6863      	ldr	r3, [r4, #4]
 8005610:	4299      	cmp	r1, r3
 8005612:	dd40      	ble.n	8005696 <_printf_float+0x1b2>
 8005614:	f1aa 0a02 	sub.w	sl, sl, #2
 8005618:	fa5f fa8a 	uxtb.w	sl, sl
 800561c:	4652      	mov	r2, sl
 800561e:	3901      	subs	r1, #1
 8005620:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005624:	910d      	str	r1, [sp, #52]	@ 0x34
 8005626:	f7ff ff23 	bl	8005470 <__exponent>
 800562a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800562c:	4681      	mov	r9, r0
 800562e:	1813      	adds	r3, r2, r0
 8005630:	2a01      	cmp	r2, #1
 8005632:	6123      	str	r3, [r4, #16]
 8005634:	dc02      	bgt.n	800563c <_printf_float+0x158>
 8005636:	6822      	ldr	r2, [r4, #0]
 8005638:	07d2      	lsls	r2, r2, #31
 800563a:	d501      	bpl.n	8005640 <_printf_float+0x15c>
 800563c:	3301      	adds	r3, #1
 800563e:	6123      	str	r3, [r4, #16]
 8005640:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8005644:	2b00      	cmp	r3, #0
 8005646:	d09e      	beq.n	8005586 <_printf_float+0xa2>
 8005648:	232d      	movs	r3, #45	@ 0x2d
 800564a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800564e:	e79a      	b.n	8005586 <_printf_float+0xa2>
 8005650:	2947      	cmp	r1, #71	@ 0x47
 8005652:	d1bf      	bne.n	80055d4 <_printf_float+0xf0>
 8005654:	2b00      	cmp	r3, #0
 8005656:	d1bd      	bne.n	80055d4 <_printf_float+0xf0>
 8005658:	2301      	movs	r3, #1
 800565a:	e7ba      	b.n	80055d2 <_printf_float+0xee>
 800565c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005660:	d9dc      	bls.n	800561c <_printf_float+0x138>
 8005662:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005666:	d118      	bne.n	800569a <_printf_float+0x1b6>
 8005668:	2900      	cmp	r1, #0
 800566a:	6863      	ldr	r3, [r4, #4]
 800566c:	dd0b      	ble.n	8005686 <_printf_float+0x1a2>
 800566e:	6121      	str	r1, [r4, #16]
 8005670:	b913      	cbnz	r3, 8005678 <_printf_float+0x194>
 8005672:	6822      	ldr	r2, [r4, #0]
 8005674:	07d0      	lsls	r0, r2, #31
 8005676:	d502      	bpl.n	800567e <_printf_float+0x19a>
 8005678:	3301      	adds	r3, #1
 800567a:	440b      	add	r3, r1
 800567c:	6123      	str	r3, [r4, #16]
 800567e:	f04f 0900 	mov.w	r9, #0
 8005682:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005684:	e7dc      	b.n	8005640 <_printf_float+0x15c>
 8005686:	b913      	cbnz	r3, 800568e <_printf_float+0x1aa>
 8005688:	6822      	ldr	r2, [r4, #0]
 800568a:	07d2      	lsls	r2, r2, #31
 800568c:	d501      	bpl.n	8005692 <_printf_float+0x1ae>
 800568e:	3302      	adds	r3, #2
 8005690:	e7f4      	b.n	800567c <_printf_float+0x198>
 8005692:	2301      	movs	r3, #1
 8005694:	e7f2      	b.n	800567c <_printf_float+0x198>
 8005696:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800569a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800569c:	4299      	cmp	r1, r3
 800569e:	db05      	blt.n	80056ac <_printf_float+0x1c8>
 80056a0:	6823      	ldr	r3, [r4, #0]
 80056a2:	6121      	str	r1, [r4, #16]
 80056a4:	07d8      	lsls	r0, r3, #31
 80056a6:	d5ea      	bpl.n	800567e <_printf_float+0x19a>
 80056a8:	1c4b      	adds	r3, r1, #1
 80056aa:	e7e7      	b.n	800567c <_printf_float+0x198>
 80056ac:	2900      	cmp	r1, #0
 80056ae:	bfcc      	ite	gt
 80056b0:	2201      	movgt	r2, #1
 80056b2:	f1c1 0202 	rsble	r2, r1, #2
 80056b6:	4413      	add	r3, r2
 80056b8:	e7e0      	b.n	800567c <_printf_float+0x198>
 80056ba:	6823      	ldr	r3, [r4, #0]
 80056bc:	055a      	lsls	r2, r3, #21
 80056be:	d407      	bmi.n	80056d0 <_printf_float+0x1ec>
 80056c0:	6923      	ldr	r3, [r4, #16]
 80056c2:	4642      	mov	r2, r8
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	d12b      	bne.n	8005726 <_printf_float+0x242>
 80056ce:	e764      	b.n	800559a <_printf_float+0xb6>
 80056d0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056d4:	f240 80dc 	bls.w	8005890 <_printf_float+0x3ac>
 80056d8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80056dc:	2200      	movs	r2, #0
 80056de:	2300      	movs	r3, #0
 80056e0:	f7fb f962 	bl	80009a8 <__aeabi_dcmpeq>
 80056e4:	2800      	cmp	r0, #0
 80056e6:	d033      	beq.n	8005750 <_printf_float+0x26c>
 80056e8:	2301      	movs	r3, #1
 80056ea:	4631      	mov	r1, r6
 80056ec:	4628      	mov	r0, r5
 80056ee:	4a35      	ldr	r2, [pc, #212]	@ (80057c4 <_printf_float+0x2e0>)
 80056f0:	47b8      	blx	r7
 80056f2:	3001      	adds	r0, #1
 80056f4:	f43f af51 	beq.w	800559a <_printf_float+0xb6>
 80056f8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 80056fc:	4543      	cmp	r3, r8
 80056fe:	db02      	blt.n	8005706 <_printf_float+0x222>
 8005700:	6823      	ldr	r3, [r4, #0]
 8005702:	07d8      	lsls	r0, r3, #31
 8005704:	d50f      	bpl.n	8005726 <_printf_float+0x242>
 8005706:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800570a:	4631      	mov	r1, r6
 800570c:	4628      	mov	r0, r5
 800570e:	47b8      	blx	r7
 8005710:	3001      	adds	r0, #1
 8005712:	f43f af42 	beq.w	800559a <_printf_float+0xb6>
 8005716:	f04f 0900 	mov.w	r9, #0
 800571a:	f108 38ff 	add.w	r8, r8, #4294967295
 800571e:	f104 0a1a 	add.w	sl, r4, #26
 8005722:	45c8      	cmp	r8, r9
 8005724:	dc09      	bgt.n	800573a <_printf_float+0x256>
 8005726:	6823      	ldr	r3, [r4, #0]
 8005728:	079b      	lsls	r3, r3, #30
 800572a:	f100 8102 	bmi.w	8005932 <_printf_float+0x44e>
 800572e:	68e0      	ldr	r0, [r4, #12]
 8005730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8005732:	4298      	cmp	r0, r3
 8005734:	bfb8      	it	lt
 8005736:	4618      	movlt	r0, r3
 8005738:	e731      	b.n	800559e <_printf_float+0xba>
 800573a:	2301      	movs	r3, #1
 800573c:	4652      	mov	r2, sl
 800573e:	4631      	mov	r1, r6
 8005740:	4628      	mov	r0, r5
 8005742:	47b8      	blx	r7
 8005744:	3001      	adds	r0, #1
 8005746:	f43f af28 	beq.w	800559a <_printf_float+0xb6>
 800574a:	f109 0901 	add.w	r9, r9, #1
 800574e:	e7e8      	b.n	8005722 <_printf_float+0x23e>
 8005750:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005752:	2b00      	cmp	r3, #0
 8005754:	dc38      	bgt.n	80057c8 <_printf_float+0x2e4>
 8005756:	2301      	movs	r3, #1
 8005758:	4631      	mov	r1, r6
 800575a:	4628      	mov	r0, r5
 800575c:	4a19      	ldr	r2, [pc, #100]	@ (80057c4 <_printf_float+0x2e0>)
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	f43f af1a 	beq.w	800559a <_printf_float+0xb6>
 8005766:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 800576a:	ea59 0303 	orrs.w	r3, r9, r3
 800576e:	d102      	bne.n	8005776 <_printf_float+0x292>
 8005770:	6823      	ldr	r3, [r4, #0]
 8005772:	07d9      	lsls	r1, r3, #31
 8005774:	d5d7      	bpl.n	8005726 <_printf_float+0x242>
 8005776:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800577a:	4631      	mov	r1, r6
 800577c:	4628      	mov	r0, r5
 800577e:	47b8      	blx	r7
 8005780:	3001      	adds	r0, #1
 8005782:	f43f af0a 	beq.w	800559a <_printf_float+0xb6>
 8005786:	f04f 0a00 	mov.w	sl, #0
 800578a:	f104 0b1a 	add.w	fp, r4, #26
 800578e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005790:	425b      	negs	r3, r3
 8005792:	4553      	cmp	r3, sl
 8005794:	dc01      	bgt.n	800579a <_printf_float+0x2b6>
 8005796:	464b      	mov	r3, r9
 8005798:	e793      	b.n	80056c2 <_printf_float+0x1de>
 800579a:	2301      	movs	r3, #1
 800579c:	465a      	mov	r2, fp
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	f43f aef8 	beq.w	800559a <_printf_float+0xb6>
 80057aa:	f10a 0a01 	add.w	sl, sl, #1
 80057ae:	e7ee      	b.n	800578e <_printf_float+0x2aa>
 80057b0:	7fefffff 	.word	0x7fefffff
 80057b4:	08009fe4 	.word	0x08009fe4
 80057b8:	08009fe8 	.word	0x08009fe8
 80057bc:	08009fec 	.word	0x08009fec
 80057c0:	08009ff0 	.word	0x08009ff0
 80057c4:	08009ff4 	.word	0x08009ff4
 80057c8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057ca:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 80057ce:	4553      	cmp	r3, sl
 80057d0:	bfa8      	it	ge
 80057d2:	4653      	movge	r3, sl
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	4699      	mov	r9, r3
 80057d8:	dc36      	bgt.n	8005848 <_printf_float+0x364>
 80057da:	f04f 0b00 	mov.w	fp, #0
 80057de:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80057e2:	f104 021a 	add.w	r2, r4, #26
 80057e6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80057e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80057ea:	eba3 0309 	sub.w	r3, r3, r9
 80057ee:	455b      	cmp	r3, fp
 80057f0:	dc31      	bgt.n	8005856 <_printf_float+0x372>
 80057f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80057f4:	459a      	cmp	sl, r3
 80057f6:	dc3a      	bgt.n	800586e <_printf_float+0x38a>
 80057f8:	6823      	ldr	r3, [r4, #0]
 80057fa:	07da      	lsls	r2, r3, #31
 80057fc:	d437      	bmi.n	800586e <_printf_float+0x38a>
 80057fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005800:	ebaa 0903 	sub.w	r9, sl, r3
 8005804:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005806:	ebaa 0303 	sub.w	r3, sl, r3
 800580a:	4599      	cmp	r9, r3
 800580c:	bfa8      	it	ge
 800580e:	4699      	movge	r9, r3
 8005810:	f1b9 0f00 	cmp.w	r9, #0
 8005814:	dc33      	bgt.n	800587e <_printf_float+0x39a>
 8005816:	f04f 0800 	mov.w	r8, #0
 800581a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800581e:	f104 0b1a 	add.w	fp, r4, #26
 8005822:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005824:	ebaa 0303 	sub.w	r3, sl, r3
 8005828:	eba3 0309 	sub.w	r3, r3, r9
 800582c:	4543      	cmp	r3, r8
 800582e:	f77f af7a 	ble.w	8005726 <_printf_float+0x242>
 8005832:	2301      	movs	r3, #1
 8005834:	465a      	mov	r2, fp
 8005836:	4631      	mov	r1, r6
 8005838:	4628      	mov	r0, r5
 800583a:	47b8      	blx	r7
 800583c:	3001      	adds	r0, #1
 800583e:	f43f aeac 	beq.w	800559a <_printf_float+0xb6>
 8005842:	f108 0801 	add.w	r8, r8, #1
 8005846:	e7ec      	b.n	8005822 <_printf_float+0x33e>
 8005848:	4642      	mov	r2, r8
 800584a:	4631      	mov	r1, r6
 800584c:	4628      	mov	r0, r5
 800584e:	47b8      	blx	r7
 8005850:	3001      	adds	r0, #1
 8005852:	d1c2      	bne.n	80057da <_printf_float+0x2f6>
 8005854:	e6a1      	b.n	800559a <_printf_float+0xb6>
 8005856:	2301      	movs	r3, #1
 8005858:	4631      	mov	r1, r6
 800585a:	4628      	mov	r0, r5
 800585c:	920a      	str	r2, [sp, #40]	@ 0x28
 800585e:	47b8      	blx	r7
 8005860:	3001      	adds	r0, #1
 8005862:	f43f ae9a 	beq.w	800559a <_printf_float+0xb6>
 8005866:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005868:	f10b 0b01 	add.w	fp, fp, #1
 800586c:	e7bb      	b.n	80057e6 <_printf_float+0x302>
 800586e:	4631      	mov	r1, r6
 8005870:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8005874:	4628      	mov	r0, r5
 8005876:	47b8      	blx	r7
 8005878:	3001      	adds	r0, #1
 800587a:	d1c0      	bne.n	80057fe <_printf_float+0x31a>
 800587c:	e68d      	b.n	800559a <_printf_float+0xb6>
 800587e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005880:	464b      	mov	r3, r9
 8005882:	4631      	mov	r1, r6
 8005884:	4628      	mov	r0, r5
 8005886:	4442      	add	r2, r8
 8005888:	47b8      	blx	r7
 800588a:	3001      	adds	r0, #1
 800588c:	d1c3      	bne.n	8005816 <_printf_float+0x332>
 800588e:	e684      	b.n	800559a <_printf_float+0xb6>
 8005890:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8005894:	f1ba 0f01 	cmp.w	sl, #1
 8005898:	dc01      	bgt.n	800589e <_printf_float+0x3ba>
 800589a:	07db      	lsls	r3, r3, #31
 800589c:	d536      	bpl.n	800590c <_printf_float+0x428>
 800589e:	2301      	movs	r3, #1
 80058a0:	4642      	mov	r2, r8
 80058a2:	4631      	mov	r1, r6
 80058a4:	4628      	mov	r0, r5
 80058a6:	47b8      	blx	r7
 80058a8:	3001      	adds	r0, #1
 80058aa:	f43f ae76 	beq.w	800559a <_printf_float+0xb6>
 80058ae:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80058b2:	4631      	mov	r1, r6
 80058b4:	4628      	mov	r0, r5
 80058b6:	47b8      	blx	r7
 80058b8:	3001      	adds	r0, #1
 80058ba:	f43f ae6e 	beq.w	800559a <_printf_float+0xb6>
 80058be:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 80058c2:	2200      	movs	r2, #0
 80058c4:	2300      	movs	r3, #0
 80058c6:	f10a 3aff 	add.w	sl, sl, #4294967295
 80058ca:	f7fb f86d 	bl	80009a8 <__aeabi_dcmpeq>
 80058ce:	b9c0      	cbnz	r0, 8005902 <_printf_float+0x41e>
 80058d0:	4653      	mov	r3, sl
 80058d2:	f108 0201 	add.w	r2, r8, #1
 80058d6:	4631      	mov	r1, r6
 80058d8:	4628      	mov	r0, r5
 80058da:	47b8      	blx	r7
 80058dc:	3001      	adds	r0, #1
 80058de:	d10c      	bne.n	80058fa <_printf_float+0x416>
 80058e0:	e65b      	b.n	800559a <_printf_float+0xb6>
 80058e2:	2301      	movs	r3, #1
 80058e4:	465a      	mov	r2, fp
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	f43f ae54 	beq.w	800559a <_printf_float+0xb6>
 80058f2:	f108 0801 	add.w	r8, r8, #1
 80058f6:	45d0      	cmp	r8, sl
 80058f8:	dbf3      	blt.n	80058e2 <_printf_float+0x3fe>
 80058fa:	464b      	mov	r3, r9
 80058fc:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005900:	e6e0      	b.n	80056c4 <_printf_float+0x1e0>
 8005902:	f04f 0800 	mov.w	r8, #0
 8005906:	f104 0b1a 	add.w	fp, r4, #26
 800590a:	e7f4      	b.n	80058f6 <_printf_float+0x412>
 800590c:	2301      	movs	r3, #1
 800590e:	4642      	mov	r2, r8
 8005910:	e7e1      	b.n	80058d6 <_printf_float+0x3f2>
 8005912:	2301      	movs	r3, #1
 8005914:	464a      	mov	r2, r9
 8005916:	4631      	mov	r1, r6
 8005918:	4628      	mov	r0, r5
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	f43f ae3c 	beq.w	800559a <_printf_float+0xb6>
 8005922:	f108 0801 	add.w	r8, r8, #1
 8005926:	68e3      	ldr	r3, [r4, #12]
 8005928:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 800592a:	1a5b      	subs	r3, r3, r1
 800592c:	4543      	cmp	r3, r8
 800592e:	dcf0      	bgt.n	8005912 <_printf_float+0x42e>
 8005930:	e6fd      	b.n	800572e <_printf_float+0x24a>
 8005932:	f04f 0800 	mov.w	r8, #0
 8005936:	f104 0919 	add.w	r9, r4, #25
 800593a:	e7f4      	b.n	8005926 <_printf_float+0x442>

0800593c <_printf_common>:
 800593c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005940:	4616      	mov	r6, r2
 8005942:	4698      	mov	r8, r3
 8005944:	688a      	ldr	r2, [r1, #8]
 8005946:	690b      	ldr	r3, [r1, #16]
 8005948:	4607      	mov	r7, r0
 800594a:	4293      	cmp	r3, r2
 800594c:	bfb8      	it	lt
 800594e:	4613      	movlt	r3, r2
 8005950:	6033      	str	r3, [r6, #0]
 8005952:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005956:	460c      	mov	r4, r1
 8005958:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800595c:	b10a      	cbz	r2, 8005962 <_printf_common+0x26>
 800595e:	3301      	adds	r3, #1
 8005960:	6033      	str	r3, [r6, #0]
 8005962:	6823      	ldr	r3, [r4, #0]
 8005964:	0699      	lsls	r1, r3, #26
 8005966:	bf42      	ittt	mi
 8005968:	6833      	ldrmi	r3, [r6, #0]
 800596a:	3302      	addmi	r3, #2
 800596c:	6033      	strmi	r3, [r6, #0]
 800596e:	6825      	ldr	r5, [r4, #0]
 8005970:	f015 0506 	ands.w	r5, r5, #6
 8005974:	d106      	bne.n	8005984 <_printf_common+0x48>
 8005976:	f104 0a19 	add.w	sl, r4, #25
 800597a:	68e3      	ldr	r3, [r4, #12]
 800597c:	6832      	ldr	r2, [r6, #0]
 800597e:	1a9b      	subs	r3, r3, r2
 8005980:	42ab      	cmp	r3, r5
 8005982:	dc2b      	bgt.n	80059dc <_printf_common+0xa0>
 8005984:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005988:	6822      	ldr	r2, [r4, #0]
 800598a:	3b00      	subs	r3, #0
 800598c:	bf18      	it	ne
 800598e:	2301      	movne	r3, #1
 8005990:	0692      	lsls	r2, r2, #26
 8005992:	d430      	bmi.n	80059f6 <_printf_common+0xba>
 8005994:	4641      	mov	r1, r8
 8005996:	4638      	mov	r0, r7
 8005998:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800599c:	47c8      	blx	r9
 800599e:	3001      	adds	r0, #1
 80059a0:	d023      	beq.n	80059ea <_printf_common+0xae>
 80059a2:	6823      	ldr	r3, [r4, #0]
 80059a4:	6922      	ldr	r2, [r4, #16]
 80059a6:	f003 0306 	and.w	r3, r3, #6
 80059aa:	2b04      	cmp	r3, #4
 80059ac:	bf14      	ite	ne
 80059ae:	2500      	movne	r5, #0
 80059b0:	6833      	ldreq	r3, [r6, #0]
 80059b2:	f04f 0600 	mov.w	r6, #0
 80059b6:	bf08      	it	eq
 80059b8:	68e5      	ldreq	r5, [r4, #12]
 80059ba:	f104 041a 	add.w	r4, r4, #26
 80059be:	bf08      	it	eq
 80059c0:	1aed      	subeq	r5, r5, r3
 80059c2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80059c6:	bf08      	it	eq
 80059c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80059cc:	4293      	cmp	r3, r2
 80059ce:	bfc4      	itt	gt
 80059d0:	1a9b      	subgt	r3, r3, r2
 80059d2:	18ed      	addgt	r5, r5, r3
 80059d4:	42b5      	cmp	r5, r6
 80059d6:	d11a      	bne.n	8005a0e <_printf_common+0xd2>
 80059d8:	2000      	movs	r0, #0
 80059da:	e008      	b.n	80059ee <_printf_common+0xb2>
 80059dc:	2301      	movs	r3, #1
 80059de:	4652      	mov	r2, sl
 80059e0:	4641      	mov	r1, r8
 80059e2:	4638      	mov	r0, r7
 80059e4:	47c8      	blx	r9
 80059e6:	3001      	adds	r0, #1
 80059e8:	d103      	bne.n	80059f2 <_printf_common+0xb6>
 80059ea:	f04f 30ff 	mov.w	r0, #4294967295
 80059ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059f2:	3501      	adds	r5, #1
 80059f4:	e7c1      	b.n	800597a <_printf_common+0x3e>
 80059f6:	2030      	movs	r0, #48	@ 0x30
 80059f8:	18e1      	adds	r1, r4, r3
 80059fa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80059fe:	1c5a      	adds	r2, r3, #1
 8005a00:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a04:	4422      	add	r2, r4
 8005a06:	3302      	adds	r3, #2
 8005a08:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a0c:	e7c2      	b.n	8005994 <_printf_common+0x58>
 8005a0e:	2301      	movs	r3, #1
 8005a10:	4622      	mov	r2, r4
 8005a12:	4641      	mov	r1, r8
 8005a14:	4638      	mov	r0, r7
 8005a16:	47c8      	blx	r9
 8005a18:	3001      	adds	r0, #1
 8005a1a:	d0e6      	beq.n	80059ea <_printf_common+0xae>
 8005a1c:	3601      	adds	r6, #1
 8005a1e:	e7d9      	b.n	80059d4 <_printf_common+0x98>

08005a20 <_printf_i>:
 8005a20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a24:	7e0f      	ldrb	r7, [r1, #24]
 8005a26:	4691      	mov	r9, r2
 8005a28:	2f78      	cmp	r7, #120	@ 0x78
 8005a2a:	4680      	mov	r8, r0
 8005a2c:	460c      	mov	r4, r1
 8005a2e:	469a      	mov	sl, r3
 8005a30:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a32:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005a36:	d807      	bhi.n	8005a48 <_printf_i+0x28>
 8005a38:	2f62      	cmp	r7, #98	@ 0x62
 8005a3a:	d80a      	bhi.n	8005a52 <_printf_i+0x32>
 8005a3c:	2f00      	cmp	r7, #0
 8005a3e:	f000 80d3 	beq.w	8005be8 <_printf_i+0x1c8>
 8005a42:	2f58      	cmp	r7, #88	@ 0x58
 8005a44:	f000 80ba 	beq.w	8005bbc <_printf_i+0x19c>
 8005a48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005a4c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005a50:	e03a      	b.n	8005ac8 <_printf_i+0xa8>
 8005a52:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005a56:	2b15      	cmp	r3, #21
 8005a58:	d8f6      	bhi.n	8005a48 <_printf_i+0x28>
 8005a5a:	a101      	add	r1, pc, #4	@ (adr r1, 8005a60 <_printf_i+0x40>)
 8005a5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005a60:	08005ab9 	.word	0x08005ab9
 8005a64:	08005acd 	.word	0x08005acd
 8005a68:	08005a49 	.word	0x08005a49
 8005a6c:	08005a49 	.word	0x08005a49
 8005a70:	08005a49 	.word	0x08005a49
 8005a74:	08005a49 	.word	0x08005a49
 8005a78:	08005acd 	.word	0x08005acd
 8005a7c:	08005a49 	.word	0x08005a49
 8005a80:	08005a49 	.word	0x08005a49
 8005a84:	08005a49 	.word	0x08005a49
 8005a88:	08005a49 	.word	0x08005a49
 8005a8c:	08005bcf 	.word	0x08005bcf
 8005a90:	08005af7 	.word	0x08005af7
 8005a94:	08005b89 	.word	0x08005b89
 8005a98:	08005a49 	.word	0x08005a49
 8005a9c:	08005a49 	.word	0x08005a49
 8005aa0:	08005bf1 	.word	0x08005bf1
 8005aa4:	08005a49 	.word	0x08005a49
 8005aa8:	08005af7 	.word	0x08005af7
 8005aac:	08005a49 	.word	0x08005a49
 8005ab0:	08005a49 	.word	0x08005a49
 8005ab4:	08005b91 	.word	0x08005b91
 8005ab8:	6833      	ldr	r3, [r6, #0]
 8005aba:	1d1a      	adds	r2, r3, #4
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	6032      	str	r2, [r6, #0]
 8005ac0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ac4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005ac8:	2301      	movs	r3, #1
 8005aca:	e09e      	b.n	8005c0a <_printf_i+0x1ea>
 8005acc:	6833      	ldr	r3, [r6, #0]
 8005ace:	6820      	ldr	r0, [r4, #0]
 8005ad0:	1d19      	adds	r1, r3, #4
 8005ad2:	6031      	str	r1, [r6, #0]
 8005ad4:	0606      	lsls	r6, r0, #24
 8005ad6:	d501      	bpl.n	8005adc <_printf_i+0xbc>
 8005ad8:	681d      	ldr	r5, [r3, #0]
 8005ada:	e003      	b.n	8005ae4 <_printf_i+0xc4>
 8005adc:	0645      	lsls	r5, r0, #25
 8005ade:	d5fb      	bpl.n	8005ad8 <_printf_i+0xb8>
 8005ae0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005ae4:	2d00      	cmp	r5, #0
 8005ae6:	da03      	bge.n	8005af0 <_printf_i+0xd0>
 8005ae8:	232d      	movs	r3, #45	@ 0x2d
 8005aea:	426d      	negs	r5, r5
 8005aec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005af0:	230a      	movs	r3, #10
 8005af2:	4859      	ldr	r0, [pc, #356]	@ (8005c58 <_printf_i+0x238>)
 8005af4:	e011      	b.n	8005b1a <_printf_i+0xfa>
 8005af6:	6821      	ldr	r1, [r4, #0]
 8005af8:	6833      	ldr	r3, [r6, #0]
 8005afa:	0608      	lsls	r0, r1, #24
 8005afc:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b00:	d402      	bmi.n	8005b08 <_printf_i+0xe8>
 8005b02:	0649      	lsls	r1, r1, #25
 8005b04:	bf48      	it	mi
 8005b06:	b2ad      	uxthmi	r5, r5
 8005b08:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b0a:	6033      	str	r3, [r6, #0]
 8005b0c:	bf14      	ite	ne
 8005b0e:	230a      	movne	r3, #10
 8005b10:	2308      	moveq	r3, #8
 8005b12:	4851      	ldr	r0, [pc, #324]	@ (8005c58 <_printf_i+0x238>)
 8005b14:	2100      	movs	r1, #0
 8005b16:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b1a:	6866      	ldr	r6, [r4, #4]
 8005b1c:	2e00      	cmp	r6, #0
 8005b1e:	bfa8      	it	ge
 8005b20:	6821      	ldrge	r1, [r4, #0]
 8005b22:	60a6      	str	r6, [r4, #8]
 8005b24:	bfa4      	itt	ge
 8005b26:	f021 0104 	bicge.w	r1, r1, #4
 8005b2a:	6021      	strge	r1, [r4, #0]
 8005b2c:	b90d      	cbnz	r5, 8005b32 <_printf_i+0x112>
 8005b2e:	2e00      	cmp	r6, #0
 8005b30:	d04b      	beq.n	8005bca <_printf_i+0x1aa>
 8005b32:	4616      	mov	r6, r2
 8005b34:	fbb5 f1f3 	udiv	r1, r5, r3
 8005b38:	fb03 5711 	mls	r7, r3, r1, r5
 8005b3c:	5dc7      	ldrb	r7, [r0, r7]
 8005b3e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005b42:	462f      	mov	r7, r5
 8005b44:	42bb      	cmp	r3, r7
 8005b46:	460d      	mov	r5, r1
 8005b48:	d9f4      	bls.n	8005b34 <_printf_i+0x114>
 8005b4a:	2b08      	cmp	r3, #8
 8005b4c:	d10b      	bne.n	8005b66 <_printf_i+0x146>
 8005b4e:	6823      	ldr	r3, [r4, #0]
 8005b50:	07df      	lsls	r7, r3, #31
 8005b52:	d508      	bpl.n	8005b66 <_printf_i+0x146>
 8005b54:	6923      	ldr	r3, [r4, #16]
 8005b56:	6861      	ldr	r1, [r4, #4]
 8005b58:	4299      	cmp	r1, r3
 8005b5a:	bfde      	ittt	le
 8005b5c:	2330      	movle	r3, #48	@ 0x30
 8005b5e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005b62:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005b66:	1b92      	subs	r2, r2, r6
 8005b68:	6122      	str	r2, [r4, #16]
 8005b6a:	464b      	mov	r3, r9
 8005b6c:	4621      	mov	r1, r4
 8005b6e:	4640      	mov	r0, r8
 8005b70:	f8cd a000 	str.w	sl, [sp]
 8005b74:	aa03      	add	r2, sp, #12
 8005b76:	f7ff fee1 	bl	800593c <_printf_common>
 8005b7a:	3001      	adds	r0, #1
 8005b7c:	d14a      	bne.n	8005c14 <_printf_i+0x1f4>
 8005b7e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b82:	b004      	add	sp, #16
 8005b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b88:	6823      	ldr	r3, [r4, #0]
 8005b8a:	f043 0320 	orr.w	r3, r3, #32
 8005b8e:	6023      	str	r3, [r4, #0]
 8005b90:	2778      	movs	r7, #120	@ 0x78
 8005b92:	4832      	ldr	r0, [pc, #200]	@ (8005c5c <_printf_i+0x23c>)
 8005b94:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005b98:	6823      	ldr	r3, [r4, #0]
 8005b9a:	6831      	ldr	r1, [r6, #0]
 8005b9c:	061f      	lsls	r7, r3, #24
 8005b9e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005ba2:	d402      	bmi.n	8005baa <_printf_i+0x18a>
 8005ba4:	065f      	lsls	r7, r3, #25
 8005ba6:	bf48      	it	mi
 8005ba8:	b2ad      	uxthmi	r5, r5
 8005baa:	6031      	str	r1, [r6, #0]
 8005bac:	07d9      	lsls	r1, r3, #31
 8005bae:	bf44      	itt	mi
 8005bb0:	f043 0320 	orrmi.w	r3, r3, #32
 8005bb4:	6023      	strmi	r3, [r4, #0]
 8005bb6:	b11d      	cbz	r5, 8005bc0 <_printf_i+0x1a0>
 8005bb8:	2310      	movs	r3, #16
 8005bba:	e7ab      	b.n	8005b14 <_printf_i+0xf4>
 8005bbc:	4826      	ldr	r0, [pc, #152]	@ (8005c58 <_printf_i+0x238>)
 8005bbe:	e7e9      	b.n	8005b94 <_printf_i+0x174>
 8005bc0:	6823      	ldr	r3, [r4, #0]
 8005bc2:	f023 0320 	bic.w	r3, r3, #32
 8005bc6:	6023      	str	r3, [r4, #0]
 8005bc8:	e7f6      	b.n	8005bb8 <_printf_i+0x198>
 8005bca:	4616      	mov	r6, r2
 8005bcc:	e7bd      	b.n	8005b4a <_printf_i+0x12a>
 8005bce:	6833      	ldr	r3, [r6, #0]
 8005bd0:	6825      	ldr	r5, [r4, #0]
 8005bd2:	1d18      	adds	r0, r3, #4
 8005bd4:	6961      	ldr	r1, [r4, #20]
 8005bd6:	6030      	str	r0, [r6, #0]
 8005bd8:	062e      	lsls	r6, r5, #24
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	d501      	bpl.n	8005be2 <_printf_i+0x1c2>
 8005bde:	6019      	str	r1, [r3, #0]
 8005be0:	e002      	b.n	8005be8 <_printf_i+0x1c8>
 8005be2:	0668      	lsls	r0, r5, #25
 8005be4:	d5fb      	bpl.n	8005bde <_printf_i+0x1be>
 8005be6:	8019      	strh	r1, [r3, #0]
 8005be8:	2300      	movs	r3, #0
 8005bea:	4616      	mov	r6, r2
 8005bec:	6123      	str	r3, [r4, #16]
 8005bee:	e7bc      	b.n	8005b6a <_printf_i+0x14a>
 8005bf0:	6833      	ldr	r3, [r6, #0]
 8005bf2:	2100      	movs	r1, #0
 8005bf4:	1d1a      	adds	r2, r3, #4
 8005bf6:	6032      	str	r2, [r6, #0]
 8005bf8:	681e      	ldr	r6, [r3, #0]
 8005bfa:	6862      	ldr	r2, [r4, #4]
 8005bfc:	4630      	mov	r0, r6
 8005bfe:	f000 f9e8 	bl	8005fd2 <memchr>
 8005c02:	b108      	cbz	r0, 8005c08 <_printf_i+0x1e8>
 8005c04:	1b80      	subs	r0, r0, r6
 8005c06:	6060      	str	r0, [r4, #4]
 8005c08:	6863      	ldr	r3, [r4, #4]
 8005c0a:	6123      	str	r3, [r4, #16]
 8005c0c:	2300      	movs	r3, #0
 8005c0e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c12:	e7aa      	b.n	8005b6a <_printf_i+0x14a>
 8005c14:	4632      	mov	r2, r6
 8005c16:	4649      	mov	r1, r9
 8005c18:	4640      	mov	r0, r8
 8005c1a:	6923      	ldr	r3, [r4, #16]
 8005c1c:	47d0      	blx	sl
 8005c1e:	3001      	adds	r0, #1
 8005c20:	d0ad      	beq.n	8005b7e <_printf_i+0x15e>
 8005c22:	6823      	ldr	r3, [r4, #0]
 8005c24:	079b      	lsls	r3, r3, #30
 8005c26:	d413      	bmi.n	8005c50 <_printf_i+0x230>
 8005c28:	68e0      	ldr	r0, [r4, #12]
 8005c2a:	9b03      	ldr	r3, [sp, #12]
 8005c2c:	4298      	cmp	r0, r3
 8005c2e:	bfb8      	it	lt
 8005c30:	4618      	movlt	r0, r3
 8005c32:	e7a6      	b.n	8005b82 <_printf_i+0x162>
 8005c34:	2301      	movs	r3, #1
 8005c36:	4632      	mov	r2, r6
 8005c38:	4649      	mov	r1, r9
 8005c3a:	4640      	mov	r0, r8
 8005c3c:	47d0      	blx	sl
 8005c3e:	3001      	adds	r0, #1
 8005c40:	d09d      	beq.n	8005b7e <_printf_i+0x15e>
 8005c42:	3501      	adds	r5, #1
 8005c44:	68e3      	ldr	r3, [r4, #12]
 8005c46:	9903      	ldr	r1, [sp, #12]
 8005c48:	1a5b      	subs	r3, r3, r1
 8005c4a:	42ab      	cmp	r3, r5
 8005c4c:	dcf2      	bgt.n	8005c34 <_printf_i+0x214>
 8005c4e:	e7eb      	b.n	8005c28 <_printf_i+0x208>
 8005c50:	2500      	movs	r5, #0
 8005c52:	f104 0619 	add.w	r6, r4, #25
 8005c56:	e7f5      	b.n	8005c44 <_printf_i+0x224>
 8005c58:	08009ff6 	.word	0x08009ff6
 8005c5c:	0800a007 	.word	0x0800a007

08005c60 <std>:
 8005c60:	2300      	movs	r3, #0
 8005c62:	b510      	push	{r4, lr}
 8005c64:	4604      	mov	r4, r0
 8005c66:	e9c0 3300 	strd	r3, r3, [r0]
 8005c6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005c6e:	6083      	str	r3, [r0, #8]
 8005c70:	8181      	strh	r1, [r0, #12]
 8005c72:	6643      	str	r3, [r0, #100]	@ 0x64
 8005c74:	81c2      	strh	r2, [r0, #14]
 8005c76:	6183      	str	r3, [r0, #24]
 8005c78:	4619      	mov	r1, r3
 8005c7a:	2208      	movs	r2, #8
 8005c7c:	305c      	adds	r0, #92	@ 0x5c
 8005c7e:	f000 f928 	bl	8005ed2 <memset>
 8005c82:	4b0d      	ldr	r3, [pc, #52]	@ (8005cb8 <std+0x58>)
 8005c84:	6224      	str	r4, [r4, #32]
 8005c86:	6263      	str	r3, [r4, #36]	@ 0x24
 8005c88:	4b0c      	ldr	r3, [pc, #48]	@ (8005cbc <std+0x5c>)
 8005c8a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005c8c:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc0 <std+0x60>)
 8005c8e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005c90:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc4 <std+0x64>)
 8005c92:	6323      	str	r3, [r4, #48]	@ 0x30
 8005c94:	4b0c      	ldr	r3, [pc, #48]	@ (8005cc8 <std+0x68>)
 8005c96:	429c      	cmp	r4, r3
 8005c98:	d006      	beq.n	8005ca8 <std+0x48>
 8005c9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005c9e:	4294      	cmp	r4, r2
 8005ca0:	d002      	beq.n	8005ca8 <std+0x48>
 8005ca2:	33d0      	adds	r3, #208	@ 0xd0
 8005ca4:	429c      	cmp	r4, r3
 8005ca6:	d105      	bne.n	8005cb4 <std+0x54>
 8005ca8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005cac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005cb0:	f000 b98c 	b.w	8005fcc <__retarget_lock_init_recursive>
 8005cb4:	bd10      	pop	{r4, pc}
 8005cb6:	bf00      	nop
 8005cb8:	08005e4d 	.word	0x08005e4d
 8005cbc:	08005e6f 	.word	0x08005e6f
 8005cc0:	08005ea7 	.word	0x08005ea7
 8005cc4:	08005ecb 	.word	0x08005ecb
 8005cc8:	200005dc 	.word	0x200005dc

08005ccc <stdio_exit_handler>:
 8005ccc:	4a02      	ldr	r2, [pc, #8]	@ (8005cd8 <stdio_exit_handler+0xc>)
 8005cce:	4903      	ldr	r1, [pc, #12]	@ (8005cdc <stdio_exit_handler+0x10>)
 8005cd0:	4803      	ldr	r0, [pc, #12]	@ (8005ce0 <stdio_exit_handler+0x14>)
 8005cd2:	f000 b869 	b.w	8005da8 <_fwalk_sglue>
 8005cd6:	bf00      	nop
 8005cd8:	2000003c 	.word	0x2000003c
 8005cdc:	0800795d 	.word	0x0800795d
 8005ce0:	2000004c 	.word	0x2000004c

08005ce4 <cleanup_stdio>:
 8005ce4:	6841      	ldr	r1, [r0, #4]
 8005ce6:	4b0c      	ldr	r3, [pc, #48]	@ (8005d18 <cleanup_stdio+0x34>)
 8005ce8:	b510      	push	{r4, lr}
 8005cea:	4299      	cmp	r1, r3
 8005cec:	4604      	mov	r4, r0
 8005cee:	d001      	beq.n	8005cf4 <cleanup_stdio+0x10>
 8005cf0:	f001 fe34 	bl	800795c <_fflush_r>
 8005cf4:	68a1      	ldr	r1, [r4, #8]
 8005cf6:	4b09      	ldr	r3, [pc, #36]	@ (8005d1c <cleanup_stdio+0x38>)
 8005cf8:	4299      	cmp	r1, r3
 8005cfa:	d002      	beq.n	8005d02 <cleanup_stdio+0x1e>
 8005cfc:	4620      	mov	r0, r4
 8005cfe:	f001 fe2d 	bl	800795c <_fflush_r>
 8005d02:	68e1      	ldr	r1, [r4, #12]
 8005d04:	4b06      	ldr	r3, [pc, #24]	@ (8005d20 <cleanup_stdio+0x3c>)
 8005d06:	4299      	cmp	r1, r3
 8005d08:	d004      	beq.n	8005d14 <cleanup_stdio+0x30>
 8005d0a:	4620      	mov	r0, r4
 8005d0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d10:	f001 be24 	b.w	800795c <_fflush_r>
 8005d14:	bd10      	pop	{r4, pc}
 8005d16:	bf00      	nop
 8005d18:	200005dc 	.word	0x200005dc
 8005d1c:	20000644 	.word	0x20000644
 8005d20:	200006ac 	.word	0x200006ac

08005d24 <global_stdio_init.part.0>:
 8005d24:	b510      	push	{r4, lr}
 8005d26:	4b0b      	ldr	r3, [pc, #44]	@ (8005d54 <global_stdio_init.part.0+0x30>)
 8005d28:	4c0b      	ldr	r4, [pc, #44]	@ (8005d58 <global_stdio_init.part.0+0x34>)
 8005d2a:	4a0c      	ldr	r2, [pc, #48]	@ (8005d5c <global_stdio_init.part.0+0x38>)
 8005d2c:	4620      	mov	r0, r4
 8005d2e:	601a      	str	r2, [r3, #0]
 8005d30:	2104      	movs	r1, #4
 8005d32:	2200      	movs	r2, #0
 8005d34:	f7ff ff94 	bl	8005c60 <std>
 8005d38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005d3c:	2201      	movs	r2, #1
 8005d3e:	2109      	movs	r1, #9
 8005d40:	f7ff ff8e 	bl	8005c60 <std>
 8005d44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005d48:	2202      	movs	r2, #2
 8005d4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d4e:	2112      	movs	r1, #18
 8005d50:	f7ff bf86 	b.w	8005c60 <std>
 8005d54:	20000714 	.word	0x20000714
 8005d58:	200005dc 	.word	0x200005dc
 8005d5c:	08005ccd 	.word	0x08005ccd

08005d60 <__sfp_lock_acquire>:
 8005d60:	4801      	ldr	r0, [pc, #4]	@ (8005d68 <__sfp_lock_acquire+0x8>)
 8005d62:	f000 b934 	b.w	8005fce <__retarget_lock_acquire_recursive>
 8005d66:	bf00      	nop
 8005d68:	2000071d 	.word	0x2000071d

08005d6c <__sfp_lock_release>:
 8005d6c:	4801      	ldr	r0, [pc, #4]	@ (8005d74 <__sfp_lock_release+0x8>)
 8005d6e:	f000 b92f 	b.w	8005fd0 <__retarget_lock_release_recursive>
 8005d72:	bf00      	nop
 8005d74:	2000071d 	.word	0x2000071d

08005d78 <__sinit>:
 8005d78:	b510      	push	{r4, lr}
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	f7ff fff0 	bl	8005d60 <__sfp_lock_acquire>
 8005d80:	6a23      	ldr	r3, [r4, #32]
 8005d82:	b11b      	cbz	r3, 8005d8c <__sinit+0x14>
 8005d84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d88:	f7ff bff0 	b.w	8005d6c <__sfp_lock_release>
 8005d8c:	4b04      	ldr	r3, [pc, #16]	@ (8005da0 <__sinit+0x28>)
 8005d8e:	6223      	str	r3, [r4, #32]
 8005d90:	4b04      	ldr	r3, [pc, #16]	@ (8005da4 <__sinit+0x2c>)
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d1f5      	bne.n	8005d84 <__sinit+0xc>
 8005d98:	f7ff ffc4 	bl	8005d24 <global_stdio_init.part.0>
 8005d9c:	e7f2      	b.n	8005d84 <__sinit+0xc>
 8005d9e:	bf00      	nop
 8005da0:	08005ce5 	.word	0x08005ce5
 8005da4:	20000714 	.word	0x20000714

08005da8 <_fwalk_sglue>:
 8005da8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005dac:	4607      	mov	r7, r0
 8005dae:	4688      	mov	r8, r1
 8005db0:	4614      	mov	r4, r2
 8005db2:	2600      	movs	r6, #0
 8005db4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005db8:	f1b9 0901 	subs.w	r9, r9, #1
 8005dbc:	d505      	bpl.n	8005dca <_fwalk_sglue+0x22>
 8005dbe:	6824      	ldr	r4, [r4, #0]
 8005dc0:	2c00      	cmp	r4, #0
 8005dc2:	d1f7      	bne.n	8005db4 <_fwalk_sglue+0xc>
 8005dc4:	4630      	mov	r0, r6
 8005dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005dca:	89ab      	ldrh	r3, [r5, #12]
 8005dcc:	2b01      	cmp	r3, #1
 8005dce:	d907      	bls.n	8005de0 <_fwalk_sglue+0x38>
 8005dd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005dd4:	3301      	adds	r3, #1
 8005dd6:	d003      	beq.n	8005de0 <_fwalk_sglue+0x38>
 8005dd8:	4629      	mov	r1, r5
 8005dda:	4638      	mov	r0, r7
 8005ddc:	47c0      	blx	r8
 8005dde:	4306      	orrs	r6, r0
 8005de0:	3568      	adds	r5, #104	@ 0x68
 8005de2:	e7e9      	b.n	8005db8 <_fwalk_sglue+0x10>

08005de4 <sniprintf>:
 8005de4:	b40c      	push	{r2, r3}
 8005de6:	b530      	push	{r4, r5, lr}
 8005de8:	4b17      	ldr	r3, [pc, #92]	@ (8005e48 <sniprintf+0x64>)
 8005dea:	1e0c      	subs	r4, r1, #0
 8005dec:	681d      	ldr	r5, [r3, #0]
 8005dee:	b09d      	sub	sp, #116	@ 0x74
 8005df0:	da08      	bge.n	8005e04 <sniprintf+0x20>
 8005df2:	238b      	movs	r3, #139	@ 0x8b
 8005df4:	f04f 30ff 	mov.w	r0, #4294967295
 8005df8:	602b      	str	r3, [r5, #0]
 8005dfa:	b01d      	add	sp, #116	@ 0x74
 8005dfc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005e00:	b002      	add	sp, #8
 8005e02:	4770      	bx	lr
 8005e04:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8005e08:	f8ad 3014 	strh.w	r3, [sp, #20]
 8005e0c:	bf0c      	ite	eq
 8005e0e:	4623      	moveq	r3, r4
 8005e10:	f104 33ff 	addne.w	r3, r4, #4294967295
 8005e14:	9304      	str	r3, [sp, #16]
 8005e16:	9307      	str	r3, [sp, #28]
 8005e18:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8005e1c:	9002      	str	r0, [sp, #8]
 8005e1e:	9006      	str	r0, [sp, #24]
 8005e20:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005e24:	4628      	mov	r0, r5
 8005e26:	ab21      	add	r3, sp, #132	@ 0x84
 8005e28:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8005e2a:	a902      	add	r1, sp, #8
 8005e2c:	9301      	str	r3, [sp, #4]
 8005e2e:	f001 fc19 	bl	8007664 <_svfiprintf_r>
 8005e32:	1c43      	adds	r3, r0, #1
 8005e34:	bfbc      	itt	lt
 8005e36:	238b      	movlt	r3, #139	@ 0x8b
 8005e38:	602b      	strlt	r3, [r5, #0]
 8005e3a:	2c00      	cmp	r4, #0
 8005e3c:	d0dd      	beq.n	8005dfa <sniprintf+0x16>
 8005e3e:	2200      	movs	r2, #0
 8005e40:	9b02      	ldr	r3, [sp, #8]
 8005e42:	701a      	strb	r2, [r3, #0]
 8005e44:	e7d9      	b.n	8005dfa <sniprintf+0x16>
 8005e46:	bf00      	nop
 8005e48:	20000048 	.word	0x20000048

08005e4c <__sread>:
 8005e4c:	b510      	push	{r4, lr}
 8005e4e:	460c      	mov	r4, r1
 8005e50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e54:	f000 f86c 	bl	8005f30 <_read_r>
 8005e58:	2800      	cmp	r0, #0
 8005e5a:	bfab      	itete	ge
 8005e5c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e5e:	89a3      	ldrhlt	r3, [r4, #12]
 8005e60:	181b      	addge	r3, r3, r0
 8005e62:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e66:	bfac      	ite	ge
 8005e68:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e6a:	81a3      	strhlt	r3, [r4, #12]
 8005e6c:	bd10      	pop	{r4, pc}

08005e6e <__swrite>:
 8005e6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e72:	461f      	mov	r7, r3
 8005e74:	898b      	ldrh	r3, [r1, #12]
 8005e76:	4605      	mov	r5, r0
 8005e78:	05db      	lsls	r3, r3, #23
 8005e7a:	460c      	mov	r4, r1
 8005e7c:	4616      	mov	r6, r2
 8005e7e:	d505      	bpl.n	8005e8c <__swrite+0x1e>
 8005e80:	2302      	movs	r3, #2
 8005e82:	2200      	movs	r2, #0
 8005e84:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e88:	f000 f840 	bl	8005f0c <_lseek_r>
 8005e8c:	89a3      	ldrh	r3, [r4, #12]
 8005e8e:	4632      	mov	r2, r6
 8005e90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005e94:	81a3      	strh	r3, [r4, #12]
 8005e96:	4628      	mov	r0, r5
 8005e98:	463b      	mov	r3, r7
 8005e9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005e9e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea2:	f000 b857 	b.w	8005f54 <_write_r>

08005ea6 <__sseek>:
 8005ea6:	b510      	push	{r4, lr}
 8005ea8:	460c      	mov	r4, r1
 8005eaa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eae:	f000 f82d 	bl	8005f0c <_lseek_r>
 8005eb2:	1c43      	adds	r3, r0, #1
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	bf15      	itete	ne
 8005eb8:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005eba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ebe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005ec2:	81a3      	strheq	r3, [r4, #12]
 8005ec4:	bf18      	it	ne
 8005ec6:	81a3      	strhne	r3, [r4, #12]
 8005ec8:	bd10      	pop	{r4, pc}

08005eca <__sclose>:
 8005eca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ece:	f000 b80d 	b.w	8005eec <_close_r>

08005ed2 <memset>:
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	4402      	add	r2, r0
 8005ed6:	4293      	cmp	r3, r2
 8005ed8:	d100      	bne.n	8005edc <memset+0xa>
 8005eda:	4770      	bx	lr
 8005edc:	f803 1b01 	strb.w	r1, [r3], #1
 8005ee0:	e7f9      	b.n	8005ed6 <memset+0x4>
	...

08005ee4 <_localeconv_r>:
 8005ee4:	4800      	ldr	r0, [pc, #0]	@ (8005ee8 <_localeconv_r+0x4>)
 8005ee6:	4770      	bx	lr
 8005ee8:	20000188 	.word	0x20000188

08005eec <_close_r>:
 8005eec:	b538      	push	{r3, r4, r5, lr}
 8005eee:	2300      	movs	r3, #0
 8005ef0:	4d05      	ldr	r5, [pc, #20]	@ (8005f08 <_close_r+0x1c>)
 8005ef2:	4604      	mov	r4, r0
 8005ef4:	4608      	mov	r0, r1
 8005ef6:	602b      	str	r3, [r5, #0]
 8005ef8:	f7fc f97f 	bl	80021fa <_close>
 8005efc:	1c43      	adds	r3, r0, #1
 8005efe:	d102      	bne.n	8005f06 <_close_r+0x1a>
 8005f00:	682b      	ldr	r3, [r5, #0]
 8005f02:	b103      	cbz	r3, 8005f06 <_close_r+0x1a>
 8005f04:	6023      	str	r3, [r4, #0]
 8005f06:	bd38      	pop	{r3, r4, r5, pc}
 8005f08:	20000718 	.word	0x20000718

08005f0c <_lseek_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	4604      	mov	r4, r0
 8005f10:	4608      	mov	r0, r1
 8005f12:	4611      	mov	r1, r2
 8005f14:	2200      	movs	r2, #0
 8005f16:	4d05      	ldr	r5, [pc, #20]	@ (8005f2c <_lseek_r+0x20>)
 8005f18:	602a      	str	r2, [r5, #0]
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	f7fc f991 	bl	8002242 <_lseek>
 8005f20:	1c43      	adds	r3, r0, #1
 8005f22:	d102      	bne.n	8005f2a <_lseek_r+0x1e>
 8005f24:	682b      	ldr	r3, [r5, #0]
 8005f26:	b103      	cbz	r3, 8005f2a <_lseek_r+0x1e>
 8005f28:	6023      	str	r3, [r4, #0]
 8005f2a:	bd38      	pop	{r3, r4, r5, pc}
 8005f2c:	20000718 	.word	0x20000718

08005f30 <_read_r>:
 8005f30:	b538      	push	{r3, r4, r5, lr}
 8005f32:	4604      	mov	r4, r0
 8005f34:	4608      	mov	r0, r1
 8005f36:	4611      	mov	r1, r2
 8005f38:	2200      	movs	r2, #0
 8005f3a:	4d05      	ldr	r5, [pc, #20]	@ (8005f50 <_read_r+0x20>)
 8005f3c:	602a      	str	r2, [r5, #0]
 8005f3e:	461a      	mov	r2, r3
 8005f40:	f7fc f922 	bl	8002188 <_read>
 8005f44:	1c43      	adds	r3, r0, #1
 8005f46:	d102      	bne.n	8005f4e <_read_r+0x1e>
 8005f48:	682b      	ldr	r3, [r5, #0]
 8005f4a:	b103      	cbz	r3, 8005f4e <_read_r+0x1e>
 8005f4c:	6023      	str	r3, [r4, #0]
 8005f4e:	bd38      	pop	{r3, r4, r5, pc}
 8005f50:	20000718 	.word	0x20000718

08005f54 <_write_r>:
 8005f54:	b538      	push	{r3, r4, r5, lr}
 8005f56:	4604      	mov	r4, r0
 8005f58:	4608      	mov	r0, r1
 8005f5a:	4611      	mov	r1, r2
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	4d05      	ldr	r5, [pc, #20]	@ (8005f74 <_write_r+0x20>)
 8005f60:	602a      	str	r2, [r5, #0]
 8005f62:	461a      	mov	r2, r3
 8005f64:	f7fc f92d 	bl	80021c2 <_write>
 8005f68:	1c43      	adds	r3, r0, #1
 8005f6a:	d102      	bne.n	8005f72 <_write_r+0x1e>
 8005f6c:	682b      	ldr	r3, [r5, #0]
 8005f6e:	b103      	cbz	r3, 8005f72 <_write_r+0x1e>
 8005f70:	6023      	str	r3, [r4, #0]
 8005f72:	bd38      	pop	{r3, r4, r5, pc}
 8005f74:	20000718 	.word	0x20000718

08005f78 <__errno>:
 8005f78:	4b01      	ldr	r3, [pc, #4]	@ (8005f80 <__errno+0x8>)
 8005f7a:	6818      	ldr	r0, [r3, #0]
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	20000048 	.word	0x20000048

08005f84 <__libc_init_array>:
 8005f84:	b570      	push	{r4, r5, r6, lr}
 8005f86:	2600      	movs	r6, #0
 8005f88:	4d0c      	ldr	r5, [pc, #48]	@ (8005fbc <__libc_init_array+0x38>)
 8005f8a:	4c0d      	ldr	r4, [pc, #52]	@ (8005fc0 <__libc_init_array+0x3c>)
 8005f8c:	1b64      	subs	r4, r4, r5
 8005f8e:	10a4      	asrs	r4, r4, #2
 8005f90:	42a6      	cmp	r6, r4
 8005f92:	d109      	bne.n	8005fa8 <__libc_init_array+0x24>
 8005f94:	f002 fa5a 	bl	800844c <_init>
 8005f98:	2600      	movs	r6, #0
 8005f9a:	4d0a      	ldr	r5, [pc, #40]	@ (8005fc4 <__libc_init_array+0x40>)
 8005f9c:	4c0a      	ldr	r4, [pc, #40]	@ (8005fc8 <__libc_init_array+0x44>)
 8005f9e:	1b64      	subs	r4, r4, r5
 8005fa0:	10a4      	asrs	r4, r4, #2
 8005fa2:	42a6      	cmp	r6, r4
 8005fa4:	d105      	bne.n	8005fb2 <__libc_init_array+0x2e>
 8005fa6:	bd70      	pop	{r4, r5, r6, pc}
 8005fa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fac:	4798      	blx	r3
 8005fae:	3601      	adds	r6, #1
 8005fb0:	e7ee      	b.n	8005f90 <__libc_init_array+0xc>
 8005fb2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fb6:	4798      	blx	r3
 8005fb8:	3601      	adds	r6, #1
 8005fba:	e7f2      	b.n	8005fa2 <__libc_init_array+0x1e>
 8005fbc:	0800a360 	.word	0x0800a360
 8005fc0:	0800a360 	.word	0x0800a360
 8005fc4:	0800a360 	.word	0x0800a360
 8005fc8:	0800a364 	.word	0x0800a364

08005fcc <__retarget_lock_init_recursive>:
 8005fcc:	4770      	bx	lr

08005fce <__retarget_lock_acquire_recursive>:
 8005fce:	4770      	bx	lr

08005fd0 <__retarget_lock_release_recursive>:
 8005fd0:	4770      	bx	lr

08005fd2 <memchr>:
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	b510      	push	{r4, lr}
 8005fd6:	b2c9      	uxtb	r1, r1
 8005fd8:	4402      	add	r2, r0
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	4618      	mov	r0, r3
 8005fde:	d101      	bne.n	8005fe4 <memchr+0x12>
 8005fe0:	2000      	movs	r0, #0
 8005fe2:	e003      	b.n	8005fec <memchr+0x1a>
 8005fe4:	7804      	ldrb	r4, [r0, #0]
 8005fe6:	3301      	adds	r3, #1
 8005fe8:	428c      	cmp	r4, r1
 8005fea:	d1f6      	bne.n	8005fda <memchr+0x8>
 8005fec:	bd10      	pop	{r4, pc}

08005fee <memcpy>:
 8005fee:	440a      	add	r2, r1
 8005ff0:	4291      	cmp	r1, r2
 8005ff2:	f100 33ff 	add.w	r3, r0, #4294967295
 8005ff6:	d100      	bne.n	8005ffa <memcpy+0xc>
 8005ff8:	4770      	bx	lr
 8005ffa:	b510      	push	{r4, lr}
 8005ffc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006000:	4291      	cmp	r1, r2
 8006002:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006006:	d1f9      	bne.n	8005ffc <memcpy+0xe>
 8006008:	bd10      	pop	{r4, pc}

0800600a <quorem>:
 800600a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800600e:	6903      	ldr	r3, [r0, #16]
 8006010:	690c      	ldr	r4, [r1, #16]
 8006012:	4607      	mov	r7, r0
 8006014:	42a3      	cmp	r3, r4
 8006016:	db7e      	blt.n	8006116 <quorem+0x10c>
 8006018:	3c01      	subs	r4, #1
 800601a:	00a3      	lsls	r3, r4, #2
 800601c:	f100 0514 	add.w	r5, r0, #20
 8006020:	f101 0814 	add.w	r8, r1, #20
 8006024:	9300      	str	r3, [sp, #0]
 8006026:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800602a:	9301      	str	r3, [sp, #4]
 800602c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006030:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006034:	3301      	adds	r3, #1
 8006036:	429a      	cmp	r2, r3
 8006038:	fbb2 f6f3 	udiv	r6, r2, r3
 800603c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006040:	d32e      	bcc.n	80060a0 <quorem+0x96>
 8006042:	f04f 0a00 	mov.w	sl, #0
 8006046:	46c4      	mov	ip, r8
 8006048:	46ae      	mov	lr, r5
 800604a:	46d3      	mov	fp, sl
 800604c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006050:	b298      	uxth	r0, r3
 8006052:	fb06 a000 	mla	r0, r6, r0, sl
 8006056:	0c1b      	lsrs	r3, r3, #16
 8006058:	0c02      	lsrs	r2, r0, #16
 800605a:	fb06 2303 	mla	r3, r6, r3, r2
 800605e:	f8de 2000 	ldr.w	r2, [lr]
 8006062:	b280      	uxth	r0, r0
 8006064:	b292      	uxth	r2, r2
 8006066:	1a12      	subs	r2, r2, r0
 8006068:	445a      	add	r2, fp
 800606a:	f8de 0000 	ldr.w	r0, [lr]
 800606e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006072:	b29b      	uxth	r3, r3
 8006074:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006078:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800607c:	b292      	uxth	r2, r2
 800607e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006082:	45e1      	cmp	r9, ip
 8006084:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8006088:	f84e 2b04 	str.w	r2, [lr], #4
 800608c:	d2de      	bcs.n	800604c <quorem+0x42>
 800608e:	9b00      	ldr	r3, [sp, #0]
 8006090:	58eb      	ldr	r3, [r5, r3]
 8006092:	b92b      	cbnz	r3, 80060a0 <quorem+0x96>
 8006094:	9b01      	ldr	r3, [sp, #4]
 8006096:	3b04      	subs	r3, #4
 8006098:	429d      	cmp	r5, r3
 800609a:	461a      	mov	r2, r3
 800609c:	d32f      	bcc.n	80060fe <quorem+0xf4>
 800609e:	613c      	str	r4, [r7, #16]
 80060a0:	4638      	mov	r0, r7
 80060a2:	f001 f97b 	bl	800739c <__mcmp>
 80060a6:	2800      	cmp	r0, #0
 80060a8:	db25      	blt.n	80060f6 <quorem+0xec>
 80060aa:	4629      	mov	r1, r5
 80060ac:	2000      	movs	r0, #0
 80060ae:	f858 2b04 	ldr.w	r2, [r8], #4
 80060b2:	f8d1 c000 	ldr.w	ip, [r1]
 80060b6:	fa1f fe82 	uxth.w	lr, r2
 80060ba:	fa1f f38c 	uxth.w	r3, ip
 80060be:	eba3 030e 	sub.w	r3, r3, lr
 80060c2:	4403      	add	r3, r0
 80060c4:	0c12      	lsrs	r2, r2, #16
 80060c6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060ca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060d4:	45c1      	cmp	r9, r8
 80060d6:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060da:	f841 3b04 	str.w	r3, [r1], #4
 80060de:	d2e6      	bcs.n	80060ae <quorem+0xa4>
 80060e0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060e4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060e8:	b922      	cbnz	r2, 80060f4 <quorem+0xea>
 80060ea:	3b04      	subs	r3, #4
 80060ec:	429d      	cmp	r5, r3
 80060ee:	461a      	mov	r2, r3
 80060f0:	d30b      	bcc.n	800610a <quorem+0x100>
 80060f2:	613c      	str	r4, [r7, #16]
 80060f4:	3601      	adds	r6, #1
 80060f6:	4630      	mov	r0, r6
 80060f8:	b003      	add	sp, #12
 80060fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060fe:	6812      	ldr	r2, [r2, #0]
 8006100:	3b04      	subs	r3, #4
 8006102:	2a00      	cmp	r2, #0
 8006104:	d1cb      	bne.n	800609e <quorem+0x94>
 8006106:	3c01      	subs	r4, #1
 8006108:	e7c6      	b.n	8006098 <quorem+0x8e>
 800610a:	6812      	ldr	r2, [r2, #0]
 800610c:	3b04      	subs	r3, #4
 800610e:	2a00      	cmp	r2, #0
 8006110:	d1ef      	bne.n	80060f2 <quorem+0xe8>
 8006112:	3c01      	subs	r4, #1
 8006114:	e7ea      	b.n	80060ec <quorem+0xe2>
 8006116:	2000      	movs	r0, #0
 8006118:	e7ee      	b.n	80060f8 <quorem+0xee>
 800611a:	0000      	movs	r0, r0
 800611c:	0000      	movs	r0, r0
	...

08006120 <_dtoa_r>:
 8006120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006124:	4614      	mov	r4, r2
 8006126:	461d      	mov	r5, r3
 8006128:	69c7      	ldr	r7, [r0, #28]
 800612a:	b097      	sub	sp, #92	@ 0x5c
 800612c:	4683      	mov	fp, r0
 800612e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8006132:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8006134:	b97f      	cbnz	r7, 8006156 <_dtoa_r+0x36>
 8006136:	2010      	movs	r0, #16
 8006138:	f000 fe02 	bl	8006d40 <malloc>
 800613c:	4602      	mov	r2, r0
 800613e:	f8cb 001c 	str.w	r0, [fp, #28]
 8006142:	b920      	cbnz	r0, 800614e <_dtoa_r+0x2e>
 8006144:	21ef      	movs	r1, #239	@ 0xef
 8006146:	4ba8      	ldr	r3, [pc, #672]	@ (80063e8 <_dtoa_r+0x2c8>)
 8006148:	48a8      	ldr	r0, [pc, #672]	@ (80063ec <_dtoa_r+0x2cc>)
 800614a:	f001 fc59 	bl	8007a00 <__assert_func>
 800614e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006152:	6007      	str	r7, [r0, #0]
 8006154:	60c7      	str	r7, [r0, #12]
 8006156:	f8db 301c 	ldr.w	r3, [fp, #28]
 800615a:	6819      	ldr	r1, [r3, #0]
 800615c:	b159      	cbz	r1, 8006176 <_dtoa_r+0x56>
 800615e:	685a      	ldr	r2, [r3, #4]
 8006160:	2301      	movs	r3, #1
 8006162:	4093      	lsls	r3, r2
 8006164:	604a      	str	r2, [r1, #4]
 8006166:	608b      	str	r3, [r1, #8]
 8006168:	4658      	mov	r0, fp
 800616a:	f000 fedf 	bl	8006f2c <_Bfree>
 800616e:	2200      	movs	r2, #0
 8006170:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006174:	601a      	str	r2, [r3, #0]
 8006176:	1e2b      	subs	r3, r5, #0
 8006178:	bfaf      	iteee	ge
 800617a:	2300      	movge	r3, #0
 800617c:	2201      	movlt	r2, #1
 800617e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006182:	9303      	strlt	r3, [sp, #12]
 8006184:	bfa8      	it	ge
 8006186:	6033      	strge	r3, [r6, #0]
 8006188:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800618c:	4b98      	ldr	r3, [pc, #608]	@ (80063f0 <_dtoa_r+0x2d0>)
 800618e:	bfb8      	it	lt
 8006190:	6032      	strlt	r2, [r6, #0]
 8006192:	ea33 0308 	bics.w	r3, r3, r8
 8006196:	d112      	bne.n	80061be <_dtoa_r+0x9e>
 8006198:	f242 730f 	movw	r3, #9999	@ 0x270f
 800619c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800619e:	6013      	str	r3, [r2, #0]
 80061a0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80061a4:	4323      	orrs	r3, r4
 80061a6:	f000 8550 	beq.w	8006c4a <_dtoa_r+0xb2a>
 80061aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061ac:	f8df a244 	ldr.w	sl, [pc, #580]	@ 80063f4 <_dtoa_r+0x2d4>
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	f000 8552 	beq.w	8006c5a <_dtoa_r+0xb3a>
 80061b6:	f10a 0303 	add.w	r3, sl, #3
 80061ba:	f000 bd4c 	b.w	8006c56 <_dtoa_r+0xb36>
 80061be:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80061c2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80061c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80061ca:	2200      	movs	r2, #0
 80061cc:	2300      	movs	r3, #0
 80061ce:	f7fa fbeb 	bl	80009a8 <__aeabi_dcmpeq>
 80061d2:	4607      	mov	r7, r0
 80061d4:	b158      	cbz	r0, 80061ee <_dtoa_r+0xce>
 80061d6:	2301      	movs	r3, #1
 80061d8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80061da:	6013      	str	r3, [r2, #0]
 80061dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80061de:	b113      	cbz	r3, 80061e6 <_dtoa_r+0xc6>
 80061e0:	4b85      	ldr	r3, [pc, #532]	@ (80063f8 <_dtoa_r+0x2d8>)
 80061e2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80061e4:	6013      	str	r3, [r2, #0]
 80061e6:	f8df a214 	ldr.w	sl, [pc, #532]	@ 80063fc <_dtoa_r+0x2dc>
 80061ea:	f000 bd36 	b.w	8006c5a <_dtoa_r+0xb3a>
 80061ee:	ab14      	add	r3, sp, #80	@ 0x50
 80061f0:	9301      	str	r3, [sp, #4]
 80061f2:	ab15      	add	r3, sp, #84	@ 0x54
 80061f4:	9300      	str	r3, [sp, #0]
 80061f6:	4658      	mov	r0, fp
 80061f8:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 80061fc:	f001 f97e 	bl	80074fc <__d2b>
 8006200:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8006204:	4681      	mov	r9, r0
 8006206:	2e00      	cmp	r6, #0
 8006208:	d077      	beq.n	80062fa <_dtoa_r+0x1da>
 800620a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800620e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006210:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006214:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006218:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800621c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8006220:	9712      	str	r7, [sp, #72]	@ 0x48
 8006222:	4619      	mov	r1, r3
 8006224:	2200      	movs	r2, #0
 8006226:	4b76      	ldr	r3, [pc, #472]	@ (8006400 <_dtoa_r+0x2e0>)
 8006228:	f7f9 ff9e 	bl	8000168 <__aeabi_dsub>
 800622c:	a368      	add	r3, pc, #416	@ (adr r3, 80063d0 <_dtoa_r+0x2b0>)
 800622e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006232:	f7fa f951 	bl	80004d8 <__aeabi_dmul>
 8006236:	a368      	add	r3, pc, #416	@ (adr r3, 80063d8 <_dtoa_r+0x2b8>)
 8006238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623c:	f7f9 ff96 	bl	800016c <__adddf3>
 8006240:	4604      	mov	r4, r0
 8006242:	4630      	mov	r0, r6
 8006244:	460d      	mov	r5, r1
 8006246:	f7fa f8dd 	bl	8000404 <__aeabi_i2d>
 800624a:	a365      	add	r3, pc, #404	@ (adr r3, 80063e0 <_dtoa_r+0x2c0>)
 800624c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006250:	f7fa f942 	bl	80004d8 <__aeabi_dmul>
 8006254:	4602      	mov	r2, r0
 8006256:	460b      	mov	r3, r1
 8006258:	4620      	mov	r0, r4
 800625a:	4629      	mov	r1, r5
 800625c:	f7f9 ff86 	bl	800016c <__adddf3>
 8006260:	4604      	mov	r4, r0
 8006262:	460d      	mov	r5, r1
 8006264:	f7fa fbe8 	bl	8000a38 <__aeabi_d2iz>
 8006268:	2200      	movs	r2, #0
 800626a:	4607      	mov	r7, r0
 800626c:	2300      	movs	r3, #0
 800626e:	4620      	mov	r0, r4
 8006270:	4629      	mov	r1, r5
 8006272:	f7fa fba3 	bl	80009bc <__aeabi_dcmplt>
 8006276:	b140      	cbz	r0, 800628a <_dtoa_r+0x16a>
 8006278:	4638      	mov	r0, r7
 800627a:	f7fa f8c3 	bl	8000404 <__aeabi_i2d>
 800627e:	4622      	mov	r2, r4
 8006280:	462b      	mov	r3, r5
 8006282:	f7fa fb91 	bl	80009a8 <__aeabi_dcmpeq>
 8006286:	b900      	cbnz	r0, 800628a <_dtoa_r+0x16a>
 8006288:	3f01      	subs	r7, #1
 800628a:	2f16      	cmp	r7, #22
 800628c:	d853      	bhi.n	8006336 <_dtoa_r+0x216>
 800628e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006292:	4b5c      	ldr	r3, [pc, #368]	@ (8006404 <_dtoa_r+0x2e4>)
 8006294:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800629c:	f7fa fb8e 	bl	80009bc <__aeabi_dcmplt>
 80062a0:	2800      	cmp	r0, #0
 80062a2:	d04a      	beq.n	800633a <_dtoa_r+0x21a>
 80062a4:	2300      	movs	r3, #0
 80062a6:	3f01      	subs	r7, #1
 80062a8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80062aa:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80062ac:	1b9b      	subs	r3, r3, r6
 80062ae:	1e5a      	subs	r2, r3, #1
 80062b0:	bf46      	itte	mi
 80062b2:	f1c3 0801 	rsbmi	r8, r3, #1
 80062b6:	2300      	movmi	r3, #0
 80062b8:	f04f 0800 	movpl.w	r8, #0
 80062bc:	9209      	str	r2, [sp, #36]	@ 0x24
 80062be:	bf48      	it	mi
 80062c0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80062c2:	2f00      	cmp	r7, #0
 80062c4:	db3b      	blt.n	800633e <_dtoa_r+0x21e>
 80062c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c8:	970e      	str	r7, [sp, #56]	@ 0x38
 80062ca:	443b      	add	r3, r7
 80062cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80062ce:	2300      	movs	r3, #0
 80062d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80062d2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062d4:	2b09      	cmp	r3, #9
 80062d6:	d866      	bhi.n	80063a6 <_dtoa_r+0x286>
 80062d8:	2b05      	cmp	r3, #5
 80062da:	bfc4      	itt	gt
 80062dc:	3b04      	subgt	r3, #4
 80062de:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80062e0:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80062e2:	bfc8      	it	gt
 80062e4:	2400      	movgt	r4, #0
 80062e6:	f1a3 0302 	sub.w	r3, r3, #2
 80062ea:	bfd8      	it	le
 80062ec:	2401      	movle	r4, #1
 80062ee:	2b03      	cmp	r3, #3
 80062f0:	d864      	bhi.n	80063bc <_dtoa_r+0x29c>
 80062f2:	e8df f003 	tbb	[pc, r3]
 80062f6:	382b      	.short	0x382b
 80062f8:	5636      	.short	0x5636
 80062fa:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 80062fe:	441e      	add	r6, r3
 8006300:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006304:	2b20      	cmp	r3, #32
 8006306:	bfc1      	itttt	gt
 8006308:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800630c:	fa08 f803 	lslgt.w	r8, r8, r3
 8006310:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8006314:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006318:	bfd6      	itet	le
 800631a:	f1c3 0320 	rsble	r3, r3, #32
 800631e:	ea48 0003 	orrgt.w	r0, r8, r3
 8006322:	fa04 f003 	lslle.w	r0, r4, r3
 8006326:	f7fa f85d 	bl	80003e4 <__aeabi_ui2d>
 800632a:	2201      	movs	r2, #1
 800632c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8006330:	3e01      	subs	r6, #1
 8006332:	9212      	str	r2, [sp, #72]	@ 0x48
 8006334:	e775      	b.n	8006222 <_dtoa_r+0x102>
 8006336:	2301      	movs	r3, #1
 8006338:	e7b6      	b.n	80062a8 <_dtoa_r+0x188>
 800633a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800633c:	e7b5      	b.n	80062aa <_dtoa_r+0x18a>
 800633e:	427b      	negs	r3, r7
 8006340:	930a      	str	r3, [sp, #40]	@ 0x28
 8006342:	2300      	movs	r3, #0
 8006344:	eba8 0807 	sub.w	r8, r8, r7
 8006348:	930e      	str	r3, [sp, #56]	@ 0x38
 800634a:	e7c2      	b.n	80062d2 <_dtoa_r+0x1b2>
 800634c:	2300      	movs	r3, #0
 800634e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006350:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006352:	2b00      	cmp	r3, #0
 8006354:	dc35      	bgt.n	80063c2 <_dtoa_r+0x2a2>
 8006356:	2301      	movs	r3, #1
 8006358:	461a      	mov	r2, r3
 800635a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800635e:	9221      	str	r2, [sp, #132]	@ 0x84
 8006360:	e00b      	b.n	800637a <_dtoa_r+0x25a>
 8006362:	2301      	movs	r3, #1
 8006364:	e7f3      	b.n	800634e <_dtoa_r+0x22e>
 8006366:	2300      	movs	r3, #0
 8006368:	930b      	str	r3, [sp, #44]	@ 0x2c
 800636a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800636c:	18fb      	adds	r3, r7, r3
 800636e:	9308      	str	r3, [sp, #32]
 8006370:	3301      	adds	r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	9307      	str	r3, [sp, #28]
 8006376:	bfb8      	it	lt
 8006378:	2301      	movlt	r3, #1
 800637a:	2100      	movs	r1, #0
 800637c:	2204      	movs	r2, #4
 800637e:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006382:	f102 0514 	add.w	r5, r2, #20
 8006386:	429d      	cmp	r5, r3
 8006388:	d91f      	bls.n	80063ca <_dtoa_r+0x2aa>
 800638a:	6041      	str	r1, [r0, #4]
 800638c:	4658      	mov	r0, fp
 800638e:	f000 fd8d 	bl	8006eac <_Balloc>
 8006392:	4682      	mov	sl, r0
 8006394:	2800      	cmp	r0, #0
 8006396:	d139      	bne.n	800640c <_dtoa_r+0x2ec>
 8006398:	4602      	mov	r2, r0
 800639a:	f240 11af 	movw	r1, #431	@ 0x1af
 800639e:	4b1a      	ldr	r3, [pc, #104]	@ (8006408 <_dtoa_r+0x2e8>)
 80063a0:	e6d2      	b.n	8006148 <_dtoa_r+0x28>
 80063a2:	2301      	movs	r3, #1
 80063a4:	e7e0      	b.n	8006368 <_dtoa_r+0x248>
 80063a6:	2401      	movs	r4, #1
 80063a8:	2300      	movs	r3, #0
 80063aa:	940b      	str	r4, [sp, #44]	@ 0x2c
 80063ac:	9320      	str	r3, [sp, #128]	@ 0x80
 80063ae:	f04f 33ff 	mov.w	r3, #4294967295
 80063b2:	2200      	movs	r2, #0
 80063b4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063b8:	2312      	movs	r3, #18
 80063ba:	e7d0      	b.n	800635e <_dtoa_r+0x23e>
 80063bc:	2301      	movs	r3, #1
 80063be:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063c0:	e7f5      	b.n	80063ae <_dtoa_r+0x28e>
 80063c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80063c4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80063c8:	e7d7      	b.n	800637a <_dtoa_r+0x25a>
 80063ca:	3101      	adds	r1, #1
 80063cc:	0052      	lsls	r2, r2, #1
 80063ce:	e7d8      	b.n	8006382 <_dtoa_r+0x262>
 80063d0:	636f4361 	.word	0x636f4361
 80063d4:	3fd287a7 	.word	0x3fd287a7
 80063d8:	8b60c8b3 	.word	0x8b60c8b3
 80063dc:	3fc68a28 	.word	0x3fc68a28
 80063e0:	509f79fb 	.word	0x509f79fb
 80063e4:	3fd34413 	.word	0x3fd34413
 80063e8:	0800a025 	.word	0x0800a025
 80063ec:	0800a03c 	.word	0x0800a03c
 80063f0:	7ff00000 	.word	0x7ff00000
 80063f4:	0800a021 	.word	0x0800a021
 80063f8:	08009ff5 	.word	0x08009ff5
 80063fc:	08009ff4 	.word	0x08009ff4
 8006400:	3ff80000 	.word	0x3ff80000
 8006404:	0800a138 	.word	0x0800a138
 8006408:	0800a094 	.word	0x0800a094
 800640c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006410:	6018      	str	r0, [r3, #0]
 8006412:	9b07      	ldr	r3, [sp, #28]
 8006414:	2b0e      	cmp	r3, #14
 8006416:	f200 80a4 	bhi.w	8006562 <_dtoa_r+0x442>
 800641a:	2c00      	cmp	r4, #0
 800641c:	f000 80a1 	beq.w	8006562 <_dtoa_r+0x442>
 8006420:	2f00      	cmp	r7, #0
 8006422:	dd33      	ble.n	800648c <_dtoa_r+0x36c>
 8006424:	4b86      	ldr	r3, [pc, #536]	@ (8006640 <_dtoa_r+0x520>)
 8006426:	f007 020f 	and.w	r2, r7, #15
 800642a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800642e:	05f8      	lsls	r0, r7, #23
 8006430:	e9d3 3400 	ldrd	r3, r4, [r3]
 8006434:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8006438:	ea4f 1427 	mov.w	r4, r7, asr #4
 800643c:	d516      	bpl.n	800646c <_dtoa_r+0x34c>
 800643e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006442:	4b80      	ldr	r3, [pc, #512]	@ (8006644 <_dtoa_r+0x524>)
 8006444:	2603      	movs	r6, #3
 8006446:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800644a:	f7fa f96f 	bl	800072c <__aeabi_ddiv>
 800644e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006452:	f004 040f 	and.w	r4, r4, #15
 8006456:	4d7b      	ldr	r5, [pc, #492]	@ (8006644 <_dtoa_r+0x524>)
 8006458:	b954      	cbnz	r4, 8006470 <_dtoa_r+0x350>
 800645a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800645e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006462:	f7fa f963 	bl	800072c <__aeabi_ddiv>
 8006466:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800646a:	e028      	b.n	80064be <_dtoa_r+0x39e>
 800646c:	2602      	movs	r6, #2
 800646e:	e7f2      	b.n	8006456 <_dtoa_r+0x336>
 8006470:	07e1      	lsls	r1, r4, #31
 8006472:	d508      	bpl.n	8006486 <_dtoa_r+0x366>
 8006474:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006478:	e9d5 2300 	ldrd	r2, r3, [r5]
 800647c:	f7fa f82c 	bl	80004d8 <__aeabi_dmul>
 8006480:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006484:	3601      	adds	r6, #1
 8006486:	1064      	asrs	r4, r4, #1
 8006488:	3508      	adds	r5, #8
 800648a:	e7e5      	b.n	8006458 <_dtoa_r+0x338>
 800648c:	f000 80d2 	beq.w	8006634 <_dtoa_r+0x514>
 8006490:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006494:	427c      	negs	r4, r7
 8006496:	4b6a      	ldr	r3, [pc, #424]	@ (8006640 <_dtoa_r+0x520>)
 8006498:	f004 020f 	and.w	r2, r4, #15
 800649c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80064a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064a4:	f7fa f818 	bl	80004d8 <__aeabi_dmul>
 80064a8:	2602      	movs	r6, #2
 80064aa:	2300      	movs	r3, #0
 80064ac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064b0:	4d64      	ldr	r5, [pc, #400]	@ (8006644 <_dtoa_r+0x524>)
 80064b2:	1124      	asrs	r4, r4, #4
 80064b4:	2c00      	cmp	r4, #0
 80064b6:	f040 80b2 	bne.w	800661e <_dtoa_r+0x4fe>
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d1d3      	bne.n	8006466 <_dtoa_r+0x346>
 80064be:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	f000 80b7 	beq.w	8006638 <_dtoa_r+0x518>
 80064ca:	2200      	movs	r2, #0
 80064cc:	4620      	mov	r0, r4
 80064ce:	4629      	mov	r1, r5
 80064d0:	4b5d      	ldr	r3, [pc, #372]	@ (8006648 <_dtoa_r+0x528>)
 80064d2:	f7fa fa73 	bl	80009bc <__aeabi_dcmplt>
 80064d6:	2800      	cmp	r0, #0
 80064d8:	f000 80ae 	beq.w	8006638 <_dtoa_r+0x518>
 80064dc:	9b07      	ldr	r3, [sp, #28]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	f000 80aa 	beq.w	8006638 <_dtoa_r+0x518>
 80064e4:	9b08      	ldr	r3, [sp, #32]
 80064e6:	2b00      	cmp	r3, #0
 80064e8:	dd37      	ble.n	800655a <_dtoa_r+0x43a>
 80064ea:	1e7b      	subs	r3, r7, #1
 80064ec:	4620      	mov	r0, r4
 80064ee:	9304      	str	r3, [sp, #16]
 80064f0:	2200      	movs	r2, #0
 80064f2:	4629      	mov	r1, r5
 80064f4:	4b55      	ldr	r3, [pc, #340]	@ (800664c <_dtoa_r+0x52c>)
 80064f6:	f7f9 ffef 	bl	80004d8 <__aeabi_dmul>
 80064fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064fe:	9c08      	ldr	r4, [sp, #32]
 8006500:	3601      	adds	r6, #1
 8006502:	4630      	mov	r0, r6
 8006504:	f7f9 ff7e 	bl	8000404 <__aeabi_i2d>
 8006508:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800650c:	f7f9 ffe4 	bl	80004d8 <__aeabi_dmul>
 8006510:	2200      	movs	r2, #0
 8006512:	4b4f      	ldr	r3, [pc, #316]	@ (8006650 <_dtoa_r+0x530>)
 8006514:	f7f9 fe2a 	bl	800016c <__adddf3>
 8006518:	4605      	mov	r5, r0
 800651a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800651e:	2c00      	cmp	r4, #0
 8006520:	f040 809a 	bne.w	8006658 <_dtoa_r+0x538>
 8006524:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006528:	2200      	movs	r2, #0
 800652a:	4b4a      	ldr	r3, [pc, #296]	@ (8006654 <_dtoa_r+0x534>)
 800652c:	f7f9 fe1c 	bl	8000168 <__aeabi_dsub>
 8006530:	4602      	mov	r2, r0
 8006532:	460b      	mov	r3, r1
 8006534:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006538:	462a      	mov	r2, r5
 800653a:	4633      	mov	r3, r6
 800653c:	f7fa fa5c 	bl	80009f8 <__aeabi_dcmpgt>
 8006540:	2800      	cmp	r0, #0
 8006542:	f040 828e 	bne.w	8006a62 <_dtoa_r+0x942>
 8006546:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800654a:	462a      	mov	r2, r5
 800654c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006550:	f7fa fa34 	bl	80009bc <__aeabi_dcmplt>
 8006554:	2800      	cmp	r0, #0
 8006556:	f040 8127 	bne.w	80067a8 <_dtoa_r+0x688>
 800655a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800655e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006562:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006564:	2b00      	cmp	r3, #0
 8006566:	f2c0 8163 	blt.w	8006830 <_dtoa_r+0x710>
 800656a:	2f0e      	cmp	r7, #14
 800656c:	f300 8160 	bgt.w	8006830 <_dtoa_r+0x710>
 8006570:	4b33      	ldr	r3, [pc, #204]	@ (8006640 <_dtoa_r+0x520>)
 8006572:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006576:	e9d3 3400 	ldrd	r3, r4, [r3]
 800657a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800657e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006580:	2b00      	cmp	r3, #0
 8006582:	da03      	bge.n	800658c <_dtoa_r+0x46c>
 8006584:	9b07      	ldr	r3, [sp, #28]
 8006586:	2b00      	cmp	r3, #0
 8006588:	f340 8100 	ble.w	800678c <_dtoa_r+0x66c>
 800658c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006590:	4656      	mov	r6, sl
 8006592:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006596:	4620      	mov	r0, r4
 8006598:	4629      	mov	r1, r5
 800659a:	f7fa f8c7 	bl	800072c <__aeabi_ddiv>
 800659e:	f7fa fa4b 	bl	8000a38 <__aeabi_d2iz>
 80065a2:	4680      	mov	r8, r0
 80065a4:	f7f9 ff2e 	bl	8000404 <__aeabi_i2d>
 80065a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ac:	f7f9 ff94 	bl	80004d8 <__aeabi_dmul>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4620      	mov	r0, r4
 80065b6:	4629      	mov	r1, r5
 80065b8:	f7f9 fdd6 	bl	8000168 <__aeabi_dsub>
 80065bc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80065c0:	9d07      	ldr	r5, [sp, #28]
 80065c2:	f806 4b01 	strb.w	r4, [r6], #1
 80065c6:	eba6 040a 	sub.w	r4, r6, sl
 80065ca:	42a5      	cmp	r5, r4
 80065cc:	4602      	mov	r2, r0
 80065ce:	460b      	mov	r3, r1
 80065d0:	f040 8116 	bne.w	8006800 <_dtoa_r+0x6e0>
 80065d4:	f7f9 fdca 	bl	800016c <__adddf3>
 80065d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065dc:	4604      	mov	r4, r0
 80065de:	460d      	mov	r5, r1
 80065e0:	f7fa fa0a 	bl	80009f8 <__aeabi_dcmpgt>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	f040 80f8 	bne.w	80067da <_dtoa_r+0x6ba>
 80065ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80065ee:	4620      	mov	r0, r4
 80065f0:	4629      	mov	r1, r5
 80065f2:	f7fa f9d9 	bl	80009a8 <__aeabi_dcmpeq>
 80065f6:	b118      	cbz	r0, 8006600 <_dtoa_r+0x4e0>
 80065f8:	f018 0f01 	tst.w	r8, #1
 80065fc:	f040 80ed 	bne.w	80067da <_dtoa_r+0x6ba>
 8006600:	4649      	mov	r1, r9
 8006602:	4658      	mov	r0, fp
 8006604:	f000 fc92 	bl	8006f2c <_Bfree>
 8006608:	2300      	movs	r3, #0
 800660a:	7033      	strb	r3, [r6, #0]
 800660c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800660e:	3701      	adds	r7, #1
 8006610:	601f      	str	r7, [r3, #0]
 8006612:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006614:	2b00      	cmp	r3, #0
 8006616:	f000 8320 	beq.w	8006c5a <_dtoa_r+0xb3a>
 800661a:	601e      	str	r6, [r3, #0]
 800661c:	e31d      	b.n	8006c5a <_dtoa_r+0xb3a>
 800661e:	07e2      	lsls	r2, r4, #31
 8006620:	d505      	bpl.n	800662e <_dtoa_r+0x50e>
 8006622:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006626:	f7f9 ff57 	bl	80004d8 <__aeabi_dmul>
 800662a:	2301      	movs	r3, #1
 800662c:	3601      	adds	r6, #1
 800662e:	1064      	asrs	r4, r4, #1
 8006630:	3508      	adds	r5, #8
 8006632:	e73f      	b.n	80064b4 <_dtoa_r+0x394>
 8006634:	2602      	movs	r6, #2
 8006636:	e742      	b.n	80064be <_dtoa_r+0x39e>
 8006638:	9c07      	ldr	r4, [sp, #28]
 800663a:	9704      	str	r7, [sp, #16]
 800663c:	e761      	b.n	8006502 <_dtoa_r+0x3e2>
 800663e:	bf00      	nop
 8006640:	0800a138 	.word	0x0800a138
 8006644:	0800a110 	.word	0x0800a110
 8006648:	3ff00000 	.word	0x3ff00000
 800664c:	40240000 	.word	0x40240000
 8006650:	401c0000 	.word	0x401c0000
 8006654:	40140000 	.word	0x40140000
 8006658:	4b70      	ldr	r3, [pc, #448]	@ (800681c <_dtoa_r+0x6fc>)
 800665a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800665c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006660:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006664:	4454      	add	r4, sl
 8006666:	2900      	cmp	r1, #0
 8006668:	d045      	beq.n	80066f6 <_dtoa_r+0x5d6>
 800666a:	2000      	movs	r0, #0
 800666c:	496c      	ldr	r1, [pc, #432]	@ (8006820 <_dtoa_r+0x700>)
 800666e:	f7fa f85d 	bl	800072c <__aeabi_ddiv>
 8006672:	4633      	mov	r3, r6
 8006674:	462a      	mov	r2, r5
 8006676:	f7f9 fd77 	bl	8000168 <__aeabi_dsub>
 800667a:	4656      	mov	r6, sl
 800667c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006680:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006684:	f7fa f9d8 	bl	8000a38 <__aeabi_d2iz>
 8006688:	4605      	mov	r5, r0
 800668a:	f7f9 febb 	bl	8000404 <__aeabi_i2d>
 800668e:	4602      	mov	r2, r0
 8006690:	460b      	mov	r3, r1
 8006692:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006696:	f7f9 fd67 	bl	8000168 <__aeabi_dsub>
 800669a:	4602      	mov	r2, r0
 800669c:	460b      	mov	r3, r1
 800669e:	3530      	adds	r5, #48	@ 0x30
 80066a0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80066a4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066a8:	f806 5b01 	strb.w	r5, [r6], #1
 80066ac:	f7fa f986 	bl	80009bc <__aeabi_dcmplt>
 80066b0:	2800      	cmp	r0, #0
 80066b2:	d163      	bne.n	800677c <_dtoa_r+0x65c>
 80066b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80066b8:	2000      	movs	r0, #0
 80066ba:	495a      	ldr	r1, [pc, #360]	@ (8006824 <_dtoa_r+0x704>)
 80066bc:	f7f9 fd54 	bl	8000168 <__aeabi_dsub>
 80066c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80066c4:	f7fa f97a 	bl	80009bc <__aeabi_dcmplt>
 80066c8:	2800      	cmp	r0, #0
 80066ca:	f040 8087 	bne.w	80067dc <_dtoa_r+0x6bc>
 80066ce:	42a6      	cmp	r6, r4
 80066d0:	f43f af43 	beq.w	800655a <_dtoa_r+0x43a>
 80066d4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066d8:	2200      	movs	r2, #0
 80066da:	4b53      	ldr	r3, [pc, #332]	@ (8006828 <_dtoa_r+0x708>)
 80066dc:	f7f9 fefc 	bl	80004d8 <__aeabi_dmul>
 80066e0:	2200      	movs	r2, #0
 80066e2:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066ea:	4b4f      	ldr	r3, [pc, #316]	@ (8006828 <_dtoa_r+0x708>)
 80066ec:	f7f9 fef4 	bl	80004d8 <__aeabi_dmul>
 80066f0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066f4:	e7c4      	b.n	8006680 <_dtoa_r+0x560>
 80066f6:	4631      	mov	r1, r6
 80066f8:	4628      	mov	r0, r5
 80066fa:	f7f9 feed 	bl	80004d8 <__aeabi_dmul>
 80066fe:	4656      	mov	r6, sl
 8006700:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006704:	9413      	str	r4, [sp, #76]	@ 0x4c
 8006706:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800670a:	f7fa f995 	bl	8000a38 <__aeabi_d2iz>
 800670e:	4605      	mov	r5, r0
 8006710:	f7f9 fe78 	bl	8000404 <__aeabi_i2d>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800671c:	f7f9 fd24 	bl	8000168 <__aeabi_dsub>
 8006720:	4602      	mov	r2, r0
 8006722:	460b      	mov	r3, r1
 8006724:	3530      	adds	r5, #48	@ 0x30
 8006726:	f806 5b01 	strb.w	r5, [r6], #1
 800672a:	42a6      	cmp	r6, r4
 800672c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006730:	f04f 0200 	mov.w	r2, #0
 8006734:	d124      	bne.n	8006780 <_dtoa_r+0x660>
 8006736:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800673a:	4b39      	ldr	r3, [pc, #228]	@ (8006820 <_dtoa_r+0x700>)
 800673c:	f7f9 fd16 	bl	800016c <__adddf3>
 8006740:	4602      	mov	r2, r0
 8006742:	460b      	mov	r3, r1
 8006744:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006748:	f7fa f956 	bl	80009f8 <__aeabi_dcmpgt>
 800674c:	2800      	cmp	r0, #0
 800674e:	d145      	bne.n	80067dc <_dtoa_r+0x6bc>
 8006750:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006754:	2000      	movs	r0, #0
 8006756:	4932      	ldr	r1, [pc, #200]	@ (8006820 <_dtoa_r+0x700>)
 8006758:	f7f9 fd06 	bl	8000168 <__aeabi_dsub>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006764:	f7fa f92a 	bl	80009bc <__aeabi_dcmplt>
 8006768:	2800      	cmp	r0, #0
 800676a:	f43f aef6 	beq.w	800655a <_dtoa_r+0x43a>
 800676e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8006770:	1e73      	subs	r3, r6, #1
 8006772:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006774:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006778:	2b30      	cmp	r3, #48	@ 0x30
 800677a:	d0f8      	beq.n	800676e <_dtoa_r+0x64e>
 800677c:	9f04      	ldr	r7, [sp, #16]
 800677e:	e73f      	b.n	8006600 <_dtoa_r+0x4e0>
 8006780:	4b29      	ldr	r3, [pc, #164]	@ (8006828 <_dtoa_r+0x708>)
 8006782:	f7f9 fea9 	bl	80004d8 <__aeabi_dmul>
 8006786:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800678a:	e7bc      	b.n	8006706 <_dtoa_r+0x5e6>
 800678c:	d10c      	bne.n	80067a8 <_dtoa_r+0x688>
 800678e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006792:	2200      	movs	r2, #0
 8006794:	4b25      	ldr	r3, [pc, #148]	@ (800682c <_dtoa_r+0x70c>)
 8006796:	f7f9 fe9f 	bl	80004d8 <__aeabi_dmul>
 800679a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800679e:	f7fa f921 	bl	80009e4 <__aeabi_dcmpge>
 80067a2:	2800      	cmp	r0, #0
 80067a4:	f000 815b 	beq.w	8006a5e <_dtoa_r+0x93e>
 80067a8:	2400      	movs	r4, #0
 80067aa:	4625      	mov	r5, r4
 80067ac:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80067ae:	4656      	mov	r6, sl
 80067b0:	43db      	mvns	r3, r3
 80067b2:	9304      	str	r3, [sp, #16]
 80067b4:	2700      	movs	r7, #0
 80067b6:	4621      	mov	r1, r4
 80067b8:	4658      	mov	r0, fp
 80067ba:	f000 fbb7 	bl	8006f2c <_Bfree>
 80067be:	2d00      	cmp	r5, #0
 80067c0:	d0dc      	beq.n	800677c <_dtoa_r+0x65c>
 80067c2:	b12f      	cbz	r7, 80067d0 <_dtoa_r+0x6b0>
 80067c4:	42af      	cmp	r7, r5
 80067c6:	d003      	beq.n	80067d0 <_dtoa_r+0x6b0>
 80067c8:	4639      	mov	r1, r7
 80067ca:	4658      	mov	r0, fp
 80067cc:	f000 fbae 	bl	8006f2c <_Bfree>
 80067d0:	4629      	mov	r1, r5
 80067d2:	4658      	mov	r0, fp
 80067d4:	f000 fbaa 	bl	8006f2c <_Bfree>
 80067d8:	e7d0      	b.n	800677c <_dtoa_r+0x65c>
 80067da:	9704      	str	r7, [sp, #16]
 80067dc:	4633      	mov	r3, r6
 80067de:	461e      	mov	r6, r3
 80067e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067e4:	2a39      	cmp	r2, #57	@ 0x39
 80067e6:	d107      	bne.n	80067f8 <_dtoa_r+0x6d8>
 80067e8:	459a      	cmp	sl, r3
 80067ea:	d1f8      	bne.n	80067de <_dtoa_r+0x6be>
 80067ec:	9a04      	ldr	r2, [sp, #16]
 80067ee:	3201      	adds	r2, #1
 80067f0:	9204      	str	r2, [sp, #16]
 80067f2:	2230      	movs	r2, #48	@ 0x30
 80067f4:	f88a 2000 	strb.w	r2, [sl]
 80067f8:	781a      	ldrb	r2, [r3, #0]
 80067fa:	3201      	adds	r2, #1
 80067fc:	701a      	strb	r2, [r3, #0]
 80067fe:	e7bd      	b.n	800677c <_dtoa_r+0x65c>
 8006800:	2200      	movs	r2, #0
 8006802:	4b09      	ldr	r3, [pc, #36]	@ (8006828 <_dtoa_r+0x708>)
 8006804:	f7f9 fe68 	bl	80004d8 <__aeabi_dmul>
 8006808:	2200      	movs	r2, #0
 800680a:	2300      	movs	r3, #0
 800680c:	4604      	mov	r4, r0
 800680e:	460d      	mov	r5, r1
 8006810:	f7fa f8ca 	bl	80009a8 <__aeabi_dcmpeq>
 8006814:	2800      	cmp	r0, #0
 8006816:	f43f aebc 	beq.w	8006592 <_dtoa_r+0x472>
 800681a:	e6f1      	b.n	8006600 <_dtoa_r+0x4e0>
 800681c:	0800a138 	.word	0x0800a138
 8006820:	3fe00000 	.word	0x3fe00000
 8006824:	3ff00000 	.word	0x3ff00000
 8006828:	40240000 	.word	0x40240000
 800682c:	40140000 	.word	0x40140000
 8006830:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006832:	2a00      	cmp	r2, #0
 8006834:	f000 80db 	beq.w	80069ee <_dtoa_r+0x8ce>
 8006838:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800683a:	2a01      	cmp	r2, #1
 800683c:	f300 80bf 	bgt.w	80069be <_dtoa_r+0x89e>
 8006840:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8006842:	2a00      	cmp	r2, #0
 8006844:	f000 80b7 	beq.w	80069b6 <_dtoa_r+0x896>
 8006848:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800684c:	4646      	mov	r6, r8
 800684e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006850:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006852:	2101      	movs	r1, #1
 8006854:	441a      	add	r2, r3
 8006856:	4658      	mov	r0, fp
 8006858:	4498      	add	r8, r3
 800685a:	9209      	str	r2, [sp, #36]	@ 0x24
 800685c:	f000 fc1a 	bl	8007094 <__i2b>
 8006860:	4605      	mov	r5, r0
 8006862:	b15e      	cbz	r6, 800687c <_dtoa_r+0x75c>
 8006864:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006866:	2b00      	cmp	r3, #0
 8006868:	dd08      	ble.n	800687c <_dtoa_r+0x75c>
 800686a:	42b3      	cmp	r3, r6
 800686c:	bfa8      	it	ge
 800686e:	4633      	movge	r3, r6
 8006870:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006872:	eba8 0803 	sub.w	r8, r8, r3
 8006876:	1af6      	subs	r6, r6, r3
 8006878:	1ad3      	subs	r3, r2, r3
 800687a:	9309      	str	r3, [sp, #36]	@ 0x24
 800687c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800687e:	b1f3      	cbz	r3, 80068be <_dtoa_r+0x79e>
 8006880:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006882:	2b00      	cmp	r3, #0
 8006884:	f000 80b7 	beq.w	80069f6 <_dtoa_r+0x8d6>
 8006888:	b18c      	cbz	r4, 80068ae <_dtoa_r+0x78e>
 800688a:	4629      	mov	r1, r5
 800688c:	4622      	mov	r2, r4
 800688e:	4658      	mov	r0, fp
 8006890:	f000 fcbe 	bl	8007210 <__pow5mult>
 8006894:	464a      	mov	r2, r9
 8006896:	4601      	mov	r1, r0
 8006898:	4605      	mov	r5, r0
 800689a:	4658      	mov	r0, fp
 800689c:	f000 fc10 	bl	80070c0 <__multiply>
 80068a0:	4649      	mov	r1, r9
 80068a2:	9004      	str	r0, [sp, #16]
 80068a4:	4658      	mov	r0, fp
 80068a6:	f000 fb41 	bl	8006f2c <_Bfree>
 80068aa:	9b04      	ldr	r3, [sp, #16]
 80068ac:	4699      	mov	r9, r3
 80068ae:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068b0:	1b1a      	subs	r2, r3, r4
 80068b2:	d004      	beq.n	80068be <_dtoa_r+0x79e>
 80068b4:	4649      	mov	r1, r9
 80068b6:	4658      	mov	r0, fp
 80068b8:	f000 fcaa 	bl	8007210 <__pow5mult>
 80068bc:	4681      	mov	r9, r0
 80068be:	2101      	movs	r1, #1
 80068c0:	4658      	mov	r0, fp
 80068c2:	f000 fbe7 	bl	8007094 <__i2b>
 80068c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068c8:	4604      	mov	r4, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	f000 81c9 	beq.w	8006c62 <_dtoa_r+0xb42>
 80068d0:	461a      	mov	r2, r3
 80068d2:	4601      	mov	r1, r0
 80068d4:	4658      	mov	r0, fp
 80068d6:	f000 fc9b 	bl	8007210 <__pow5mult>
 80068da:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80068dc:	4604      	mov	r4, r0
 80068de:	2b01      	cmp	r3, #1
 80068e0:	f300 808f 	bgt.w	8006a02 <_dtoa_r+0x8e2>
 80068e4:	9b02      	ldr	r3, [sp, #8]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	f040 8087 	bne.w	80069fa <_dtoa_r+0x8da>
 80068ec:	9b03      	ldr	r3, [sp, #12]
 80068ee:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f040 8083 	bne.w	80069fe <_dtoa_r+0x8de>
 80068f8:	9b03      	ldr	r3, [sp, #12]
 80068fa:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068fe:	0d1b      	lsrs	r3, r3, #20
 8006900:	051b      	lsls	r3, r3, #20
 8006902:	b12b      	cbz	r3, 8006910 <_dtoa_r+0x7f0>
 8006904:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006906:	f108 0801 	add.w	r8, r8, #1
 800690a:	3301      	adds	r3, #1
 800690c:	9309      	str	r3, [sp, #36]	@ 0x24
 800690e:	2301      	movs	r3, #1
 8006910:	930a      	str	r3, [sp, #40]	@ 0x28
 8006912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006914:	2b00      	cmp	r3, #0
 8006916:	f000 81aa 	beq.w	8006c6e <_dtoa_r+0xb4e>
 800691a:	6923      	ldr	r3, [r4, #16]
 800691c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006920:	6918      	ldr	r0, [r3, #16]
 8006922:	f000 fb6b 	bl	8006ffc <__hi0bits>
 8006926:	f1c0 0020 	rsb	r0, r0, #32
 800692a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800692c:	4418      	add	r0, r3
 800692e:	f010 001f 	ands.w	r0, r0, #31
 8006932:	d071      	beq.n	8006a18 <_dtoa_r+0x8f8>
 8006934:	f1c0 0320 	rsb	r3, r0, #32
 8006938:	2b04      	cmp	r3, #4
 800693a:	dd65      	ble.n	8006a08 <_dtoa_r+0x8e8>
 800693c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800693e:	f1c0 001c 	rsb	r0, r0, #28
 8006942:	4403      	add	r3, r0
 8006944:	4480      	add	r8, r0
 8006946:	4406      	add	r6, r0
 8006948:	9309      	str	r3, [sp, #36]	@ 0x24
 800694a:	f1b8 0f00 	cmp.w	r8, #0
 800694e:	dd05      	ble.n	800695c <_dtoa_r+0x83c>
 8006950:	4649      	mov	r1, r9
 8006952:	4642      	mov	r2, r8
 8006954:	4658      	mov	r0, fp
 8006956:	f000 fcb5 	bl	80072c4 <__lshift>
 800695a:	4681      	mov	r9, r0
 800695c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800695e:	2b00      	cmp	r3, #0
 8006960:	dd05      	ble.n	800696e <_dtoa_r+0x84e>
 8006962:	4621      	mov	r1, r4
 8006964:	461a      	mov	r2, r3
 8006966:	4658      	mov	r0, fp
 8006968:	f000 fcac 	bl	80072c4 <__lshift>
 800696c:	4604      	mov	r4, r0
 800696e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006970:	2b00      	cmp	r3, #0
 8006972:	d053      	beq.n	8006a1c <_dtoa_r+0x8fc>
 8006974:	4621      	mov	r1, r4
 8006976:	4648      	mov	r0, r9
 8006978:	f000 fd10 	bl	800739c <__mcmp>
 800697c:	2800      	cmp	r0, #0
 800697e:	da4d      	bge.n	8006a1c <_dtoa_r+0x8fc>
 8006980:	1e7b      	subs	r3, r7, #1
 8006982:	4649      	mov	r1, r9
 8006984:	9304      	str	r3, [sp, #16]
 8006986:	220a      	movs	r2, #10
 8006988:	2300      	movs	r3, #0
 800698a:	4658      	mov	r0, fp
 800698c:	f000 faf0 	bl	8006f70 <__multadd>
 8006990:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006992:	4681      	mov	r9, r0
 8006994:	2b00      	cmp	r3, #0
 8006996:	f000 816c 	beq.w	8006c72 <_dtoa_r+0xb52>
 800699a:	2300      	movs	r3, #0
 800699c:	4629      	mov	r1, r5
 800699e:	220a      	movs	r2, #10
 80069a0:	4658      	mov	r0, fp
 80069a2:	f000 fae5 	bl	8006f70 <__multadd>
 80069a6:	9b08      	ldr	r3, [sp, #32]
 80069a8:	4605      	mov	r5, r0
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	dc61      	bgt.n	8006a72 <_dtoa_r+0x952>
 80069ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80069b0:	2b02      	cmp	r3, #2
 80069b2:	dc3b      	bgt.n	8006a2c <_dtoa_r+0x90c>
 80069b4:	e05d      	b.n	8006a72 <_dtoa_r+0x952>
 80069b6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80069b8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80069bc:	e746      	b.n	800684c <_dtoa_r+0x72c>
 80069be:	9b07      	ldr	r3, [sp, #28]
 80069c0:	1e5c      	subs	r4, r3, #1
 80069c2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069c4:	42a3      	cmp	r3, r4
 80069c6:	bfbf      	itttt	lt
 80069c8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80069ca:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80069cc:	1ae3      	sublt	r3, r4, r3
 80069ce:	18d2      	addlt	r2, r2, r3
 80069d0:	bfa8      	it	ge
 80069d2:	1b1c      	subge	r4, r3, r4
 80069d4:	9b07      	ldr	r3, [sp, #28]
 80069d6:	bfbe      	ittt	lt
 80069d8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80069da:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80069dc:	2400      	movlt	r4, #0
 80069de:	2b00      	cmp	r3, #0
 80069e0:	bfb5      	itete	lt
 80069e2:	eba8 0603 	sublt.w	r6, r8, r3
 80069e6:	4646      	movge	r6, r8
 80069e8:	2300      	movlt	r3, #0
 80069ea:	9b07      	ldrge	r3, [sp, #28]
 80069ec:	e730      	b.n	8006850 <_dtoa_r+0x730>
 80069ee:	4646      	mov	r6, r8
 80069f0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069f2:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80069f4:	e735      	b.n	8006862 <_dtoa_r+0x742>
 80069f6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069f8:	e75c      	b.n	80068b4 <_dtoa_r+0x794>
 80069fa:	2300      	movs	r3, #0
 80069fc:	e788      	b.n	8006910 <_dtoa_r+0x7f0>
 80069fe:	9b02      	ldr	r3, [sp, #8]
 8006a00:	e786      	b.n	8006910 <_dtoa_r+0x7f0>
 8006a02:	2300      	movs	r3, #0
 8006a04:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a06:	e788      	b.n	800691a <_dtoa_r+0x7fa>
 8006a08:	d09f      	beq.n	800694a <_dtoa_r+0x82a>
 8006a0a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006a0c:	331c      	adds	r3, #28
 8006a0e:	441a      	add	r2, r3
 8006a10:	4498      	add	r8, r3
 8006a12:	441e      	add	r6, r3
 8006a14:	9209      	str	r2, [sp, #36]	@ 0x24
 8006a16:	e798      	b.n	800694a <_dtoa_r+0x82a>
 8006a18:	4603      	mov	r3, r0
 8006a1a:	e7f6      	b.n	8006a0a <_dtoa_r+0x8ea>
 8006a1c:	9b07      	ldr	r3, [sp, #28]
 8006a1e:	9704      	str	r7, [sp, #16]
 8006a20:	2b00      	cmp	r3, #0
 8006a22:	dc20      	bgt.n	8006a66 <_dtoa_r+0x946>
 8006a24:	9308      	str	r3, [sp, #32]
 8006a26:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006a28:	2b02      	cmp	r3, #2
 8006a2a:	dd1e      	ble.n	8006a6a <_dtoa_r+0x94a>
 8006a2c:	9b08      	ldr	r3, [sp, #32]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	f47f aebc 	bne.w	80067ac <_dtoa_r+0x68c>
 8006a34:	4621      	mov	r1, r4
 8006a36:	2205      	movs	r2, #5
 8006a38:	4658      	mov	r0, fp
 8006a3a:	f000 fa99 	bl	8006f70 <__multadd>
 8006a3e:	4601      	mov	r1, r0
 8006a40:	4604      	mov	r4, r0
 8006a42:	4648      	mov	r0, r9
 8006a44:	f000 fcaa 	bl	800739c <__mcmp>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	f77f aeaf 	ble.w	80067ac <_dtoa_r+0x68c>
 8006a4e:	2331      	movs	r3, #49	@ 0x31
 8006a50:	4656      	mov	r6, sl
 8006a52:	f806 3b01 	strb.w	r3, [r6], #1
 8006a56:	9b04      	ldr	r3, [sp, #16]
 8006a58:	3301      	adds	r3, #1
 8006a5a:	9304      	str	r3, [sp, #16]
 8006a5c:	e6aa      	b.n	80067b4 <_dtoa_r+0x694>
 8006a5e:	9c07      	ldr	r4, [sp, #28]
 8006a60:	9704      	str	r7, [sp, #16]
 8006a62:	4625      	mov	r5, r4
 8006a64:	e7f3      	b.n	8006a4e <_dtoa_r+0x92e>
 8006a66:	9b07      	ldr	r3, [sp, #28]
 8006a68:	9308      	str	r3, [sp, #32]
 8006a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8104 	beq.w	8006c7a <_dtoa_r+0xb5a>
 8006a72:	2e00      	cmp	r6, #0
 8006a74:	dd05      	ble.n	8006a82 <_dtoa_r+0x962>
 8006a76:	4629      	mov	r1, r5
 8006a78:	4632      	mov	r2, r6
 8006a7a:	4658      	mov	r0, fp
 8006a7c:	f000 fc22 	bl	80072c4 <__lshift>
 8006a80:	4605      	mov	r5, r0
 8006a82:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d05a      	beq.n	8006b3e <_dtoa_r+0xa1e>
 8006a88:	4658      	mov	r0, fp
 8006a8a:	6869      	ldr	r1, [r5, #4]
 8006a8c:	f000 fa0e 	bl	8006eac <_Balloc>
 8006a90:	4606      	mov	r6, r0
 8006a92:	b928      	cbnz	r0, 8006aa0 <_dtoa_r+0x980>
 8006a94:	4602      	mov	r2, r0
 8006a96:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a9a:	4b83      	ldr	r3, [pc, #524]	@ (8006ca8 <_dtoa_r+0xb88>)
 8006a9c:	f7ff bb54 	b.w	8006148 <_dtoa_r+0x28>
 8006aa0:	692a      	ldr	r2, [r5, #16]
 8006aa2:	f105 010c 	add.w	r1, r5, #12
 8006aa6:	3202      	adds	r2, #2
 8006aa8:	0092      	lsls	r2, r2, #2
 8006aaa:	300c      	adds	r0, #12
 8006aac:	f7ff fa9f 	bl	8005fee <memcpy>
 8006ab0:	2201      	movs	r2, #1
 8006ab2:	4631      	mov	r1, r6
 8006ab4:	4658      	mov	r0, fp
 8006ab6:	f000 fc05 	bl	80072c4 <__lshift>
 8006aba:	462f      	mov	r7, r5
 8006abc:	4605      	mov	r5, r0
 8006abe:	f10a 0301 	add.w	r3, sl, #1
 8006ac2:	9307      	str	r3, [sp, #28]
 8006ac4:	9b08      	ldr	r3, [sp, #32]
 8006ac6:	4453      	add	r3, sl
 8006ac8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006aca:	9b02      	ldr	r3, [sp, #8]
 8006acc:	f003 0301 	and.w	r3, r3, #1
 8006ad0:	930a      	str	r3, [sp, #40]	@ 0x28
 8006ad2:	9b07      	ldr	r3, [sp, #28]
 8006ad4:	4621      	mov	r1, r4
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	4648      	mov	r0, r9
 8006ada:	9302      	str	r3, [sp, #8]
 8006adc:	f7ff fa95 	bl	800600a <quorem>
 8006ae0:	4639      	mov	r1, r7
 8006ae2:	9008      	str	r0, [sp, #32]
 8006ae4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ae8:	4648      	mov	r0, r9
 8006aea:	f000 fc57 	bl	800739c <__mcmp>
 8006aee:	462a      	mov	r2, r5
 8006af0:	9009      	str	r0, [sp, #36]	@ 0x24
 8006af2:	4621      	mov	r1, r4
 8006af4:	4658      	mov	r0, fp
 8006af6:	f000 fc6d 	bl	80073d4 <__mdiff>
 8006afa:	68c2      	ldr	r2, [r0, #12]
 8006afc:	4606      	mov	r6, r0
 8006afe:	bb02      	cbnz	r2, 8006b42 <_dtoa_r+0xa22>
 8006b00:	4601      	mov	r1, r0
 8006b02:	4648      	mov	r0, r9
 8006b04:	f000 fc4a 	bl	800739c <__mcmp>
 8006b08:	4602      	mov	r2, r0
 8006b0a:	4631      	mov	r1, r6
 8006b0c:	4658      	mov	r0, fp
 8006b0e:	920c      	str	r2, [sp, #48]	@ 0x30
 8006b10:	f000 fa0c 	bl	8006f2c <_Bfree>
 8006b14:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006b16:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8006b18:	9e07      	ldr	r6, [sp, #28]
 8006b1a:	ea43 0102 	orr.w	r1, r3, r2
 8006b1e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b20:	4319      	orrs	r1, r3
 8006b22:	d110      	bne.n	8006b46 <_dtoa_r+0xa26>
 8006b24:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b28:	d029      	beq.n	8006b7e <_dtoa_r+0xa5e>
 8006b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	dd02      	ble.n	8006b36 <_dtoa_r+0xa16>
 8006b30:	9b08      	ldr	r3, [sp, #32]
 8006b32:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b36:	9b02      	ldr	r3, [sp, #8]
 8006b38:	f883 8000 	strb.w	r8, [r3]
 8006b3c:	e63b      	b.n	80067b6 <_dtoa_r+0x696>
 8006b3e:	4628      	mov	r0, r5
 8006b40:	e7bb      	b.n	8006aba <_dtoa_r+0x99a>
 8006b42:	2201      	movs	r2, #1
 8006b44:	e7e1      	b.n	8006b0a <_dtoa_r+0x9ea>
 8006b46:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b48:	2b00      	cmp	r3, #0
 8006b4a:	db04      	blt.n	8006b56 <_dtoa_r+0xa36>
 8006b4c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8006b4e:	430b      	orrs	r3, r1
 8006b50:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b52:	430b      	orrs	r3, r1
 8006b54:	d120      	bne.n	8006b98 <_dtoa_r+0xa78>
 8006b56:	2a00      	cmp	r2, #0
 8006b58:	dded      	ble.n	8006b36 <_dtoa_r+0xa16>
 8006b5a:	4649      	mov	r1, r9
 8006b5c:	2201      	movs	r2, #1
 8006b5e:	4658      	mov	r0, fp
 8006b60:	f000 fbb0 	bl	80072c4 <__lshift>
 8006b64:	4621      	mov	r1, r4
 8006b66:	4681      	mov	r9, r0
 8006b68:	f000 fc18 	bl	800739c <__mcmp>
 8006b6c:	2800      	cmp	r0, #0
 8006b6e:	dc03      	bgt.n	8006b78 <_dtoa_r+0xa58>
 8006b70:	d1e1      	bne.n	8006b36 <_dtoa_r+0xa16>
 8006b72:	f018 0f01 	tst.w	r8, #1
 8006b76:	d0de      	beq.n	8006b36 <_dtoa_r+0xa16>
 8006b78:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b7c:	d1d8      	bne.n	8006b30 <_dtoa_r+0xa10>
 8006b7e:	2339      	movs	r3, #57	@ 0x39
 8006b80:	9a02      	ldr	r2, [sp, #8]
 8006b82:	7013      	strb	r3, [r2, #0]
 8006b84:	4633      	mov	r3, r6
 8006b86:	461e      	mov	r6, r3
 8006b88:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b8c:	3b01      	subs	r3, #1
 8006b8e:	2a39      	cmp	r2, #57	@ 0x39
 8006b90:	d052      	beq.n	8006c38 <_dtoa_r+0xb18>
 8006b92:	3201      	adds	r2, #1
 8006b94:	701a      	strb	r2, [r3, #0]
 8006b96:	e60e      	b.n	80067b6 <_dtoa_r+0x696>
 8006b98:	2a00      	cmp	r2, #0
 8006b9a:	dd07      	ble.n	8006bac <_dtoa_r+0xa8c>
 8006b9c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006ba0:	d0ed      	beq.n	8006b7e <_dtoa_r+0xa5e>
 8006ba2:	9a02      	ldr	r2, [sp, #8]
 8006ba4:	f108 0301 	add.w	r3, r8, #1
 8006ba8:	7013      	strb	r3, [r2, #0]
 8006baa:	e604      	b.n	80067b6 <_dtoa_r+0x696>
 8006bac:	9b07      	ldr	r3, [sp, #28]
 8006bae:	9a07      	ldr	r2, [sp, #28]
 8006bb0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006bb4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d028      	beq.n	8006c0c <_dtoa_r+0xaec>
 8006bba:	4649      	mov	r1, r9
 8006bbc:	2300      	movs	r3, #0
 8006bbe:	220a      	movs	r2, #10
 8006bc0:	4658      	mov	r0, fp
 8006bc2:	f000 f9d5 	bl	8006f70 <__multadd>
 8006bc6:	42af      	cmp	r7, r5
 8006bc8:	4681      	mov	r9, r0
 8006bca:	f04f 0300 	mov.w	r3, #0
 8006bce:	f04f 020a 	mov.w	r2, #10
 8006bd2:	4639      	mov	r1, r7
 8006bd4:	4658      	mov	r0, fp
 8006bd6:	d107      	bne.n	8006be8 <_dtoa_r+0xac8>
 8006bd8:	f000 f9ca 	bl	8006f70 <__multadd>
 8006bdc:	4607      	mov	r7, r0
 8006bde:	4605      	mov	r5, r0
 8006be0:	9b07      	ldr	r3, [sp, #28]
 8006be2:	3301      	adds	r3, #1
 8006be4:	9307      	str	r3, [sp, #28]
 8006be6:	e774      	b.n	8006ad2 <_dtoa_r+0x9b2>
 8006be8:	f000 f9c2 	bl	8006f70 <__multadd>
 8006bec:	4629      	mov	r1, r5
 8006bee:	4607      	mov	r7, r0
 8006bf0:	2300      	movs	r3, #0
 8006bf2:	220a      	movs	r2, #10
 8006bf4:	4658      	mov	r0, fp
 8006bf6:	f000 f9bb 	bl	8006f70 <__multadd>
 8006bfa:	4605      	mov	r5, r0
 8006bfc:	e7f0      	b.n	8006be0 <_dtoa_r+0xac0>
 8006bfe:	9b08      	ldr	r3, [sp, #32]
 8006c00:	2700      	movs	r7, #0
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	bfcc      	ite	gt
 8006c06:	461e      	movgt	r6, r3
 8006c08:	2601      	movle	r6, #1
 8006c0a:	4456      	add	r6, sl
 8006c0c:	4649      	mov	r1, r9
 8006c0e:	2201      	movs	r2, #1
 8006c10:	4658      	mov	r0, fp
 8006c12:	f000 fb57 	bl	80072c4 <__lshift>
 8006c16:	4621      	mov	r1, r4
 8006c18:	4681      	mov	r9, r0
 8006c1a:	f000 fbbf 	bl	800739c <__mcmp>
 8006c1e:	2800      	cmp	r0, #0
 8006c20:	dcb0      	bgt.n	8006b84 <_dtoa_r+0xa64>
 8006c22:	d102      	bne.n	8006c2a <_dtoa_r+0xb0a>
 8006c24:	f018 0f01 	tst.w	r8, #1
 8006c28:	d1ac      	bne.n	8006b84 <_dtoa_r+0xa64>
 8006c2a:	4633      	mov	r3, r6
 8006c2c:	461e      	mov	r6, r3
 8006c2e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c32:	2a30      	cmp	r2, #48	@ 0x30
 8006c34:	d0fa      	beq.n	8006c2c <_dtoa_r+0xb0c>
 8006c36:	e5be      	b.n	80067b6 <_dtoa_r+0x696>
 8006c38:	459a      	cmp	sl, r3
 8006c3a:	d1a4      	bne.n	8006b86 <_dtoa_r+0xa66>
 8006c3c:	9b04      	ldr	r3, [sp, #16]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	9304      	str	r3, [sp, #16]
 8006c42:	2331      	movs	r3, #49	@ 0x31
 8006c44:	f88a 3000 	strb.w	r3, [sl]
 8006c48:	e5b5      	b.n	80067b6 <_dtoa_r+0x696>
 8006c4a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006c4c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006cac <_dtoa_r+0xb8c>
 8006c50:	b11b      	cbz	r3, 8006c5a <_dtoa_r+0xb3a>
 8006c52:	f10a 0308 	add.w	r3, sl, #8
 8006c56:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	4650      	mov	r0, sl
 8006c5c:	b017      	add	sp, #92	@ 0x5c
 8006c5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8006c64:	2b01      	cmp	r3, #1
 8006c66:	f77f ae3d 	ble.w	80068e4 <_dtoa_r+0x7c4>
 8006c6a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006c6c:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c6e:	2001      	movs	r0, #1
 8006c70:	e65b      	b.n	800692a <_dtoa_r+0x80a>
 8006c72:	9b08      	ldr	r3, [sp, #32]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	f77f aed6 	ble.w	8006a26 <_dtoa_r+0x906>
 8006c7a:	4656      	mov	r6, sl
 8006c7c:	4621      	mov	r1, r4
 8006c7e:	4648      	mov	r0, r9
 8006c80:	f7ff f9c3 	bl	800600a <quorem>
 8006c84:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c88:	9b08      	ldr	r3, [sp, #32]
 8006c8a:	f806 8b01 	strb.w	r8, [r6], #1
 8006c8e:	eba6 020a 	sub.w	r2, r6, sl
 8006c92:	4293      	cmp	r3, r2
 8006c94:	ddb3      	ble.n	8006bfe <_dtoa_r+0xade>
 8006c96:	4649      	mov	r1, r9
 8006c98:	2300      	movs	r3, #0
 8006c9a:	220a      	movs	r2, #10
 8006c9c:	4658      	mov	r0, fp
 8006c9e:	f000 f967 	bl	8006f70 <__multadd>
 8006ca2:	4681      	mov	r9, r0
 8006ca4:	e7ea      	b.n	8006c7c <_dtoa_r+0xb5c>
 8006ca6:	bf00      	nop
 8006ca8:	0800a094 	.word	0x0800a094
 8006cac:	0800a018 	.word	0x0800a018

08006cb0 <_free_r>:
 8006cb0:	b538      	push	{r3, r4, r5, lr}
 8006cb2:	4605      	mov	r5, r0
 8006cb4:	2900      	cmp	r1, #0
 8006cb6:	d040      	beq.n	8006d3a <_free_r+0x8a>
 8006cb8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cbc:	1f0c      	subs	r4, r1, #4
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	bfb8      	it	lt
 8006cc2:	18e4      	addlt	r4, r4, r3
 8006cc4:	f000 f8e6 	bl	8006e94 <__malloc_lock>
 8006cc8:	4a1c      	ldr	r2, [pc, #112]	@ (8006d3c <_free_r+0x8c>)
 8006cca:	6813      	ldr	r3, [r2, #0]
 8006ccc:	b933      	cbnz	r3, 8006cdc <_free_r+0x2c>
 8006cce:	6063      	str	r3, [r4, #4]
 8006cd0:	6014      	str	r4, [r2, #0]
 8006cd2:	4628      	mov	r0, r5
 8006cd4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cd8:	f000 b8e2 	b.w	8006ea0 <__malloc_unlock>
 8006cdc:	42a3      	cmp	r3, r4
 8006cde:	d908      	bls.n	8006cf2 <_free_r+0x42>
 8006ce0:	6820      	ldr	r0, [r4, #0]
 8006ce2:	1821      	adds	r1, r4, r0
 8006ce4:	428b      	cmp	r3, r1
 8006ce6:	bf01      	itttt	eq
 8006ce8:	6819      	ldreq	r1, [r3, #0]
 8006cea:	685b      	ldreq	r3, [r3, #4]
 8006cec:	1809      	addeq	r1, r1, r0
 8006cee:	6021      	streq	r1, [r4, #0]
 8006cf0:	e7ed      	b.n	8006cce <_free_r+0x1e>
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	685b      	ldr	r3, [r3, #4]
 8006cf6:	b10b      	cbz	r3, 8006cfc <_free_r+0x4c>
 8006cf8:	42a3      	cmp	r3, r4
 8006cfa:	d9fa      	bls.n	8006cf2 <_free_r+0x42>
 8006cfc:	6811      	ldr	r1, [r2, #0]
 8006cfe:	1850      	adds	r0, r2, r1
 8006d00:	42a0      	cmp	r0, r4
 8006d02:	d10b      	bne.n	8006d1c <_free_r+0x6c>
 8006d04:	6820      	ldr	r0, [r4, #0]
 8006d06:	4401      	add	r1, r0
 8006d08:	1850      	adds	r0, r2, r1
 8006d0a:	4283      	cmp	r3, r0
 8006d0c:	6011      	str	r1, [r2, #0]
 8006d0e:	d1e0      	bne.n	8006cd2 <_free_r+0x22>
 8006d10:	6818      	ldr	r0, [r3, #0]
 8006d12:	685b      	ldr	r3, [r3, #4]
 8006d14:	4408      	add	r0, r1
 8006d16:	6010      	str	r0, [r2, #0]
 8006d18:	6053      	str	r3, [r2, #4]
 8006d1a:	e7da      	b.n	8006cd2 <_free_r+0x22>
 8006d1c:	d902      	bls.n	8006d24 <_free_r+0x74>
 8006d1e:	230c      	movs	r3, #12
 8006d20:	602b      	str	r3, [r5, #0]
 8006d22:	e7d6      	b.n	8006cd2 <_free_r+0x22>
 8006d24:	6820      	ldr	r0, [r4, #0]
 8006d26:	1821      	adds	r1, r4, r0
 8006d28:	428b      	cmp	r3, r1
 8006d2a:	bf01      	itttt	eq
 8006d2c:	6819      	ldreq	r1, [r3, #0]
 8006d2e:	685b      	ldreq	r3, [r3, #4]
 8006d30:	1809      	addeq	r1, r1, r0
 8006d32:	6021      	streq	r1, [r4, #0]
 8006d34:	6063      	str	r3, [r4, #4]
 8006d36:	6054      	str	r4, [r2, #4]
 8006d38:	e7cb      	b.n	8006cd2 <_free_r+0x22>
 8006d3a:	bd38      	pop	{r3, r4, r5, pc}
 8006d3c:	20000724 	.word	0x20000724

08006d40 <malloc>:
 8006d40:	4b02      	ldr	r3, [pc, #8]	@ (8006d4c <malloc+0xc>)
 8006d42:	4601      	mov	r1, r0
 8006d44:	6818      	ldr	r0, [r3, #0]
 8006d46:	f000 b825 	b.w	8006d94 <_malloc_r>
 8006d4a:	bf00      	nop
 8006d4c:	20000048 	.word	0x20000048

08006d50 <sbrk_aligned>:
 8006d50:	b570      	push	{r4, r5, r6, lr}
 8006d52:	4e0f      	ldr	r6, [pc, #60]	@ (8006d90 <sbrk_aligned+0x40>)
 8006d54:	460c      	mov	r4, r1
 8006d56:	6831      	ldr	r1, [r6, #0]
 8006d58:	4605      	mov	r5, r0
 8006d5a:	b911      	cbnz	r1, 8006d62 <sbrk_aligned+0x12>
 8006d5c:	f000 fe40 	bl	80079e0 <_sbrk_r>
 8006d60:	6030      	str	r0, [r6, #0]
 8006d62:	4621      	mov	r1, r4
 8006d64:	4628      	mov	r0, r5
 8006d66:	f000 fe3b 	bl	80079e0 <_sbrk_r>
 8006d6a:	1c43      	adds	r3, r0, #1
 8006d6c:	d103      	bne.n	8006d76 <sbrk_aligned+0x26>
 8006d6e:	f04f 34ff 	mov.w	r4, #4294967295
 8006d72:	4620      	mov	r0, r4
 8006d74:	bd70      	pop	{r4, r5, r6, pc}
 8006d76:	1cc4      	adds	r4, r0, #3
 8006d78:	f024 0403 	bic.w	r4, r4, #3
 8006d7c:	42a0      	cmp	r0, r4
 8006d7e:	d0f8      	beq.n	8006d72 <sbrk_aligned+0x22>
 8006d80:	1a21      	subs	r1, r4, r0
 8006d82:	4628      	mov	r0, r5
 8006d84:	f000 fe2c 	bl	80079e0 <_sbrk_r>
 8006d88:	3001      	adds	r0, #1
 8006d8a:	d1f2      	bne.n	8006d72 <sbrk_aligned+0x22>
 8006d8c:	e7ef      	b.n	8006d6e <sbrk_aligned+0x1e>
 8006d8e:	bf00      	nop
 8006d90:	20000720 	.word	0x20000720

08006d94 <_malloc_r>:
 8006d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d98:	1ccd      	adds	r5, r1, #3
 8006d9a:	f025 0503 	bic.w	r5, r5, #3
 8006d9e:	3508      	adds	r5, #8
 8006da0:	2d0c      	cmp	r5, #12
 8006da2:	bf38      	it	cc
 8006da4:	250c      	movcc	r5, #12
 8006da6:	2d00      	cmp	r5, #0
 8006da8:	4606      	mov	r6, r0
 8006daa:	db01      	blt.n	8006db0 <_malloc_r+0x1c>
 8006dac:	42a9      	cmp	r1, r5
 8006dae:	d904      	bls.n	8006dba <_malloc_r+0x26>
 8006db0:	230c      	movs	r3, #12
 8006db2:	6033      	str	r3, [r6, #0]
 8006db4:	2000      	movs	r0, #0
 8006db6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006dba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e90 <_malloc_r+0xfc>
 8006dbe:	f000 f869 	bl	8006e94 <__malloc_lock>
 8006dc2:	f8d8 3000 	ldr.w	r3, [r8]
 8006dc6:	461c      	mov	r4, r3
 8006dc8:	bb44      	cbnz	r4, 8006e1c <_malloc_r+0x88>
 8006dca:	4629      	mov	r1, r5
 8006dcc:	4630      	mov	r0, r6
 8006dce:	f7ff ffbf 	bl	8006d50 <sbrk_aligned>
 8006dd2:	1c43      	adds	r3, r0, #1
 8006dd4:	4604      	mov	r4, r0
 8006dd6:	d158      	bne.n	8006e8a <_malloc_r+0xf6>
 8006dd8:	f8d8 4000 	ldr.w	r4, [r8]
 8006ddc:	4627      	mov	r7, r4
 8006dde:	2f00      	cmp	r7, #0
 8006de0:	d143      	bne.n	8006e6a <_malloc_r+0xd6>
 8006de2:	2c00      	cmp	r4, #0
 8006de4:	d04b      	beq.n	8006e7e <_malloc_r+0xea>
 8006de6:	6823      	ldr	r3, [r4, #0]
 8006de8:	4639      	mov	r1, r7
 8006dea:	4630      	mov	r0, r6
 8006dec:	eb04 0903 	add.w	r9, r4, r3
 8006df0:	f000 fdf6 	bl	80079e0 <_sbrk_r>
 8006df4:	4581      	cmp	r9, r0
 8006df6:	d142      	bne.n	8006e7e <_malloc_r+0xea>
 8006df8:	6821      	ldr	r1, [r4, #0]
 8006dfa:	4630      	mov	r0, r6
 8006dfc:	1a6d      	subs	r5, r5, r1
 8006dfe:	4629      	mov	r1, r5
 8006e00:	f7ff ffa6 	bl	8006d50 <sbrk_aligned>
 8006e04:	3001      	adds	r0, #1
 8006e06:	d03a      	beq.n	8006e7e <_malloc_r+0xea>
 8006e08:	6823      	ldr	r3, [r4, #0]
 8006e0a:	442b      	add	r3, r5
 8006e0c:	6023      	str	r3, [r4, #0]
 8006e0e:	f8d8 3000 	ldr.w	r3, [r8]
 8006e12:	685a      	ldr	r2, [r3, #4]
 8006e14:	bb62      	cbnz	r2, 8006e70 <_malloc_r+0xdc>
 8006e16:	f8c8 7000 	str.w	r7, [r8]
 8006e1a:	e00f      	b.n	8006e3c <_malloc_r+0xa8>
 8006e1c:	6822      	ldr	r2, [r4, #0]
 8006e1e:	1b52      	subs	r2, r2, r5
 8006e20:	d420      	bmi.n	8006e64 <_malloc_r+0xd0>
 8006e22:	2a0b      	cmp	r2, #11
 8006e24:	d917      	bls.n	8006e56 <_malloc_r+0xc2>
 8006e26:	1961      	adds	r1, r4, r5
 8006e28:	42a3      	cmp	r3, r4
 8006e2a:	6025      	str	r5, [r4, #0]
 8006e2c:	bf18      	it	ne
 8006e2e:	6059      	strne	r1, [r3, #4]
 8006e30:	6863      	ldr	r3, [r4, #4]
 8006e32:	bf08      	it	eq
 8006e34:	f8c8 1000 	streq.w	r1, [r8]
 8006e38:	5162      	str	r2, [r4, r5]
 8006e3a:	604b      	str	r3, [r1, #4]
 8006e3c:	4630      	mov	r0, r6
 8006e3e:	f000 f82f 	bl	8006ea0 <__malloc_unlock>
 8006e42:	f104 000b 	add.w	r0, r4, #11
 8006e46:	1d23      	adds	r3, r4, #4
 8006e48:	f020 0007 	bic.w	r0, r0, #7
 8006e4c:	1ac2      	subs	r2, r0, r3
 8006e4e:	bf1c      	itt	ne
 8006e50:	1a1b      	subne	r3, r3, r0
 8006e52:	50a3      	strne	r3, [r4, r2]
 8006e54:	e7af      	b.n	8006db6 <_malloc_r+0x22>
 8006e56:	6862      	ldr	r2, [r4, #4]
 8006e58:	42a3      	cmp	r3, r4
 8006e5a:	bf0c      	ite	eq
 8006e5c:	f8c8 2000 	streq.w	r2, [r8]
 8006e60:	605a      	strne	r2, [r3, #4]
 8006e62:	e7eb      	b.n	8006e3c <_malloc_r+0xa8>
 8006e64:	4623      	mov	r3, r4
 8006e66:	6864      	ldr	r4, [r4, #4]
 8006e68:	e7ae      	b.n	8006dc8 <_malloc_r+0x34>
 8006e6a:	463c      	mov	r4, r7
 8006e6c:	687f      	ldr	r7, [r7, #4]
 8006e6e:	e7b6      	b.n	8006dde <_malloc_r+0x4a>
 8006e70:	461a      	mov	r2, r3
 8006e72:	685b      	ldr	r3, [r3, #4]
 8006e74:	42a3      	cmp	r3, r4
 8006e76:	d1fb      	bne.n	8006e70 <_malloc_r+0xdc>
 8006e78:	2300      	movs	r3, #0
 8006e7a:	6053      	str	r3, [r2, #4]
 8006e7c:	e7de      	b.n	8006e3c <_malloc_r+0xa8>
 8006e7e:	230c      	movs	r3, #12
 8006e80:	4630      	mov	r0, r6
 8006e82:	6033      	str	r3, [r6, #0]
 8006e84:	f000 f80c 	bl	8006ea0 <__malloc_unlock>
 8006e88:	e794      	b.n	8006db4 <_malloc_r+0x20>
 8006e8a:	6005      	str	r5, [r0, #0]
 8006e8c:	e7d6      	b.n	8006e3c <_malloc_r+0xa8>
 8006e8e:	bf00      	nop
 8006e90:	20000724 	.word	0x20000724

08006e94 <__malloc_lock>:
 8006e94:	4801      	ldr	r0, [pc, #4]	@ (8006e9c <__malloc_lock+0x8>)
 8006e96:	f7ff b89a 	b.w	8005fce <__retarget_lock_acquire_recursive>
 8006e9a:	bf00      	nop
 8006e9c:	2000071c 	.word	0x2000071c

08006ea0 <__malloc_unlock>:
 8006ea0:	4801      	ldr	r0, [pc, #4]	@ (8006ea8 <__malloc_unlock+0x8>)
 8006ea2:	f7ff b895 	b.w	8005fd0 <__retarget_lock_release_recursive>
 8006ea6:	bf00      	nop
 8006ea8:	2000071c 	.word	0x2000071c

08006eac <_Balloc>:
 8006eac:	b570      	push	{r4, r5, r6, lr}
 8006eae:	69c6      	ldr	r6, [r0, #28]
 8006eb0:	4604      	mov	r4, r0
 8006eb2:	460d      	mov	r5, r1
 8006eb4:	b976      	cbnz	r6, 8006ed4 <_Balloc+0x28>
 8006eb6:	2010      	movs	r0, #16
 8006eb8:	f7ff ff42 	bl	8006d40 <malloc>
 8006ebc:	4602      	mov	r2, r0
 8006ebe:	61e0      	str	r0, [r4, #28]
 8006ec0:	b920      	cbnz	r0, 8006ecc <_Balloc+0x20>
 8006ec2:	216b      	movs	r1, #107	@ 0x6b
 8006ec4:	4b17      	ldr	r3, [pc, #92]	@ (8006f24 <_Balloc+0x78>)
 8006ec6:	4818      	ldr	r0, [pc, #96]	@ (8006f28 <_Balloc+0x7c>)
 8006ec8:	f000 fd9a 	bl	8007a00 <__assert_func>
 8006ecc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ed0:	6006      	str	r6, [r0, #0]
 8006ed2:	60c6      	str	r6, [r0, #12]
 8006ed4:	69e6      	ldr	r6, [r4, #28]
 8006ed6:	68f3      	ldr	r3, [r6, #12]
 8006ed8:	b183      	cbz	r3, 8006efc <_Balloc+0x50>
 8006eda:	69e3      	ldr	r3, [r4, #28]
 8006edc:	68db      	ldr	r3, [r3, #12]
 8006ede:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ee2:	b9b8      	cbnz	r0, 8006f14 <_Balloc+0x68>
 8006ee4:	2101      	movs	r1, #1
 8006ee6:	fa01 f605 	lsl.w	r6, r1, r5
 8006eea:	1d72      	adds	r2, r6, #5
 8006eec:	4620      	mov	r0, r4
 8006eee:	0092      	lsls	r2, r2, #2
 8006ef0:	f000 fda4 	bl	8007a3c <_calloc_r>
 8006ef4:	b160      	cbz	r0, 8006f10 <_Balloc+0x64>
 8006ef6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006efa:	e00e      	b.n	8006f1a <_Balloc+0x6e>
 8006efc:	2221      	movs	r2, #33	@ 0x21
 8006efe:	2104      	movs	r1, #4
 8006f00:	4620      	mov	r0, r4
 8006f02:	f000 fd9b 	bl	8007a3c <_calloc_r>
 8006f06:	69e3      	ldr	r3, [r4, #28]
 8006f08:	60f0      	str	r0, [r6, #12]
 8006f0a:	68db      	ldr	r3, [r3, #12]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d1e4      	bne.n	8006eda <_Balloc+0x2e>
 8006f10:	2000      	movs	r0, #0
 8006f12:	bd70      	pop	{r4, r5, r6, pc}
 8006f14:	6802      	ldr	r2, [r0, #0]
 8006f16:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f20:	e7f7      	b.n	8006f12 <_Balloc+0x66>
 8006f22:	bf00      	nop
 8006f24:	0800a025 	.word	0x0800a025
 8006f28:	0800a0a5 	.word	0x0800a0a5

08006f2c <_Bfree>:
 8006f2c:	b570      	push	{r4, r5, r6, lr}
 8006f2e:	69c6      	ldr	r6, [r0, #28]
 8006f30:	4605      	mov	r5, r0
 8006f32:	460c      	mov	r4, r1
 8006f34:	b976      	cbnz	r6, 8006f54 <_Bfree+0x28>
 8006f36:	2010      	movs	r0, #16
 8006f38:	f7ff ff02 	bl	8006d40 <malloc>
 8006f3c:	4602      	mov	r2, r0
 8006f3e:	61e8      	str	r0, [r5, #28]
 8006f40:	b920      	cbnz	r0, 8006f4c <_Bfree+0x20>
 8006f42:	218f      	movs	r1, #143	@ 0x8f
 8006f44:	4b08      	ldr	r3, [pc, #32]	@ (8006f68 <_Bfree+0x3c>)
 8006f46:	4809      	ldr	r0, [pc, #36]	@ (8006f6c <_Bfree+0x40>)
 8006f48:	f000 fd5a 	bl	8007a00 <__assert_func>
 8006f4c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f50:	6006      	str	r6, [r0, #0]
 8006f52:	60c6      	str	r6, [r0, #12]
 8006f54:	b13c      	cbz	r4, 8006f66 <_Bfree+0x3a>
 8006f56:	69eb      	ldr	r3, [r5, #28]
 8006f58:	6862      	ldr	r2, [r4, #4]
 8006f5a:	68db      	ldr	r3, [r3, #12]
 8006f5c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f60:	6021      	str	r1, [r4, #0]
 8006f62:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f66:	bd70      	pop	{r4, r5, r6, pc}
 8006f68:	0800a025 	.word	0x0800a025
 8006f6c:	0800a0a5 	.word	0x0800a0a5

08006f70 <__multadd>:
 8006f70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f74:	4607      	mov	r7, r0
 8006f76:	460c      	mov	r4, r1
 8006f78:	461e      	mov	r6, r3
 8006f7a:	2000      	movs	r0, #0
 8006f7c:	690d      	ldr	r5, [r1, #16]
 8006f7e:	f101 0c14 	add.w	ip, r1, #20
 8006f82:	f8dc 3000 	ldr.w	r3, [ip]
 8006f86:	3001      	adds	r0, #1
 8006f88:	b299      	uxth	r1, r3
 8006f8a:	fb02 6101 	mla	r1, r2, r1, r6
 8006f8e:	0c1e      	lsrs	r6, r3, #16
 8006f90:	0c0b      	lsrs	r3, r1, #16
 8006f92:	fb02 3306 	mla	r3, r2, r6, r3
 8006f96:	b289      	uxth	r1, r1
 8006f98:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f9c:	4285      	cmp	r5, r0
 8006f9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006fa2:	f84c 1b04 	str.w	r1, [ip], #4
 8006fa6:	dcec      	bgt.n	8006f82 <__multadd+0x12>
 8006fa8:	b30e      	cbz	r6, 8006fee <__multadd+0x7e>
 8006faa:	68a3      	ldr	r3, [r4, #8]
 8006fac:	42ab      	cmp	r3, r5
 8006fae:	dc19      	bgt.n	8006fe4 <__multadd+0x74>
 8006fb0:	6861      	ldr	r1, [r4, #4]
 8006fb2:	4638      	mov	r0, r7
 8006fb4:	3101      	adds	r1, #1
 8006fb6:	f7ff ff79 	bl	8006eac <_Balloc>
 8006fba:	4680      	mov	r8, r0
 8006fbc:	b928      	cbnz	r0, 8006fca <__multadd+0x5a>
 8006fbe:	4602      	mov	r2, r0
 8006fc0:	21ba      	movs	r1, #186	@ 0xba
 8006fc2:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff4 <__multadd+0x84>)
 8006fc4:	480c      	ldr	r0, [pc, #48]	@ (8006ff8 <__multadd+0x88>)
 8006fc6:	f000 fd1b 	bl	8007a00 <__assert_func>
 8006fca:	6922      	ldr	r2, [r4, #16]
 8006fcc:	f104 010c 	add.w	r1, r4, #12
 8006fd0:	3202      	adds	r2, #2
 8006fd2:	0092      	lsls	r2, r2, #2
 8006fd4:	300c      	adds	r0, #12
 8006fd6:	f7ff f80a 	bl	8005fee <memcpy>
 8006fda:	4621      	mov	r1, r4
 8006fdc:	4638      	mov	r0, r7
 8006fde:	f7ff ffa5 	bl	8006f2c <_Bfree>
 8006fe2:	4644      	mov	r4, r8
 8006fe4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fe8:	3501      	adds	r5, #1
 8006fea:	615e      	str	r6, [r3, #20]
 8006fec:	6125      	str	r5, [r4, #16]
 8006fee:	4620      	mov	r0, r4
 8006ff0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006ff4:	0800a094 	.word	0x0800a094
 8006ff8:	0800a0a5 	.word	0x0800a0a5

08006ffc <__hi0bits>:
 8006ffc:	4603      	mov	r3, r0
 8006ffe:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007002:	bf3a      	itte	cc
 8007004:	0403      	lslcc	r3, r0, #16
 8007006:	2010      	movcc	r0, #16
 8007008:	2000      	movcs	r0, #0
 800700a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800700e:	bf3c      	itt	cc
 8007010:	021b      	lslcc	r3, r3, #8
 8007012:	3008      	addcc	r0, #8
 8007014:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007018:	bf3c      	itt	cc
 800701a:	011b      	lslcc	r3, r3, #4
 800701c:	3004      	addcc	r0, #4
 800701e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007022:	bf3c      	itt	cc
 8007024:	009b      	lslcc	r3, r3, #2
 8007026:	3002      	addcc	r0, #2
 8007028:	2b00      	cmp	r3, #0
 800702a:	db05      	blt.n	8007038 <__hi0bits+0x3c>
 800702c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007030:	f100 0001 	add.w	r0, r0, #1
 8007034:	bf08      	it	eq
 8007036:	2020      	moveq	r0, #32
 8007038:	4770      	bx	lr

0800703a <__lo0bits>:
 800703a:	6803      	ldr	r3, [r0, #0]
 800703c:	4602      	mov	r2, r0
 800703e:	f013 0007 	ands.w	r0, r3, #7
 8007042:	d00b      	beq.n	800705c <__lo0bits+0x22>
 8007044:	07d9      	lsls	r1, r3, #31
 8007046:	d421      	bmi.n	800708c <__lo0bits+0x52>
 8007048:	0798      	lsls	r0, r3, #30
 800704a:	bf49      	itett	mi
 800704c:	085b      	lsrmi	r3, r3, #1
 800704e:	089b      	lsrpl	r3, r3, #2
 8007050:	2001      	movmi	r0, #1
 8007052:	6013      	strmi	r3, [r2, #0]
 8007054:	bf5c      	itt	pl
 8007056:	2002      	movpl	r0, #2
 8007058:	6013      	strpl	r3, [r2, #0]
 800705a:	4770      	bx	lr
 800705c:	b299      	uxth	r1, r3
 800705e:	b909      	cbnz	r1, 8007064 <__lo0bits+0x2a>
 8007060:	2010      	movs	r0, #16
 8007062:	0c1b      	lsrs	r3, r3, #16
 8007064:	b2d9      	uxtb	r1, r3
 8007066:	b909      	cbnz	r1, 800706c <__lo0bits+0x32>
 8007068:	3008      	adds	r0, #8
 800706a:	0a1b      	lsrs	r3, r3, #8
 800706c:	0719      	lsls	r1, r3, #28
 800706e:	bf04      	itt	eq
 8007070:	091b      	lsreq	r3, r3, #4
 8007072:	3004      	addeq	r0, #4
 8007074:	0799      	lsls	r1, r3, #30
 8007076:	bf04      	itt	eq
 8007078:	089b      	lsreq	r3, r3, #2
 800707a:	3002      	addeq	r0, #2
 800707c:	07d9      	lsls	r1, r3, #31
 800707e:	d403      	bmi.n	8007088 <__lo0bits+0x4e>
 8007080:	085b      	lsrs	r3, r3, #1
 8007082:	f100 0001 	add.w	r0, r0, #1
 8007086:	d003      	beq.n	8007090 <__lo0bits+0x56>
 8007088:	6013      	str	r3, [r2, #0]
 800708a:	4770      	bx	lr
 800708c:	2000      	movs	r0, #0
 800708e:	4770      	bx	lr
 8007090:	2020      	movs	r0, #32
 8007092:	4770      	bx	lr

08007094 <__i2b>:
 8007094:	b510      	push	{r4, lr}
 8007096:	460c      	mov	r4, r1
 8007098:	2101      	movs	r1, #1
 800709a:	f7ff ff07 	bl	8006eac <_Balloc>
 800709e:	4602      	mov	r2, r0
 80070a0:	b928      	cbnz	r0, 80070ae <__i2b+0x1a>
 80070a2:	f240 1145 	movw	r1, #325	@ 0x145
 80070a6:	4b04      	ldr	r3, [pc, #16]	@ (80070b8 <__i2b+0x24>)
 80070a8:	4804      	ldr	r0, [pc, #16]	@ (80070bc <__i2b+0x28>)
 80070aa:	f000 fca9 	bl	8007a00 <__assert_func>
 80070ae:	2301      	movs	r3, #1
 80070b0:	6144      	str	r4, [r0, #20]
 80070b2:	6103      	str	r3, [r0, #16]
 80070b4:	bd10      	pop	{r4, pc}
 80070b6:	bf00      	nop
 80070b8:	0800a094 	.word	0x0800a094
 80070bc:	0800a0a5 	.word	0x0800a0a5

080070c0 <__multiply>:
 80070c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070c4:	4614      	mov	r4, r2
 80070c6:	690a      	ldr	r2, [r1, #16]
 80070c8:	6923      	ldr	r3, [r4, #16]
 80070ca:	460f      	mov	r7, r1
 80070cc:	429a      	cmp	r2, r3
 80070ce:	bfa2      	ittt	ge
 80070d0:	4623      	movge	r3, r4
 80070d2:	460c      	movge	r4, r1
 80070d4:	461f      	movge	r7, r3
 80070d6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80070da:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80070de:	68a3      	ldr	r3, [r4, #8]
 80070e0:	6861      	ldr	r1, [r4, #4]
 80070e2:	eb0a 0609 	add.w	r6, sl, r9
 80070e6:	42b3      	cmp	r3, r6
 80070e8:	b085      	sub	sp, #20
 80070ea:	bfb8      	it	lt
 80070ec:	3101      	addlt	r1, #1
 80070ee:	f7ff fedd 	bl	8006eac <_Balloc>
 80070f2:	b930      	cbnz	r0, 8007102 <__multiply+0x42>
 80070f4:	4602      	mov	r2, r0
 80070f6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80070fa:	4b43      	ldr	r3, [pc, #268]	@ (8007208 <__multiply+0x148>)
 80070fc:	4843      	ldr	r0, [pc, #268]	@ (800720c <__multiply+0x14c>)
 80070fe:	f000 fc7f 	bl	8007a00 <__assert_func>
 8007102:	f100 0514 	add.w	r5, r0, #20
 8007106:	462b      	mov	r3, r5
 8007108:	2200      	movs	r2, #0
 800710a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800710e:	4543      	cmp	r3, r8
 8007110:	d321      	bcc.n	8007156 <__multiply+0x96>
 8007112:	f107 0114 	add.w	r1, r7, #20
 8007116:	f104 0214 	add.w	r2, r4, #20
 800711a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800711e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007122:	9302      	str	r3, [sp, #8]
 8007124:	1b13      	subs	r3, r2, r4
 8007126:	3b15      	subs	r3, #21
 8007128:	f023 0303 	bic.w	r3, r3, #3
 800712c:	3304      	adds	r3, #4
 800712e:	f104 0715 	add.w	r7, r4, #21
 8007132:	42ba      	cmp	r2, r7
 8007134:	bf38      	it	cc
 8007136:	2304      	movcc	r3, #4
 8007138:	9301      	str	r3, [sp, #4]
 800713a:	9b02      	ldr	r3, [sp, #8]
 800713c:	9103      	str	r1, [sp, #12]
 800713e:	428b      	cmp	r3, r1
 8007140:	d80c      	bhi.n	800715c <__multiply+0x9c>
 8007142:	2e00      	cmp	r6, #0
 8007144:	dd03      	ble.n	800714e <__multiply+0x8e>
 8007146:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800714a:	2b00      	cmp	r3, #0
 800714c:	d05a      	beq.n	8007204 <__multiply+0x144>
 800714e:	6106      	str	r6, [r0, #16]
 8007150:	b005      	add	sp, #20
 8007152:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007156:	f843 2b04 	str.w	r2, [r3], #4
 800715a:	e7d8      	b.n	800710e <__multiply+0x4e>
 800715c:	f8b1 a000 	ldrh.w	sl, [r1]
 8007160:	f1ba 0f00 	cmp.w	sl, #0
 8007164:	d023      	beq.n	80071ae <__multiply+0xee>
 8007166:	46a9      	mov	r9, r5
 8007168:	f04f 0c00 	mov.w	ip, #0
 800716c:	f104 0e14 	add.w	lr, r4, #20
 8007170:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007174:	f8d9 3000 	ldr.w	r3, [r9]
 8007178:	fa1f fb87 	uxth.w	fp, r7
 800717c:	b29b      	uxth	r3, r3
 800717e:	fb0a 330b 	mla	r3, sl, fp, r3
 8007182:	4463      	add	r3, ip
 8007184:	f8d9 c000 	ldr.w	ip, [r9]
 8007188:	0c3f      	lsrs	r7, r7, #16
 800718a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800718e:	fb0a c707 	mla	r7, sl, r7, ip
 8007192:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007196:	b29b      	uxth	r3, r3
 8007198:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800719c:	4572      	cmp	r2, lr
 800719e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80071a2:	f849 3b04 	str.w	r3, [r9], #4
 80071a6:	d8e3      	bhi.n	8007170 <__multiply+0xb0>
 80071a8:	9b01      	ldr	r3, [sp, #4]
 80071aa:	f845 c003 	str.w	ip, [r5, r3]
 80071ae:	9b03      	ldr	r3, [sp, #12]
 80071b0:	3104      	adds	r1, #4
 80071b2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80071b6:	f1b9 0f00 	cmp.w	r9, #0
 80071ba:	d021      	beq.n	8007200 <__multiply+0x140>
 80071bc:	46ae      	mov	lr, r5
 80071be:	f04f 0a00 	mov.w	sl, #0
 80071c2:	682b      	ldr	r3, [r5, #0]
 80071c4:	f104 0c14 	add.w	ip, r4, #20
 80071c8:	f8bc b000 	ldrh.w	fp, [ip]
 80071cc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80071d0:	b29b      	uxth	r3, r3
 80071d2:	fb09 770b 	mla	r7, r9, fp, r7
 80071d6:	4457      	add	r7, sl
 80071d8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071dc:	f84e 3b04 	str.w	r3, [lr], #4
 80071e0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071e4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071e8:	f8be 3000 	ldrh.w	r3, [lr]
 80071ec:	4562      	cmp	r2, ip
 80071ee:	fb09 330a 	mla	r3, r9, sl, r3
 80071f2:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80071f6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071fa:	d8e5      	bhi.n	80071c8 <__multiply+0x108>
 80071fc:	9f01      	ldr	r7, [sp, #4]
 80071fe:	51eb      	str	r3, [r5, r7]
 8007200:	3504      	adds	r5, #4
 8007202:	e79a      	b.n	800713a <__multiply+0x7a>
 8007204:	3e01      	subs	r6, #1
 8007206:	e79c      	b.n	8007142 <__multiply+0x82>
 8007208:	0800a094 	.word	0x0800a094
 800720c:	0800a0a5 	.word	0x0800a0a5

08007210 <__pow5mult>:
 8007210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007214:	4615      	mov	r5, r2
 8007216:	f012 0203 	ands.w	r2, r2, #3
 800721a:	4607      	mov	r7, r0
 800721c:	460e      	mov	r6, r1
 800721e:	d007      	beq.n	8007230 <__pow5mult+0x20>
 8007220:	4c25      	ldr	r4, [pc, #148]	@ (80072b8 <__pow5mult+0xa8>)
 8007222:	3a01      	subs	r2, #1
 8007224:	2300      	movs	r3, #0
 8007226:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800722a:	f7ff fea1 	bl	8006f70 <__multadd>
 800722e:	4606      	mov	r6, r0
 8007230:	10ad      	asrs	r5, r5, #2
 8007232:	d03d      	beq.n	80072b0 <__pow5mult+0xa0>
 8007234:	69fc      	ldr	r4, [r7, #28]
 8007236:	b97c      	cbnz	r4, 8007258 <__pow5mult+0x48>
 8007238:	2010      	movs	r0, #16
 800723a:	f7ff fd81 	bl	8006d40 <malloc>
 800723e:	4602      	mov	r2, r0
 8007240:	61f8      	str	r0, [r7, #28]
 8007242:	b928      	cbnz	r0, 8007250 <__pow5mult+0x40>
 8007244:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8007248:	4b1c      	ldr	r3, [pc, #112]	@ (80072bc <__pow5mult+0xac>)
 800724a:	481d      	ldr	r0, [pc, #116]	@ (80072c0 <__pow5mult+0xb0>)
 800724c:	f000 fbd8 	bl	8007a00 <__assert_func>
 8007250:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007254:	6004      	str	r4, [r0, #0]
 8007256:	60c4      	str	r4, [r0, #12]
 8007258:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800725c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007260:	b94c      	cbnz	r4, 8007276 <__pow5mult+0x66>
 8007262:	f240 2171 	movw	r1, #625	@ 0x271
 8007266:	4638      	mov	r0, r7
 8007268:	f7ff ff14 	bl	8007094 <__i2b>
 800726c:	2300      	movs	r3, #0
 800726e:	4604      	mov	r4, r0
 8007270:	f8c8 0008 	str.w	r0, [r8, #8]
 8007274:	6003      	str	r3, [r0, #0]
 8007276:	f04f 0900 	mov.w	r9, #0
 800727a:	07eb      	lsls	r3, r5, #31
 800727c:	d50a      	bpl.n	8007294 <__pow5mult+0x84>
 800727e:	4631      	mov	r1, r6
 8007280:	4622      	mov	r2, r4
 8007282:	4638      	mov	r0, r7
 8007284:	f7ff ff1c 	bl	80070c0 <__multiply>
 8007288:	4680      	mov	r8, r0
 800728a:	4631      	mov	r1, r6
 800728c:	4638      	mov	r0, r7
 800728e:	f7ff fe4d 	bl	8006f2c <_Bfree>
 8007292:	4646      	mov	r6, r8
 8007294:	106d      	asrs	r5, r5, #1
 8007296:	d00b      	beq.n	80072b0 <__pow5mult+0xa0>
 8007298:	6820      	ldr	r0, [r4, #0]
 800729a:	b938      	cbnz	r0, 80072ac <__pow5mult+0x9c>
 800729c:	4622      	mov	r2, r4
 800729e:	4621      	mov	r1, r4
 80072a0:	4638      	mov	r0, r7
 80072a2:	f7ff ff0d 	bl	80070c0 <__multiply>
 80072a6:	6020      	str	r0, [r4, #0]
 80072a8:	f8c0 9000 	str.w	r9, [r0]
 80072ac:	4604      	mov	r4, r0
 80072ae:	e7e4      	b.n	800727a <__pow5mult+0x6a>
 80072b0:	4630      	mov	r0, r6
 80072b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072b6:	bf00      	nop
 80072b8:	0800a100 	.word	0x0800a100
 80072bc:	0800a025 	.word	0x0800a025
 80072c0:	0800a0a5 	.word	0x0800a0a5

080072c4 <__lshift>:
 80072c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072c8:	460c      	mov	r4, r1
 80072ca:	4607      	mov	r7, r0
 80072cc:	4691      	mov	r9, r2
 80072ce:	6923      	ldr	r3, [r4, #16]
 80072d0:	6849      	ldr	r1, [r1, #4]
 80072d2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072d6:	68a3      	ldr	r3, [r4, #8]
 80072d8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072dc:	f108 0601 	add.w	r6, r8, #1
 80072e0:	42b3      	cmp	r3, r6
 80072e2:	db0b      	blt.n	80072fc <__lshift+0x38>
 80072e4:	4638      	mov	r0, r7
 80072e6:	f7ff fde1 	bl	8006eac <_Balloc>
 80072ea:	4605      	mov	r5, r0
 80072ec:	b948      	cbnz	r0, 8007302 <__lshift+0x3e>
 80072ee:	4602      	mov	r2, r0
 80072f0:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80072f4:	4b27      	ldr	r3, [pc, #156]	@ (8007394 <__lshift+0xd0>)
 80072f6:	4828      	ldr	r0, [pc, #160]	@ (8007398 <__lshift+0xd4>)
 80072f8:	f000 fb82 	bl	8007a00 <__assert_func>
 80072fc:	3101      	adds	r1, #1
 80072fe:	005b      	lsls	r3, r3, #1
 8007300:	e7ee      	b.n	80072e0 <__lshift+0x1c>
 8007302:	2300      	movs	r3, #0
 8007304:	f100 0114 	add.w	r1, r0, #20
 8007308:	f100 0210 	add.w	r2, r0, #16
 800730c:	4618      	mov	r0, r3
 800730e:	4553      	cmp	r3, sl
 8007310:	db33      	blt.n	800737a <__lshift+0xb6>
 8007312:	6920      	ldr	r0, [r4, #16]
 8007314:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007318:	f104 0314 	add.w	r3, r4, #20
 800731c:	f019 091f 	ands.w	r9, r9, #31
 8007320:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007324:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007328:	d02b      	beq.n	8007382 <__lshift+0xbe>
 800732a:	468a      	mov	sl, r1
 800732c:	2200      	movs	r2, #0
 800732e:	f1c9 0e20 	rsb	lr, r9, #32
 8007332:	6818      	ldr	r0, [r3, #0]
 8007334:	fa00 f009 	lsl.w	r0, r0, r9
 8007338:	4310      	orrs	r0, r2
 800733a:	f84a 0b04 	str.w	r0, [sl], #4
 800733e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007342:	459c      	cmp	ip, r3
 8007344:	fa22 f20e 	lsr.w	r2, r2, lr
 8007348:	d8f3      	bhi.n	8007332 <__lshift+0x6e>
 800734a:	ebac 0304 	sub.w	r3, ip, r4
 800734e:	3b15      	subs	r3, #21
 8007350:	f023 0303 	bic.w	r3, r3, #3
 8007354:	3304      	adds	r3, #4
 8007356:	f104 0015 	add.w	r0, r4, #21
 800735a:	4584      	cmp	ip, r0
 800735c:	bf38      	it	cc
 800735e:	2304      	movcc	r3, #4
 8007360:	50ca      	str	r2, [r1, r3]
 8007362:	b10a      	cbz	r2, 8007368 <__lshift+0xa4>
 8007364:	f108 0602 	add.w	r6, r8, #2
 8007368:	3e01      	subs	r6, #1
 800736a:	4638      	mov	r0, r7
 800736c:	4621      	mov	r1, r4
 800736e:	612e      	str	r6, [r5, #16]
 8007370:	f7ff fddc 	bl	8006f2c <_Bfree>
 8007374:	4628      	mov	r0, r5
 8007376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800737a:	f842 0f04 	str.w	r0, [r2, #4]!
 800737e:	3301      	adds	r3, #1
 8007380:	e7c5      	b.n	800730e <__lshift+0x4a>
 8007382:	3904      	subs	r1, #4
 8007384:	f853 2b04 	ldr.w	r2, [r3], #4
 8007388:	459c      	cmp	ip, r3
 800738a:	f841 2f04 	str.w	r2, [r1, #4]!
 800738e:	d8f9      	bhi.n	8007384 <__lshift+0xc0>
 8007390:	e7ea      	b.n	8007368 <__lshift+0xa4>
 8007392:	bf00      	nop
 8007394:	0800a094 	.word	0x0800a094
 8007398:	0800a0a5 	.word	0x0800a0a5

0800739c <__mcmp>:
 800739c:	4603      	mov	r3, r0
 800739e:	690a      	ldr	r2, [r1, #16]
 80073a0:	6900      	ldr	r0, [r0, #16]
 80073a2:	b530      	push	{r4, r5, lr}
 80073a4:	1a80      	subs	r0, r0, r2
 80073a6:	d10e      	bne.n	80073c6 <__mcmp+0x2a>
 80073a8:	3314      	adds	r3, #20
 80073aa:	3114      	adds	r1, #20
 80073ac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073b0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073b4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073b8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073bc:	4295      	cmp	r5, r2
 80073be:	d003      	beq.n	80073c8 <__mcmp+0x2c>
 80073c0:	d205      	bcs.n	80073ce <__mcmp+0x32>
 80073c2:	f04f 30ff 	mov.w	r0, #4294967295
 80073c6:	bd30      	pop	{r4, r5, pc}
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	d3f3      	bcc.n	80073b4 <__mcmp+0x18>
 80073cc:	e7fb      	b.n	80073c6 <__mcmp+0x2a>
 80073ce:	2001      	movs	r0, #1
 80073d0:	e7f9      	b.n	80073c6 <__mcmp+0x2a>
	...

080073d4 <__mdiff>:
 80073d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073d8:	4689      	mov	r9, r1
 80073da:	4606      	mov	r6, r0
 80073dc:	4611      	mov	r1, r2
 80073de:	4648      	mov	r0, r9
 80073e0:	4614      	mov	r4, r2
 80073e2:	f7ff ffdb 	bl	800739c <__mcmp>
 80073e6:	1e05      	subs	r5, r0, #0
 80073e8:	d112      	bne.n	8007410 <__mdiff+0x3c>
 80073ea:	4629      	mov	r1, r5
 80073ec:	4630      	mov	r0, r6
 80073ee:	f7ff fd5d 	bl	8006eac <_Balloc>
 80073f2:	4602      	mov	r2, r0
 80073f4:	b928      	cbnz	r0, 8007402 <__mdiff+0x2e>
 80073f6:	f240 2137 	movw	r1, #567	@ 0x237
 80073fa:	4b3e      	ldr	r3, [pc, #248]	@ (80074f4 <__mdiff+0x120>)
 80073fc:	483e      	ldr	r0, [pc, #248]	@ (80074f8 <__mdiff+0x124>)
 80073fe:	f000 faff 	bl	8007a00 <__assert_func>
 8007402:	2301      	movs	r3, #1
 8007404:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007408:	4610      	mov	r0, r2
 800740a:	b003      	add	sp, #12
 800740c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007410:	bfbc      	itt	lt
 8007412:	464b      	movlt	r3, r9
 8007414:	46a1      	movlt	r9, r4
 8007416:	4630      	mov	r0, r6
 8007418:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800741c:	bfba      	itte	lt
 800741e:	461c      	movlt	r4, r3
 8007420:	2501      	movlt	r5, #1
 8007422:	2500      	movge	r5, #0
 8007424:	f7ff fd42 	bl	8006eac <_Balloc>
 8007428:	4602      	mov	r2, r0
 800742a:	b918      	cbnz	r0, 8007434 <__mdiff+0x60>
 800742c:	f240 2145 	movw	r1, #581	@ 0x245
 8007430:	4b30      	ldr	r3, [pc, #192]	@ (80074f4 <__mdiff+0x120>)
 8007432:	e7e3      	b.n	80073fc <__mdiff+0x28>
 8007434:	f100 0b14 	add.w	fp, r0, #20
 8007438:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800743c:	f109 0310 	add.w	r3, r9, #16
 8007440:	60c5      	str	r5, [r0, #12]
 8007442:	f04f 0c00 	mov.w	ip, #0
 8007446:	f109 0514 	add.w	r5, r9, #20
 800744a:	46d9      	mov	r9, fp
 800744c:	6926      	ldr	r6, [r4, #16]
 800744e:	f104 0e14 	add.w	lr, r4, #20
 8007452:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007456:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800745a:	9301      	str	r3, [sp, #4]
 800745c:	9b01      	ldr	r3, [sp, #4]
 800745e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007462:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007466:	b281      	uxth	r1, r0
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	fa1f f38a 	uxth.w	r3, sl
 800746e:	1a5b      	subs	r3, r3, r1
 8007470:	0c00      	lsrs	r0, r0, #16
 8007472:	4463      	add	r3, ip
 8007474:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8007478:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800747c:	b29b      	uxth	r3, r3
 800747e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007482:	4576      	cmp	r6, lr
 8007484:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007488:	f849 3b04 	str.w	r3, [r9], #4
 800748c:	d8e6      	bhi.n	800745c <__mdiff+0x88>
 800748e:	1b33      	subs	r3, r6, r4
 8007490:	3b15      	subs	r3, #21
 8007492:	f023 0303 	bic.w	r3, r3, #3
 8007496:	3415      	adds	r4, #21
 8007498:	3304      	adds	r3, #4
 800749a:	42a6      	cmp	r6, r4
 800749c:	bf38      	it	cc
 800749e:	2304      	movcc	r3, #4
 80074a0:	441d      	add	r5, r3
 80074a2:	445b      	add	r3, fp
 80074a4:	461e      	mov	r6, r3
 80074a6:	462c      	mov	r4, r5
 80074a8:	4544      	cmp	r4, r8
 80074aa:	d30e      	bcc.n	80074ca <__mdiff+0xf6>
 80074ac:	f108 0103 	add.w	r1, r8, #3
 80074b0:	1b49      	subs	r1, r1, r5
 80074b2:	f021 0103 	bic.w	r1, r1, #3
 80074b6:	3d03      	subs	r5, #3
 80074b8:	45a8      	cmp	r8, r5
 80074ba:	bf38      	it	cc
 80074bc:	2100      	movcc	r1, #0
 80074be:	440b      	add	r3, r1
 80074c0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074c4:	b199      	cbz	r1, 80074ee <__mdiff+0x11a>
 80074c6:	6117      	str	r7, [r2, #16]
 80074c8:	e79e      	b.n	8007408 <__mdiff+0x34>
 80074ca:	46e6      	mov	lr, ip
 80074cc:	f854 1b04 	ldr.w	r1, [r4], #4
 80074d0:	fa1f fc81 	uxth.w	ip, r1
 80074d4:	44f4      	add	ip, lr
 80074d6:	0c08      	lsrs	r0, r1, #16
 80074d8:	4471      	add	r1, lr
 80074da:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80074de:	b289      	uxth	r1, r1
 80074e0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074e4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074e8:	f846 1b04 	str.w	r1, [r6], #4
 80074ec:	e7dc      	b.n	80074a8 <__mdiff+0xd4>
 80074ee:	3f01      	subs	r7, #1
 80074f0:	e7e6      	b.n	80074c0 <__mdiff+0xec>
 80074f2:	bf00      	nop
 80074f4:	0800a094 	.word	0x0800a094
 80074f8:	0800a0a5 	.word	0x0800a0a5

080074fc <__d2b>:
 80074fc:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8007500:	2101      	movs	r1, #1
 8007502:	4690      	mov	r8, r2
 8007504:	4699      	mov	r9, r3
 8007506:	9e08      	ldr	r6, [sp, #32]
 8007508:	f7ff fcd0 	bl	8006eac <_Balloc>
 800750c:	4604      	mov	r4, r0
 800750e:	b930      	cbnz	r0, 800751e <__d2b+0x22>
 8007510:	4602      	mov	r2, r0
 8007512:	f240 310f 	movw	r1, #783	@ 0x30f
 8007516:	4b23      	ldr	r3, [pc, #140]	@ (80075a4 <__d2b+0xa8>)
 8007518:	4823      	ldr	r0, [pc, #140]	@ (80075a8 <__d2b+0xac>)
 800751a:	f000 fa71 	bl	8007a00 <__assert_func>
 800751e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007522:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007526:	b10d      	cbz	r5, 800752c <__d2b+0x30>
 8007528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800752c:	9301      	str	r3, [sp, #4]
 800752e:	f1b8 0300 	subs.w	r3, r8, #0
 8007532:	d024      	beq.n	800757e <__d2b+0x82>
 8007534:	4668      	mov	r0, sp
 8007536:	9300      	str	r3, [sp, #0]
 8007538:	f7ff fd7f 	bl	800703a <__lo0bits>
 800753c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007540:	b1d8      	cbz	r0, 800757a <__d2b+0x7e>
 8007542:	f1c0 0320 	rsb	r3, r0, #32
 8007546:	fa02 f303 	lsl.w	r3, r2, r3
 800754a:	430b      	orrs	r3, r1
 800754c:	40c2      	lsrs	r2, r0
 800754e:	6163      	str	r3, [r4, #20]
 8007550:	9201      	str	r2, [sp, #4]
 8007552:	9b01      	ldr	r3, [sp, #4]
 8007554:	2b00      	cmp	r3, #0
 8007556:	bf0c      	ite	eq
 8007558:	2201      	moveq	r2, #1
 800755a:	2202      	movne	r2, #2
 800755c:	61a3      	str	r3, [r4, #24]
 800755e:	6122      	str	r2, [r4, #16]
 8007560:	b1ad      	cbz	r5, 800758e <__d2b+0x92>
 8007562:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007566:	4405      	add	r5, r0
 8007568:	6035      	str	r5, [r6, #0]
 800756a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800756e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007570:	6018      	str	r0, [r3, #0]
 8007572:	4620      	mov	r0, r4
 8007574:	b002      	add	sp, #8
 8007576:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800757a:	6161      	str	r1, [r4, #20]
 800757c:	e7e9      	b.n	8007552 <__d2b+0x56>
 800757e:	a801      	add	r0, sp, #4
 8007580:	f7ff fd5b 	bl	800703a <__lo0bits>
 8007584:	9b01      	ldr	r3, [sp, #4]
 8007586:	2201      	movs	r2, #1
 8007588:	6163      	str	r3, [r4, #20]
 800758a:	3020      	adds	r0, #32
 800758c:	e7e7      	b.n	800755e <__d2b+0x62>
 800758e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007592:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007596:	6030      	str	r0, [r6, #0]
 8007598:	6918      	ldr	r0, [r3, #16]
 800759a:	f7ff fd2f 	bl	8006ffc <__hi0bits>
 800759e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80075a2:	e7e4      	b.n	800756e <__d2b+0x72>
 80075a4:	0800a094 	.word	0x0800a094
 80075a8:	0800a0a5 	.word	0x0800a0a5

080075ac <__ssputs_r>:
 80075ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80075b0:	461f      	mov	r7, r3
 80075b2:	688e      	ldr	r6, [r1, #8]
 80075b4:	4682      	mov	sl, r0
 80075b6:	42be      	cmp	r6, r7
 80075b8:	460c      	mov	r4, r1
 80075ba:	4690      	mov	r8, r2
 80075bc:	680b      	ldr	r3, [r1, #0]
 80075be:	d82d      	bhi.n	800761c <__ssputs_r+0x70>
 80075c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80075c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80075c8:	d026      	beq.n	8007618 <__ssputs_r+0x6c>
 80075ca:	6965      	ldr	r5, [r4, #20]
 80075cc:	6909      	ldr	r1, [r1, #16]
 80075ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80075d2:	eba3 0901 	sub.w	r9, r3, r1
 80075d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80075da:	1c7b      	adds	r3, r7, #1
 80075dc:	444b      	add	r3, r9
 80075de:	106d      	asrs	r5, r5, #1
 80075e0:	429d      	cmp	r5, r3
 80075e2:	bf38      	it	cc
 80075e4:	461d      	movcc	r5, r3
 80075e6:	0553      	lsls	r3, r2, #21
 80075e8:	d527      	bpl.n	800763a <__ssputs_r+0x8e>
 80075ea:	4629      	mov	r1, r5
 80075ec:	f7ff fbd2 	bl	8006d94 <_malloc_r>
 80075f0:	4606      	mov	r6, r0
 80075f2:	b360      	cbz	r0, 800764e <__ssputs_r+0xa2>
 80075f4:	464a      	mov	r2, r9
 80075f6:	6921      	ldr	r1, [r4, #16]
 80075f8:	f7fe fcf9 	bl	8005fee <memcpy>
 80075fc:	89a3      	ldrh	r3, [r4, #12]
 80075fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007602:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007606:	81a3      	strh	r3, [r4, #12]
 8007608:	6126      	str	r6, [r4, #16]
 800760a:	444e      	add	r6, r9
 800760c:	6026      	str	r6, [r4, #0]
 800760e:	463e      	mov	r6, r7
 8007610:	6165      	str	r5, [r4, #20]
 8007612:	eba5 0509 	sub.w	r5, r5, r9
 8007616:	60a5      	str	r5, [r4, #8]
 8007618:	42be      	cmp	r6, r7
 800761a:	d900      	bls.n	800761e <__ssputs_r+0x72>
 800761c:	463e      	mov	r6, r7
 800761e:	4632      	mov	r2, r6
 8007620:	4641      	mov	r1, r8
 8007622:	6820      	ldr	r0, [r4, #0]
 8007624:	f000 f9c2 	bl	80079ac <memmove>
 8007628:	2000      	movs	r0, #0
 800762a:	68a3      	ldr	r3, [r4, #8]
 800762c:	1b9b      	subs	r3, r3, r6
 800762e:	60a3      	str	r3, [r4, #8]
 8007630:	6823      	ldr	r3, [r4, #0]
 8007632:	4433      	add	r3, r6
 8007634:	6023      	str	r3, [r4, #0]
 8007636:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800763a:	462a      	mov	r2, r5
 800763c:	f000 fa24 	bl	8007a88 <_realloc_r>
 8007640:	4606      	mov	r6, r0
 8007642:	2800      	cmp	r0, #0
 8007644:	d1e0      	bne.n	8007608 <__ssputs_r+0x5c>
 8007646:	4650      	mov	r0, sl
 8007648:	6921      	ldr	r1, [r4, #16]
 800764a:	f7ff fb31 	bl	8006cb0 <_free_r>
 800764e:	230c      	movs	r3, #12
 8007650:	f8ca 3000 	str.w	r3, [sl]
 8007654:	89a3      	ldrh	r3, [r4, #12]
 8007656:	f04f 30ff 	mov.w	r0, #4294967295
 800765a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800765e:	81a3      	strh	r3, [r4, #12]
 8007660:	e7e9      	b.n	8007636 <__ssputs_r+0x8a>
	...

08007664 <_svfiprintf_r>:
 8007664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007668:	4698      	mov	r8, r3
 800766a:	898b      	ldrh	r3, [r1, #12]
 800766c:	4607      	mov	r7, r0
 800766e:	061b      	lsls	r3, r3, #24
 8007670:	460d      	mov	r5, r1
 8007672:	4614      	mov	r4, r2
 8007674:	b09d      	sub	sp, #116	@ 0x74
 8007676:	d510      	bpl.n	800769a <_svfiprintf_r+0x36>
 8007678:	690b      	ldr	r3, [r1, #16]
 800767a:	b973      	cbnz	r3, 800769a <_svfiprintf_r+0x36>
 800767c:	2140      	movs	r1, #64	@ 0x40
 800767e:	f7ff fb89 	bl	8006d94 <_malloc_r>
 8007682:	6028      	str	r0, [r5, #0]
 8007684:	6128      	str	r0, [r5, #16]
 8007686:	b930      	cbnz	r0, 8007696 <_svfiprintf_r+0x32>
 8007688:	230c      	movs	r3, #12
 800768a:	603b      	str	r3, [r7, #0]
 800768c:	f04f 30ff 	mov.w	r0, #4294967295
 8007690:	b01d      	add	sp, #116	@ 0x74
 8007692:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007696:	2340      	movs	r3, #64	@ 0x40
 8007698:	616b      	str	r3, [r5, #20]
 800769a:	2300      	movs	r3, #0
 800769c:	9309      	str	r3, [sp, #36]	@ 0x24
 800769e:	2320      	movs	r3, #32
 80076a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80076a4:	2330      	movs	r3, #48	@ 0x30
 80076a6:	f04f 0901 	mov.w	r9, #1
 80076aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80076ae:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007848 <_svfiprintf_r+0x1e4>
 80076b2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80076b6:	4623      	mov	r3, r4
 80076b8:	469a      	mov	sl, r3
 80076ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 80076be:	b10a      	cbz	r2, 80076c4 <_svfiprintf_r+0x60>
 80076c0:	2a25      	cmp	r2, #37	@ 0x25
 80076c2:	d1f9      	bne.n	80076b8 <_svfiprintf_r+0x54>
 80076c4:	ebba 0b04 	subs.w	fp, sl, r4
 80076c8:	d00b      	beq.n	80076e2 <_svfiprintf_r+0x7e>
 80076ca:	465b      	mov	r3, fp
 80076cc:	4622      	mov	r2, r4
 80076ce:	4629      	mov	r1, r5
 80076d0:	4638      	mov	r0, r7
 80076d2:	f7ff ff6b 	bl	80075ac <__ssputs_r>
 80076d6:	3001      	adds	r0, #1
 80076d8:	f000 80a7 	beq.w	800782a <_svfiprintf_r+0x1c6>
 80076dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80076de:	445a      	add	r2, fp
 80076e0:	9209      	str	r2, [sp, #36]	@ 0x24
 80076e2:	f89a 3000 	ldrb.w	r3, [sl]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	f000 809f 	beq.w	800782a <_svfiprintf_r+0x1c6>
 80076ec:	2300      	movs	r3, #0
 80076ee:	f04f 32ff 	mov.w	r2, #4294967295
 80076f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076f6:	f10a 0a01 	add.w	sl, sl, #1
 80076fa:	9304      	str	r3, [sp, #16]
 80076fc:	9307      	str	r3, [sp, #28]
 80076fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007702:	931a      	str	r3, [sp, #104]	@ 0x68
 8007704:	4654      	mov	r4, sl
 8007706:	2205      	movs	r2, #5
 8007708:	f814 1b01 	ldrb.w	r1, [r4], #1
 800770c:	484e      	ldr	r0, [pc, #312]	@ (8007848 <_svfiprintf_r+0x1e4>)
 800770e:	f7fe fc60 	bl	8005fd2 <memchr>
 8007712:	9a04      	ldr	r2, [sp, #16]
 8007714:	b9d8      	cbnz	r0, 800774e <_svfiprintf_r+0xea>
 8007716:	06d0      	lsls	r0, r2, #27
 8007718:	bf44      	itt	mi
 800771a:	2320      	movmi	r3, #32
 800771c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007720:	0711      	lsls	r1, r2, #28
 8007722:	bf44      	itt	mi
 8007724:	232b      	movmi	r3, #43	@ 0x2b
 8007726:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800772a:	f89a 3000 	ldrb.w	r3, [sl]
 800772e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007730:	d015      	beq.n	800775e <_svfiprintf_r+0xfa>
 8007732:	4654      	mov	r4, sl
 8007734:	2000      	movs	r0, #0
 8007736:	f04f 0c0a 	mov.w	ip, #10
 800773a:	9a07      	ldr	r2, [sp, #28]
 800773c:	4621      	mov	r1, r4
 800773e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007742:	3b30      	subs	r3, #48	@ 0x30
 8007744:	2b09      	cmp	r3, #9
 8007746:	d94b      	bls.n	80077e0 <_svfiprintf_r+0x17c>
 8007748:	b1b0      	cbz	r0, 8007778 <_svfiprintf_r+0x114>
 800774a:	9207      	str	r2, [sp, #28]
 800774c:	e014      	b.n	8007778 <_svfiprintf_r+0x114>
 800774e:	eba0 0308 	sub.w	r3, r0, r8
 8007752:	fa09 f303 	lsl.w	r3, r9, r3
 8007756:	4313      	orrs	r3, r2
 8007758:	46a2      	mov	sl, r4
 800775a:	9304      	str	r3, [sp, #16]
 800775c:	e7d2      	b.n	8007704 <_svfiprintf_r+0xa0>
 800775e:	9b03      	ldr	r3, [sp, #12]
 8007760:	1d19      	adds	r1, r3, #4
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	9103      	str	r1, [sp, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	bfbb      	ittet	lt
 800776a:	425b      	neglt	r3, r3
 800776c:	f042 0202 	orrlt.w	r2, r2, #2
 8007770:	9307      	strge	r3, [sp, #28]
 8007772:	9307      	strlt	r3, [sp, #28]
 8007774:	bfb8      	it	lt
 8007776:	9204      	strlt	r2, [sp, #16]
 8007778:	7823      	ldrb	r3, [r4, #0]
 800777a:	2b2e      	cmp	r3, #46	@ 0x2e
 800777c:	d10a      	bne.n	8007794 <_svfiprintf_r+0x130>
 800777e:	7863      	ldrb	r3, [r4, #1]
 8007780:	2b2a      	cmp	r3, #42	@ 0x2a
 8007782:	d132      	bne.n	80077ea <_svfiprintf_r+0x186>
 8007784:	9b03      	ldr	r3, [sp, #12]
 8007786:	3402      	adds	r4, #2
 8007788:	1d1a      	adds	r2, r3, #4
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	9203      	str	r2, [sp, #12]
 800778e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007792:	9305      	str	r3, [sp, #20]
 8007794:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800784c <_svfiprintf_r+0x1e8>
 8007798:	2203      	movs	r2, #3
 800779a:	4650      	mov	r0, sl
 800779c:	7821      	ldrb	r1, [r4, #0]
 800779e:	f7fe fc18 	bl	8005fd2 <memchr>
 80077a2:	b138      	cbz	r0, 80077b4 <_svfiprintf_r+0x150>
 80077a4:	2240      	movs	r2, #64	@ 0x40
 80077a6:	9b04      	ldr	r3, [sp, #16]
 80077a8:	eba0 000a 	sub.w	r0, r0, sl
 80077ac:	4082      	lsls	r2, r0
 80077ae:	4313      	orrs	r3, r2
 80077b0:	3401      	adds	r4, #1
 80077b2:	9304      	str	r3, [sp, #16]
 80077b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80077b8:	2206      	movs	r2, #6
 80077ba:	4825      	ldr	r0, [pc, #148]	@ (8007850 <_svfiprintf_r+0x1ec>)
 80077bc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80077c0:	f7fe fc07 	bl	8005fd2 <memchr>
 80077c4:	2800      	cmp	r0, #0
 80077c6:	d036      	beq.n	8007836 <_svfiprintf_r+0x1d2>
 80077c8:	4b22      	ldr	r3, [pc, #136]	@ (8007854 <_svfiprintf_r+0x1f0>)
 80077ca:	bb1b      	cbnz	r3, 8007814 <_svfiprintf_r+0x1b0>
 80077cc:	9b03      	ldr	r3, [sp, #12]
 80077ce:	3307      	adds	r3, #7
 80077d0:	f023 0307 	bic.w	r3, r3, #7
 80077d4:	3308      	adds	r3, #8
 80077d6:	9303      	str	r3, [sp, #12]
 80077d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077da:	4433      	add	r3, r6
 80077dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80077de:	e76a      	b.n	80076b6 <_svfiprintf_r+0x52>
 80077e0:	460c      	mov	r4, r1
 80077e2:	2001      	movs	r0, #1
 80077e4:	fb0c 3202 	mla	r2, ip, r2, r3
 80077e8:	e7a8      	b.n	800773c <_svfiprintf_r+0xd8>
 80077ea:	2300      	movs	r3, #0
 80077ec:	f04f 0c0a 	mov.w	ip, #10
 80077f0:	4619      	mov	r1, r3
 80077f2:	3401      	adds	r4, #1
 80077f4:	9305      	str	r3, [sp, #20]
 80077f6:	4620      	mov	r0, r4
 80077f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077fc:	3a30      	subs	r2, #48	@ 0x30
 80077fe:	2a09      	cmp	r2, #9
 8007800:	d903      	bls.n	800780a <_svfiprintf_r+0x1a6>
 8007802:	2b00      	cmp	r3, #0
 8007804:	d0c6      	beq.n	8007794 <_svfiprintf_r+0x130>
 8007806:	9105      	str	r1, [sp, #20]
 8007808:	e7c4      	b.n	8007794 <_svfiprintf_r+0x130>
 800780a:	4604      	mov	r4, r0
 800780c:	2301      	movs	r3, #1
 800780e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007812:	e7f0      	b.n	80077f6 <_svfiprintf_r+0x192>
 8007814:	ab03      	add	r3, sp, #12
 8007816:	9300      	str	r3, [sp, #0]
 8007818:	462a      	mov	r2, r5
 800781a:	4638      	mov	r0, r7
 800781c:	4b0e      	ldr	r3, [pc, #56]	@ (8007858 <_svfiprintf_r+0x1f4>)
 800781e:	a904      	add	r1, sp, #16
 8007820:	f7fd fe60 	bl	80054e4 <_printf_float>
 8007824:	1c42      	adds	r2, r0, #1
 8007826:	4606      	mov	r6, r0
 8007828:	d1d6      	bne.n	80077d8 <_svfiprintf_r+0x174>
 800782a:	89ab      	ldrh	r3, [r5, #12]
 800782c:	065b      	lsls	r3, r3, #25
 800782e:	f53f af2d 	bmi.w	800768c <_svfiprintf_r+0x28>
 8007832:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007834:	e72c      	b.n	8007690 <_svfiprintf_r+0x2c>
 8007836:	ab03      	add	r3, sp, #12
 8007838:	9300      	str	r3, [sp, #0]
 800783a:	462a      	mov	r2, r5
 800783c:	4638      	mov	r0, r7
 800783e:	4b06      	ldr	r3, [pc, #24]	@ (8007858 <_svfiprintf_r+0x1f4>)
 8007840:	a904      	add	r1, sp, #16
 8007842:	f7fe f8ed 	bl	8005a20 <_printf_i>
 8007846:	e7ed      	b.n	8007824 <_svfiprintf_r+0x1c0>
 8007848:	0800a200 	.word	0x0800a200
 800784c:	0800a206 	.word	0x0800a206
 8007850:	0800a20a 	.word	0x0800a20a
 8007854:	080054e5 	.word	0x080054e5
 8007858:	080075ad 	.word	0x080075ad

0800785c <__sflush_r>:
 800785c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007862:	0716      	lsls	r6, r2, #28
 8007864:	4605      	mov	r5, r0
 8007866:	460c      	mov	r4, r1
 8007868:	d454      	bmi.n	8007914 <__sflush_r+0xb8>
 800786a:	684b      	ldr	r3, [r1, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	dc02      	bgt.n	8007876 <__sflush_r+0x1a>
 8007870:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007872:	2b00      	cmp	r3, #0
 8007874:	dd48      	ble.n	8007908 <__sflush_r+0xac>
 8007876:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007878:	2e00      	cmp	r6, #0
 800787a:	d045      	beq.n	8007908 <__sflush_r+0xac>
 800787c:	2300      	movs	r3, #0
 800787e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007882:	682f      	ldr	r7, [r5, #0]
 8007884:	6a21      	ldr	r1, [r4, #32]
 8007886:	602b      	str	r3, [r5, #0]
 8007888:	d030      	beq.n	80078ec <__sflush_r+0x90>
 800788a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800788c:	89a3      	ldrh	r3, [r4, #12]
 800788e:	0759      	lsls	r1, r3, #29
 8007890:	d505      	bpl.n	800789e <__sflush_r+0x42>
 8007892:	6863      	ldr	r3, [r4, #4]
 8007894:	1ad2      	subs	r2, r2, r3
 8007896:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8007898:	b10b      	cbz	r3, 800789e <__sflush_r+0x42>
 800789a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800789c:	1ad2      	subs	r2, r2, r3
 800789e:	2300      	movs	r3, #0
 80078a0:	4628      	mov	r0, r5
 80078a2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80078a4:	6a21      	ldr	r1, [r4, #32]
 80078a6:	47b0      	blx	r6
 80078a8:	1c43      	adds	r3, r0, #1
 80078aa:	89a3      	ldrh	r3, [r4, #12]
 80078ac:	d106      	bne.n	80078bc <__sflush_r+0x60>
 80078ae:	6829      	ldr	r1, [r5, #0]
 80078b0:	291d      	cmp	r1, #29
 80078b2:	d82b      	bhi.n	800790c <__sflush_r+0xb0>
 80078b4:	4a28      	ldr	r2, [pc, #160]	@ (8007958 <__sflush_r+0xfc>)
 80078b6:	410a      	asrs	r2, r1
 80078b8:	07d6      	lsls	r6, r2, #31
 80078ba:	d427      	bmi.n	800790c <__sflush_r+0xb0>
 80078bc:	2200      	movs	r2, #0
 80078be:	6062      	str	r2, [r4, #4]
 80078c0:	6922      	ldr	r2, [r4, #16]
 80078c2:	04d9      	lsls	r1, r3, #19
 80078c4:	6022      	str	r2, [r4, #0]
 80078c6:	d504      	bpl.n	80078d2 <__sflush_r+0x76>
 80078c8:	1c42      	adds	r2, r0, #1
 80078ca:	d101      	bne.n	80078d0 <__sflush_r+0x74>
 80078cc:	682b      	ldr	r3, [r5, #0]
 80078ce:	b903      	cbnz	r3, 80078d2 <__sflush_r+0x76>
 80078d0:	6560      	str	r0, [r4, #84]	@ 0x54
 80078d2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80078d4:	602f      	str	r7, [r5, #0]
 80078d6:	b1b9      	cbz	r1, 8007908 <__sflush_r+0xac>
 80078d8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078dc:	4299      	cmp	r1, r3
 80078de:	d002      	beq.n	80078e6 <__sflush_r+0x8a>
 80078e0:	4628      	mov	r0, r5
 80078e2:	f7ff f9e5 	bl	8006cb0 <_free_r>
 80078e6:	2300      	movs	r3, #0
 80078e8:	6363      	str	r3, [r4, #52]	@ 0x34
 80078ea:	e00d      	b.n	8007908 <__sflush_r+0xac>
 80078ec:	2301      	movs	r3, #1
 80078ee:	4628      	mov	r0, r5
 80078f0:	47b0      	blx	r6
 80078f2:	4602      	mov	r2, r0
 80078f4:	1c50      	adds	r0, r2, #1
 80078f6:	d1c9      	bne.n	800788c <__sflush_r+0x30>
 80078f8:	682b      	ldr	r3, [r5, #0]
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d0c6      	beq.n	800788c <__sflush_r+0x30>
 80078fe:	2b1d      	cmp	r3, #29
 8007900:	d001      	beq.n	8007906 <__sflush_r+0xaa>
 8007902:	2b16      	cmp	r3, #22
 8007904:	d11d      	bne.n	8007942 <__sflush_r+0xe6>
 8007906:	602f      	str	r7, [r5, #0]
 8007908:	2000      	movs	r0, #0
 800790a:	e021      	b.n	8007950 <__sflush_r+0xf4>
 800790c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007910:	b21b      	sxth	r3, r3
 8007912:	e01a      	b.n	800794a <__sflush_r+0xee>
 8007914:	690f      	ldr	r7, [r1, #16]
 8007916:	2f00      	cmp	r7, #0
 8007918:	d0f6      	beq.n	8007908 <__sflush_r+0xac>
 800791a:	0793      	lsls	r3, r2, #30
 800791c:	bf18      	it	ne
 800791e:	2300      	movne	r3, #0
 8007920:	680e      	ldr	r6, [r1, #0]
 8007922:	bf08      	it	eq
 8007924:	694b      	ldreq	r3, [r1, #20]
 8007926:	1bf6      	subs	r6, r6, r7
 8007928:	600f      	str	r7, [r1, #0]
 800792a:	608b      	str	r3, [r1, #8]
 800792c:	2e00      	cmp	r6, #0
 800792e:	ddeb      	ble.n	8007908 <__sflush_r+0xac>
 8007930:	4633      	mov	r3, r6
 8007932:	463a      	mov	r2, r7
 8007934:	4628      	mov	r0, r5
 8007936:	6a21      	ldr	r1, [r4, #32]
 8007938:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800793c:	47e0      	blx	ip
 800793e:	2800      	cmp	r0, #0
 8007940:	dc07      	bgt.n	8007952 <__sflush_r+0xf6>
 8007942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007946:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800794a:	f04f 30ff 	mov.w	r0, #4294967295
 800794e:	81a3      	strh	r3, [r4, #12]
 8007950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007952:	4407      	add	r7, r0
 8007954:	1a36      	subs	r6, r6, r0
 8007956:	e7e9      	b.n	800792c <__sflush_r+0xd0>
 8007958:	dfbffffe 	.word	0xdfbffffe

0800795c <_fflush_r>:
 800795c:	b538      	push	{r3, r4, r5, lr}
 800795e:	690b      	ldr	r3, [r1, #16]
 8007960:	4605      	mov	r5, r0
 8007962:	460c      	mov	r4, r1
 8007964:	b913      	cbnz	r3, 800796c <_fflush_r+0x10>
 8007966:	2500      	movs	r5, #0
 8007968:	4628      	mov	r0, r5
 800796a:	bd38      	pop	{r3, r4, r5, pc}
 800796c:	b118      	cbz	r0, 8007976 <_fflush_r+0x1a>
 800796e:	6a03      	ldr	r3, [r0, #32]
 8007970:	b90b      	cbnz	r3, 8007976 <_fflush_r+0x1a>
 8007972:	f7fe fa01 	bl	8005d78 <__sinit>
 8007976:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800797a:	2b00      	cmp	r3, #0
 800797c:	d0f3      	beq.n	8007966 <_fflush_r+0xa>
 800797e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8007980:	07d0      	lsls	r0, r2, #31
 8007982:	d404      	bmi.n	800798e <_fflush_r+0x32>
 8007984:	0599      	lsls	r1, r3, #22
 8007986:	d402      	bmi.n	800798e <_fflush_r+0x32>
 8007988:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800798a:	f7fe fb20 	bl	8005fce <__retarget_lock_acquire_recursive>
 800798e:	4628      	mov	r0, r5
 8007990:	4621      	mov	r1, r4
 8007992:	f7ff ff63 	bl	800785c <__sflush_r>
 8007996:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007998:	4605      	mov	r5, r0
 800799a:	07da      	lsls	r2, r3, #31
 800799c:	d4e4      	bmi.n	8007968 <_fflush_r+0xc>
 800799e:	89a3      	ldrh	r3, [r4, #12]
 80079a0:	059b      	lsls	r3, r3, #22
 80079a2:	d4e1      	bmi.n	8007968 <_fflush_r+0xc>
 80079a4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80079a6:	f7fe fb13 	bl	8005fd0 <__retarget_lock_release_recursive>
 80079aa:	e7dd      	b.n	8007968 <_fflush_r+0xc>

080079ac <memmove>:
 80079ac:	4288      	cmp	r0, r1
 80079ae:	b510      	push	{r4, lr}
 80079b0:	eb01 0402 	add.w	r4, r1, r2
 80079b4:	d902      	bls.n	80079bc <memmove+0x10>
 80079b6:	4284      	cmp	r4, r0
 80079b8:	4623      	mov	r3, r4
 80079ba:	d807      	bhi.n	80079cc <memmove+0x20>
 80079bc:	1e43      	subs	r3, r0, #1
 80079be:	42a1      	cmp	r1, r4
 80079c0:	d008      	beq.n	80079d4 <memmove+0x28>
 80079c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80079c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80079ca:	e7f8      	b.n	80079be <memmove+0x12>
 80079cc:	4601      	mov	r1, r0
 80079ce:	4402      	add	r2, r0
 80079d0:	428a      	cmp	r2, r1
 80079d2:	d100      	bne.n	80079d6 <memmove+0x2a>
 80079d4:	bd10      	pop	{r4, pc}
 80079d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80079da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80079de:	e7f7      	b.n	80079d0 <memmove+0x24>

080079e0 <_sbrk_r>:
 80079e0:	b538      	push	{r3, r4, r5, lr}
 80079e2:	2300      	movs	r3, #0
 80079e4:	4d05      	ldr	r5, [pc, #20]	@ (80079fc <_sbrk_r+0x1c>)
 80079e6:	4604      	mov	r4, r0
 80079e8:	4608      	mov	r0, r1
 80079ea:	602b      	str	r3, [r5, #0]
 80079ec:	f7fa fc36 	bl	800225c <_sbrk>
 80079f0:	1c43      	adds	r3, r0, #1
 80079f2:	d102      	bne.n	80079fa <_sbrk_r+0x1a>
 80079f4:	682b      	ldr	r3, [r5, #0]
 80079f6:	b103      	cbz	r3, 80079fa <_sbrk_r+0x1a>
 80079f8:	6023      	str	r3, [r4, #0]
 80079fa:	bd38      	pop	{r3, r4, r5, pc}
 80079fc:	20000718 	.word	0x20000718

08007a00 <__assert_func>:
 8007a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007a02:	4614      	mov	r4, r2
 8007a04:	461a      	mov	r2, r3
 8007a06:	4b09      	ldr	r3, [pc, #36]	@ (8007a2c <__assert_func+0x2c>)
 8007a08:	4605      	mov	r5, r0
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	68d8      	ldr	r0, [r3, #12]
 8007a0e:	b954      	cbnz	r4, 8007a26 <__assert_func+0x26>
 8007a10:	4b07      	ldr	r3, [pc, #28]	@ (8007a30 <__assert_func+0x30>)
 8007a12:	461c      	mov	r4, r3
 8007a14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007a18:	9100      	str	r1, [sp, #0]
 8007a1a:	462b      	mov	r3, r5
 8007a1c:	4905      	ldr	r1, [pc, #20]	@ (8007a34 <__assert_func+0x34>)
 8007a1e:	f000 f86f 	bl	8007b00 <fiprintf>
 8007a22:	f000 f87f 	bl	8007b24 <abort>
 8007a26:	4b04      	ldr	r3, [pc, #16]	@ (8007a38 <__assert_func+0x38>)
 8007a28:	e7f4      	b.n	8007a14 <__assert_func+0x14>
 8007a2a:	bf00      	nop
 8007a2c:	20000048 	.word	0x20000048
 8007a30:	0800a256 	.word	0x0800a256
 8007a34:	0800a228 	.word	0x0800a228
 8007a38:	0800a21b 	.word	0x0800a21b

08007a3c <_calloc_r>:
 8007a3c:	b570      	push	{r4, r5, r6, lr}
 8007a3e:	fba1 5402 	umull	r5, r4, r1, r2
 8007a42:	b93c      	cbnz	r4, 8007a54 <_calloc_r+0x18>
 8007a44:	4629      	mov	r1, r5
 8007a46:	f7ff f9a5 	bl	8006d94 <_malloc_r>
 8007a4a:	4606      	mov	r6, r0
 8007a4c:	b928      	cbnz	r0, 8007a5a <_calloc_r+0x1e>
 8007a4e:	2600      	movs	r6, #0
 8007a50:	4630      	mov	r0, r6
 8007a52:	bd70      	pop	{r4, r5, r6, pc}
 8007a54:	220c      	movs	r2, #12
 8007a56:	6002      	str	r2, [r0, #0]
 8007a58:	e7f9      	b.n	8007a4e <_calloc_r+0x12>
 8007a5a:	462a      	mov	r2, r5
 8007a5c:	4621      	mov	r1, r4
 8007a5e:	f7fe fa38 	bl	8005ed2 <memset>
 8007a62:	e7f5      	b.n	8007a50 <_calloc_r+0x14>

08007a64 <__ascii_mbtowc>:
 8007a64:	b082      	sub	sp, #8
 8007a66:	b901      	cbnz	r1, 8007a6a <__ascii_mbtowc+0x6>
 8007a68:	a901      	add	r1, sp, #4
 8007a6a:	b142      	cbz	r2, 8007a7e <__ascii_mbtowc+0x1a>
 8007a6c:	b14b      	cbz	r3, 8007a82 <__ascii_mbtowc+0x1e>
 8007a6e:	7813      	ldrb	r3, [r2, #0]
 8007a70:	600b      	str	r3, [r1, #0]
 8007a72:	7812      	ldrb	r2, [r2, #0]
 8007a74:	1e10      	subs	r0, r2, #0
 8007a76:	bf18      	it	ne
 8007a78:	2001      	movne	r0, #1
 8007a7a:	b002      	add	sp, #8
 8007a7c:	4770      	bx	lr
 8007a7e:	4610      	mov	r0, r2
 8007a80:	e7fb      	b.n	8007a7a <__ascii_mbtowc+0x16>
 8007a82:	f06f 0001 	mvn.w	r0, #1
 8007a86:	e7f8      	b.n	8007a7a <__ascii_mbtowc+0x16>

08007a88 <_realloc_r>:
 8007a88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a8c:	4680      	mov	r8, r0
 8007a8e:	4615      	mov	r5, r2
 8007a90:	460c      	mov	r4, r1
 8007a92:	b921      	cbnz	r1, 8007a9e <_realloc_r+0x16>
 8007a94:	4611      	mov	r1, r2
 8007a96:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007a9a:	f7ff b97b 	b.w	8006d94 <_malloc_r>
 8007a9e:	b92a      	cbnz	r2, 8007aac <_realloc_r+0x24>
 8007aa0:	f7ff f906 	bl	8006cb0 <_free_r>
 8007aa4:	2400      	movs	r4, #0
 8007aa6:	4620      	mov	r0, r4
 8007aa8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007aac:	f000 f841 	bl	8007b32 <_malloc_usable_size_r>
 8007ab0:	4285      	cmp	r5, r0
 8007ab2:	4606      	mov	r6, r0
 8007ab4:	d802      	bhi.n	8007abc <_realloc_r+0x34>
 8007ab6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8007aba:	d8f4      	bhi.n	8007aa6 <_realloc_r+0x1e>
 8007abc:	4629      	mov	r1, r5
 8007abe:	4640      	mov	r0, r8
 8007ac0:	f7ff f968 	bl	8006d94 <_malloc_r>
 8007ac4:	4607      	mov	r7, r0
 8007ac6:	2800      	cmp	r0, #0
 8007ac8:	d0ec      	beq.n	8007aa4 <_realloc_r+0x1c>
 8007aca:	42b5      	cmp	r5, r6
 8007acc:	462a      	mov	r2, r5
 8007ace:	4621      	mov	r1, r4
 8007ad0:	bf28      	it	cs
 8007ad2:	4632      	movcs	r2, r6
 8007ad4:	f7fe fa8b 	bl	8005fee <memcpy>
 8007ad8:	4621      	mov	r1, r4
 8007ada:	4640      	mov	r0, r8
 8007adc:	f7ff f8e8 	bl	8006cb0 <_free_r>
 8007ae0:	463c      	mov	r4, r7
 8007ae2:	e7e0      	b.n	8007aa6 <_realloc_r+0x1e>

08007ae4 <__ascii_wctomb>:
 8007ae4:	4603      	mov	r3, r0
 8007ae6:	4608      	mov	r0, r1
 8007ae8:	b141      	cbz	r1, 8007afc <__ascii_wctomb+0x18>
 8007aea:	2aff      	cmp	r2, #255	@ 0xff
 8007aec:	d904      	bls.n	8007af8 <__ascii_wctomb+0x14>
 8007aee:	228a      	movs	r2, #138	@ 0x8a
 8007af0:	f04f 30ff 	mov.w	r0, #4294967295
 8007af4:	601a      	str	r2, [r3, #0]
 8007af6:	4770      	bx	lr
 8007af8:	2001      	movs	r0, #1
 8007afa:	700a      	strb	r2, [r1, #0]
 8007afc:	4770      	bx	lr
	...

08007b00 <fiprintf>:
 8007b00:	b40e      	push	{r1, r2, r3}
 8007b02:	b503      	push	{r0, r1, lr}
 8007b04:	4601      	mov	r1, r0
 8007b06:	ab03      	add	r3, sp, #12
 8007b08:	4805      	ldr	r0, [pc, #20]	@ (8007b20 <fiprintf+0x20>)
 8007b0a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b0e:	6800      	ldr	r0, [r0, #0]
 8007b10:	9301      	str	r3, [sp, #4]
 8007b12:	f000 f83d 	bl	8007b90 <_vfiprintf_r>
 8007b16:	b002      	add	sp, #8
 8007b18:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b1c:	b003      	add	sp, #12
 8007b1e:	4770      	bx	lr
 8007b20:	20000048 	.word	0x20000048

08007b24 <abort>:
 8007b24:	2006      	movs	r0, #6
 8007b26:	b508      	push	{r3, lr}
 8007b28:	f000 fa06 	bl	8007f38 <raise>
 8007b2c:	2001      	movs	r0, #1
 8007b2e:	f7fa fb20 	bl	8002172 <_exit>

08007b32 <_malloc_usable_size_r>:
 8007b32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b36:	1f18      	subs	r0, r3, #4
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	bfbc      	itt	lt
 8007b3c:	580b      	ldrlt	r3, [r1, r0]
 8007b3e:	18c0      	addlt	r0, r0, r3
 8007b40:	4770      	bx	lr

08007b42 <__sfputc_r>:
 8007b42:	6893      	ldr	r3, [r2, #8]
 8007b44:	b410      	push	{r4}
 8007b46:	3b01      	subs	r3, #1
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	6093      	str	r3, [r2, #8]
 8007b4c:	da07      	bge.n	8007b5e <__sfputc_r+0x1c>
 8007b4e:	6994      	ldr	r4, [r2, #24]
 8007b50:	42a3      	cmp	r3, r4
 8007b52:	db01      	blt.n	8007b58 <__sfputc_r+0x16>
 8007b54:	290a      	cmp	r1, #10
 8007b56:	d102      	bne.n	8007b5e <__sfputc_r+0x1c>
 8007b58:	bc10      	pop	{r4}
 8007b5a:	f000 b931 	b.w	8007dc0 <__swbuf_r>
 8007b5e:	6813      	ldr	r3, [r2, #0]
 8007b60:	1c58      	adds	r0, r3, #1
 8007b62:	6010      	str	r0, [r2, #0]
 8007b64:	7019      	strb	r1, [r3, #0]
 8007b66:	4608      	mov	r0, r1
 8007b68:	bc10      	pop	{r4}
 8007b6a:	4770      	bx	lr

08007b6c <__sfputs_r>:
 8007b6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b6e:	4606      	mov	r6, r0
 8007b70:	460f      	mov	r7, r1
 8007b72:	4614      	mov	r4, r2
 8007b74:	18d5      	adds	r5, r2, r3
 8007b76:	42ac      	cmp	r4, r5
 8007b78:	d101      	bne.n	8007b7e <__sfputs_r+0x12>
 8007b7a:	2000      	movs	r0, #0
 8007b7c:	e007      	b.n	8007b8e <__sfputs_r+0x22>
 8007b7e:	463a      	mov	r2, r7
 8007b80:	4630      	mov	r0, r6
 8007b82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b86:	f7ff ffdc 	bl	8007b42 <__sfputc_r>
 8007b8a:	1c43      	adds	r3, r0, #1
 8007b8c:	d1f3      	bne.n	8007b76 <__sfputs_r+0xa>
 8007b8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08007b90 <_vfiprintf_r>:
 8007b90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b94:	460d      	mov	r5, r1
 8007b96:	4614      	mov	r4, r2
 8007b98:	4698      	mov	r8, r3
 8007b9a:	4606      	mov	r6, r0
 8007b9c:	b09d      	sub	sp, #116	@ 0x74
 8007b9e:	b118      	cbz	r0, 8007ba8 <_vfiprintf_r+0x18>
 8007ba0:	6a03      	ldr	r3, [r0, #32]
 8007ba2:	b90b      	cbnz	r3, 8007ba8 <_vfiprintf_r+0x18>
 8007ba4:	f7fe f8e8 	bl	8005d78 <__sinit>
 8007ba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007baa:	07d9      	lsls	r1, r3, #31
 8007bac:	d405      	bmi.n	8007bba <_vfiprintf_r+0x2a>
 8007bae:	89ab      	ldrh	r3, [r5, #12]
 8007bb0:	059a      	lsls	r2, r3, #22
 8007bb2:	d402      	bmi.n	8007bba <_vfiprintf_r+0x2a>
 8007bb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007bb6:	f7fe fa0a 	bl	8005fce <__retarget_lock_acquire_recursive>
 8007bba:	89ab      	ldrh	r3, [r5, #12]
 8007bbc:	071b      	lsls	r3, r3, #28
 8007bbe:	d501      	bpl.n	8007bc4 <_vfiprintf_r+0x34>
 8007bc0:	692b      	ldr	r3, [r5, #16]
 8007bc2:	b99b      	cbnz	r3, 8007bec <_vfiprintf_r+0x5c>
 8007bc4:	4629      	mov	r1, r5
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	f000 f938 	bl	8007e3c <__swsetup_r>
 8007bcc:	b170      	cbz	r0, 8007bec <_vfiprintf_r+0x5c>
 8007bce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007bd0:	07dc      	lsls	r4, r3, #31
 8007bd2:	d504      	bpl.n	8007bde <_vfiprintf_r+0x4e>
 8007bd4:	f04f 30ff 	mov.w	r0, #4294967295
 8007bd8:	b01d      	add	sp, #116	@ 0x74
 8007bda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bde:	89ab      	ldrh	r3, [r5, #12]
 8007be0:	0598      	lsls	r0, r3, #22
 8007be2:	d4f7      	bmi.n	8007bd4 <_vfiprintf_r+0x44>
 8007be4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007be6:	f7fe f9f3 	bl	8005fd0 <__retarget_lock_release_recursive>
 8007bea:	e7f3      	b.n	8007bd4 <_vfiprintf_r+0x44>
 8007bec:	2300      	movs	r3, #0
 8007bee:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bf0:	2320      	movs	r3, #32
 8007bf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bf6:	2330      	movs	r3, #48	@ 0x30
 8007bf8:	f04f 0901 	mov.w	r9, #1
 8007bfc:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c00:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8007dac <_vfiprintf_r+0x21c>
 8007c04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007c08:	4623      	mov	r3, r4
 8007c0a:	469a      	mov	sl, r3
 8007c0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c10:	b10a      	cbz	r2, 8007c16 <_vfiprintf_r+0x86>
 8007c12:	2a25      	cmp	r2, #37	@ 0x25
 8007c14:	d1f9      	bne.n	8007c0a <_vfiprintf_r+0x7a>
 8007c16:	ebba 0b04 	subs.w	fp, sl, r4
 8007c1a:	d00b      	beq.n	8007c34 <_vfiprintf_r+0xa4>
 8007c1c:	465b      	mov	r3, fp
 8007c1e:	4622      	mov	r2, r4
 8007c20:	4629      	mov	r1, r5
 8007c22:	4630      	mov	r0, r6
 8007c24:	f7ff ffa2 	bl	8007b6c <__sfputs_r>
 8007c28:	3001      	adds	r0, #1
 8007c2a:	f000 80a7 	beq.w	8007d7c <_vfiprintf_r+0x1ec>
 8007c2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007c30:	445a      	add	r2, fp
 8007c32:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c34:	f89a 3000 	ldrb.w	r3, [sl]
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	f000 809f 	beq.w	8007d7c <_vfiprintf_r+0x1ec>
 8007c3e:	2300      	movs	r3, #0
 8007c40:	f04f 32ff 	mov.w	r2, #4294967295
 8007c44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c48:	f10a 0a01 	add.w	sl, sl, #1
 8007c4c:	9304      	str	r3, [sp, #16]
 8007c4e:	9307      	str	r3, [sp, #28]
 8007c50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c54:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c56:	4654      	mov	r4, sl
 8007c58:	2205      	movs	r2, #5
 8007c5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c5e:	4853      	ldr	r0, [pc, #332]	@ (8007dac <_vfiprintf_r+0x21c>)
 8007c60:	f7fe f9b7 	bl	8005fd2 <memchr>
 8007c64:	9a04      	ldr	r2, [sp, #16]
 8007c66:	b9d8      	cbnz	r0, 8007ca0 <_vfiprintf_r+0x110>
 8007c68:	06d1      	lsls	r1, r2, #27
 8007c6a:	bf44      	itt	mi
 8007c6c:	2320      	movmi	r3, #32
 8007c6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c72:	0713      	lsls	r3, r2, #28
 8007c74:	bf44      	itt	mi
 8007c76:	232b      	movmi	r3, #43	@ 0x2b
 8007c78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007c80:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c82:	d015      	beq.n	8007cb0 <_vfiprintf_r+0x120>
 8007c84:	4654      	mov	r4, sl
 8007c86:	2000      	movs	r0, #0
 8007c88:	f04f 0c0a 	mov.w	ip, #10
 8007c8c:	9a07      	ldr	r2, [sp, #28]
 8007c8e:	4621      	mov	r1, r4
 8007c90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c94:	3b30      	subs	r3, #48	@ 0x30
 8007c96:	2b09      	cmp	r3, #9
 8007c98:	d94b      	bls.n	8007d32 <_vfiprintf_r+0x1a2>
 8007c9a:	b1b0      	cbz	r0, 8007cca <_vfiprintf_r+0x13a>
 8007c9c:	9207      	str	r2, [sp, #28]
 8007c9e:	e014      	b.n	8007cca <_vfiprintf_r+0x13a>
 8007ca0:	eba0 0308 	sub.w	r3, r0, r8
 8007ca4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ca8:	4313      	orrs	r3, r2
 8007caa:	46a2      	mov	sl, r4
 8007cac:	9304      	str	r3, [sp, #16]
 8007cae:	e7d2      	b.n	8007c56 <_vfiprintf_r+0xc6>
 8007cb0:	9b03      	ldr	r3, [sp, #12]
 8007cb2:	1d19      	adds	r1, r3, #4
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	9103      	str	r1, [sp, #12]
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	bfbb      	ittet	lt
 8007cbc:	425b      	neglt	r3, r3
 8007cbe:	f042 0202 	orrlt.w	r2, r2, #2
 8007cc2:	9307      	strge	r3, [sp, #28]
 8007cc4:	9307      	strlt	r3, [sp, #28]
 8007cc6:	bfb8      	it	lt
 8007cc8:	9204      	strlt	r2, [sp, #16]
 8007cca:	7823      	ldrb	r3, [r4, #0]
 8007ccc:	2b2e      	cmp	r3, #46	@ 0x2e
 8007cce:	d10a      	bne.n	8007ce6 <_vfiprintf_r+0x156>
 8007cd0:	7863      	ldrb	r3, [r4, #1]
 8007cd2:	2b2a      	cmp	r3, #42	@ 0x2a
 8007cd4:	d132      	bne.n	8007d3c <_vfiprintf_r+0x1ac>
 8007cd6:	9b03      	ldr	r3, [sp, #12]
 8007cd8:	3402      	adds	r4, #2
 8007cda:	1d1a      	adds	r2, r3, #4
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	9203      	str	r2, [sp, #12]
 8007ce0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007ce4:	9305      	str	r3, [sp, #20]
 8007ce6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8007db0 <_vfiprintf_r+0x220>
 8007cea:	2203      	movs	r2, #3
 8007cec:	4650      	mov	r0, sl
 8007cee:	7821      	ldrb	r1, [r4, #0]
 8007cf0:	f7fe f96f 	bl	8005fd2 <memchr>
 8007cf4:	b138      	cbz	r0, 8007d06 <_vfiprintf_r+0x176>
 8007cf6:	2240      	movs	r2, #64	@ 0x40
 8007cf8:	9b04      	ldr	r3, [sp, #16]
 8007cfa:	eba0 000a 	sub.w	r0, r0, sl
 8007cfe:	4082      	lsls	r2, r0
 8007d00:	4313      	orrs	r3, r2
 8007d02:	3401      	adds	r4, #1
 8007d04:	9304      	str	r3, [sp, #16]
 8007d06:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d0a:	2206      	movs	r2, #6
 8007d0c:	4829      	ldr	r0, [pc, #164]	@ (8007db4 <_vfiprintf_r+0x224>)
 8007d0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007d12:	f7fe f95e 	bl	8005fd2 <memchr>
 8007d16:	2800      	cmp	r0, #0
 8007d18:	d03f      	beq.n	8007d9a <_vfiprintf_r+0x20a>
 8007d1a:	4b27      	ldr	r3, [pc, #156]	@ (8007db8 <_vfiprintf_r+0x228>)
 8007d1c:	bb1b      	cbnz	r3, 8007d66 <_vfiprintf_r+0x1d6>
 8007d1e:	9b03      	ldr	r3, [sp, #12]
 8007d20:	3307      	adds	r3, #7
 8007d22:	f023 0307 	bic.w	r3, r3, #7
 8007d26:	3308      	adds	r3, #8
 8007d28:	9303      	str	r3, [sp, #12]
 8007d2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007d2c:	443b      	add	r3, r7
 8007d2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007d30:	e76a      	b.n	8007c08 <_vfiprintf_r+0x78>
 8007d32:	460c      	mov	r4, r1
 8007d34:	2001      	movs	r0, #1
 8007d36:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d3a:	e7a8      	b.n	8007c8e <_vfiprintf_r+0xfe>
 8007d3c:	2300      	movs	r3, #0
 8007d3e:	f04f 0c0a 	mov.w	ip, #10
 8007d42:	4619      	mov	r1, r3
 8007d44:	3401      	adds	r4, #1
 8007d46:	9305      	str	r3, [sp, #20]
 8007d48:	4620      	mov	r0, r4
 8007d4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d4e:	3a30      	subs	r2, #48	@ 0x30
 8007d50:	2a09      	cmp	r2, #9
 8007d52:	d903      	bls.n	8007d5c <_vfiprintf_r+0x1cc>
 8007d54:	2b00      	cmp	r3, #0
 8007d56:	d0c6      	beq.n	8007ce6 <_vfiprintf_r+0x156>
 8007d58:	9105      	str	r1, [sp, #20]
 8007d5a:	e7c4      	b.n	8007ce6 <_vfiprintf_r+0x156>
 8007d5c:	4604      	mov	r4, r0
 8007d5e:	2301      	movs	r3, #1
 8007d60:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d64:	e7f0      	b.n	8007d48 <_vfiprintf_r+0x1b8>
 8007d66:	ab03      	add	r3, sp, #12
 8007d68:	9300      	str	r3, [sp, #0]
 8007d6a:	462a      	mov	r2, r5
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	4b13      	ldr	r3, [pc, #76]	@ (8007dbc <_vfiprintf_r+0x22c>)
 8007d70:	a904      	add	r1, sp, #16
 8007d72:	f7fd fbb7 	bl	80054e4 <_printf_float>
 8007d76:	4607      	mov	r7, r0
 8007d78:	1c78      	adds	r0, r7, #1
 8007d7a:	d1d6      	bne.n	8007d2a <_vfiprintf_r+0x19a>
 8007d7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007d7e:	07d9      	lsls	r1, r3, #31
 8007d80:	d405      	bmi.n	8007d8e <_vfiprintf_r+0x1fe>
 8007d82:	89ab      	ldrh	r3, [r5, #12]
 8007d84:	059a      	lsls	r2, r3, #22
 8007d86:	d402      	bmi.n	8007d8e <_vfiprintf_r+0x1fe>
 8007d88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007d8a:	f7fe f921 	bl	8005fd0 <__retarget_lock_release_recursive>
 8007d8e:	89ab      	ldrh	r3, [r5, #12]
 8007d90:	065b      	lsls	r3, r3, #25
 8007d92:	f53f af1f 	bmi.w	8007bd4 <_vfiprintf_r+0x44>
 8007d96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d98:	e71e      	b.n	8007bd8 <_vfiprintf_r+0x48>
 8007d9a:	ab03      	add	r3, sp, #12
 8007d9c:	9300      	str	r3, [sp, #0]
 8007d9e:	462a      	mov	r2, r5
 8007da0:	4630      	mov	r0, r6
 8007da2:	4b06      	ldr	r3, [pc, #24]	@ (8007dbc <_vfiprintf_r+0x22c>)
 8007da4:	a904      	add	r1, sp, #16
 8007da6:	f7fd fe3b 	bl	8005a20 <_printf_i>
 8007daa:	e7e4      	b.n	8007d76 <_vfiprintf_r+0x1e6>
 8007dac:	0800a200 	.word	0x0800a200
 8007db0:	0800a206 	.word	0x0800a206
 8007db4:	0800a20a 	.word	0x0800a20a
 8007db8:	080054e5 	.word	0x080054e5
 8007dbc:	08007b6d 	.word	0x08007b6d

08007dc0 <__swbuf_r>:
 8007dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dc2:	460e      	mov	r6, r1
 8007dc4:	4614      	mov	r4, r2
 8007dc6:	4605      	mov	r5, r0
 8007dc8:	b118      	cbz	r0, 8007dd2 <__swbuf_r+0x12>
 8007dca:	6a03      	ldr	r3, [r0, #32]
 8007dcc:	b90b      	cbnz	r3, 8007dd2 <__swbuf_r+0x12>
 8007dce:	f7fd ffd3 	bl	8005d78 <__sinit>
 8007dd2:	69a3      	ldr	r3, [r4, #24]
 8007dd4:	60a3      	str	r3, [r4, #8]
 8007dd6:	89a3      	ldrh	r3, [r4, #12]
 8007dd8:	071a      	lsls	r2, r3, #28
 8007dda:	d501      	bpl.n	8007de0 <__swbuf_r+0x20>
 8007ddc:	6923      	ldr	r3, [r4, #16]
 8007dde:	b943      	cbnz	r3, 8007df2 <__swbuf_r+0x32>
 8007de0:	4621      	mov	r1, r4
 8007de2:	4628      	mov	r0, r5
 8007de4:	f000 f82a 	bl	8007e3c <__swsetup_r>
 8007de8:	b118      	cbz	r0, 8007df2 <__swbuf_r+0x32>
 8007dea:	f04f 37ff 	mov.w	r7, #4294967295
 8007dee:	4638      	mov	r0, r7
 8007df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007df2:	6823      	ldr	r3, [r4, #0]
 8007df4:	6922      	ldr	r2, [r4, #16]
 8007df6:	b2f6      	uxtb	r6, r6
 8007df8:	1a98      	subs	r0, r3, r2
 8007dfa:	6963      	ldr	r3, [r4, #20]
 8007dfc:	4637      	mov	r7, r6
 8007dfe:	4283      	cmp	r3, r0
 8007e00:	dc05      	bgt.n	8007e0e <__swbuf_r+0x4e>
 8007e02:	4621      	mov	r1, r4
 8007e04:	4628      	mov	r0, r5
 8007e06:	f7ff fda9 	bl	800795c <_fflush_r>
 8007e0a:	2800      	cmp	r0, #0
 8007e0c:	d1ed      	bne.n	8007dea <__swbuf_r+0x2a>
 8007e0e:	68a3      	ldr	r3, [r4, #8]
 8007e10:	3b01      	subs	r3, #1
 8007e12:	60a3      	str	r3, [r4, #8]
 8007e14:	6823      	ldr	r3, [r4, #0]
 8007e16:	1c5a      	adds	r2, r3, #1
 8007e18:	6022      	str	r2, [r4, #0]
 8007e1a:	701e      	strb	r6, [r3, #0]
 8007e1c:	6962      	ldr	r2, [r4, #20]
 8007e1e:	1c43      	adds	r3, r0, #1
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d004      	beq.n	8007e2e <__swbuf_r+0x6e>
 8007e24:	89a3      	ldrh	r3, [r4, #12]
 8007e26:	07db      	lsls	r3, r3, #31
 8007e28:	d5e1      	bpl.n	8007dee <__swbuf_r+0x2e>
 8007e2a:	2e0a      	cmp	r6, #10
 8007e2c:	d1df      	bne.n	8007dee <__swbuf_r+0x2e>
 8007e2e:	4621      	mov	r1, r4
 8007e30:	4628      	mov	r0, r5
 8007e32:	f7ff fd93 	bl	800795c <_fflush_r>
 8007e36:	2800      	cmp	r0, #0
 8007e38:	d0d9      	beq.n	8007dee <__swbuf_r+0x2e>
 8007e3a:	e7d6      	b.n	8007dea <__swbuf_r+0x2a>

08007e3c <__swsetup_r>:
 8007e3c:	b538      	push	{r3, r4, r5, lr}
 8007e3e:	4b29      	ldr	r3, [pc, #164]	@ (8007ee4 <__swsetup_r+0xa8>)
 8007e40:	4605      	mov	r5, r0
 8007e42:	6818      	ldr	r0, [r3, #0]
 8007e44:	460c      	mov	r4, r1
 8007e46:	b118      	cbz	r0, 8007e50 <__swsetup_r+0x14>
 8007e48:	6a03      	ldr	r3, [r0, #32]
 8007e4a:	b90b      	cbnz	r3, 8007e50 <__swsetup_r+0x14>
 8007e4c:	f7fd ff94 	bl	8005d78 <__sinit>
 8007e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e54:	0719      	lsls	r1, r3, #28
 8007e56:	d422      	bmi.n	8007e9e <__swsetup_r+0x62>
 8007e58:	06da      	lsls	r2, r3, #27
 8007e5a:	d407      	bmi.n	8007e6c <__swsetup_r+0x30>
 8007e5c:	2209      	movs	r2, #9
 8007e5e:	602a      	str	r2, [r5, #0]
 8007e60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007e64:	f04f 30ff 	mov.w	r0, #4294967295
 8007e68:	81a3      	strh	r3, [r4, #12]
 8007e6a:	e033      	b.n	8007ed4 <__swsetup_r+0x98>
 8007e6c:	0758      	lsls	r0, r3, #29
 8007e6e:	d512      	bpl.n	8007e96 <__swsetup_r+0x5a>
 8007e70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007e72:	b141      	cbz	r1, 8007e86 <__swsetup_r+0x4a>
 8007e74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007e78:	4299      	cmp	r1, r3
 8007e7a:	d002      	beq.n	8007e82 <__swsetup_r+0x46>
 8007e7c:	4628      	mov	r0, r5
 8007e7e:	f7fe ff17 	bl	8006cb0 <_free_r>
 8007e82:	2300      	movs	r3, #0
 8007e84:	6363      	str	r3, [r4, #52]	@ 0x34
 8007e86:	89a3      	ldrh	r3, [r4, #12]
 8007e88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007e8c:	81a3      	strh	r3, [r4, #12]
 8007e8e:	2300      	movs	r3, #0
 8007e90:	6063      	str	r3, [r4, #4]
 8007e92:	6923      	ldr	r3, [r4, #16]
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	89a3      	ldrh	r3, [r4, #12]
 8007e98:	f043 0308 	orr.w	r3, r3, #8
 8007e9c:	81a3      	strh	r3, [r4, #12]
 8007e9e:	6923      	ldr	r3, [r4, #16]
 8007ea0:	b94b      	cbnz	r3, 8007eb6 <__swsetup_r+0x7a>
 8007ea2:	89a3      	ldrh	r3, [r4, #12]
 8007ea4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007ea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007eac:	d003      	beq.n	8007eb6 <__swsetup_r+0x7a>
 8007eae:	4621      	mov	r1, r4
 8007eb0:	4628      	mov	r0, r5
 8007eb2:	f000 f882 	bl	8007fba <__smakebuf_r>
 8007eb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007eba:	f013 0201 	ands.w	r2, r3, #1
 8007ebe:	d00a      	beq.n	8007ed6 <__swsetup_r+0x9a>
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	60a2      	str	r2, [r4, #8]
 8007ec4:	6962      	ldr	r2, [r4, #20]
 8007ec6:	4252      	negs	r2, r2
 8007ec8:	61a2      	str	r2, [r4, #24]
 8007eca:	6922      	ldr	r2, [r4, #16]
 8007ecc:	b942      	cbnz	r2, 8007ee0 <__swsetup_r+0xa4>
 8007ece:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007ed2:	d1c5      	bne.n	8007e60 <__swsetup_r+0x24>
 8007ed4:	bd38      	pop	{r3, r4, r5, pc}
 8007ed6:	0799      	lsls	r1, r3, #30
 8007ed8:	bf58      	it	pl
 8007eda:	6962      	ldrpl	r2, [r4, #20]
 8007edc:	60a2      	str	r2, [r4, #8]
 8007ede:	e7f4      	b.n	8007eca <__swsetup_r+0x8e>
 8007ee0:	2000      	movs	r0, #0
 8007ee2:	e7f7      	b.n	8007ed4 <__swsetup_r+0x98>
 8007ee4:	20000048 	.word	0x20000048

08007ee8 <_raise_r>:
 8007ee8:	291f      	cmp	r1, #31
 8007eea:	b538      	push	{r3, r4, r5, lr}
 8007eec:	4605      	mov	r5, r0
 8007eee:	460c      	mov	r4, r1
 8007ef0:	d904      	bls.n	8007efc <_raise_r+0x14>
 8007ef2:	2316      	movs	r3, #22
 8007ef4:	6003      	str	r3, [r0, #0]
 8007ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8007efa:	bd38      	pop	{r3, r4, r5, pc}
 8007efc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007efe:	b112      	cbz	r2, 8007f06 <_raise_r+0x1e>
 8007f00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007f04:	b94b      	cbnz	r3, 8007f1a <_raise_r+0x32>
 8007f06:	4628      	mov	r0, r5
 8007f08:	f000 f830 	bl	8007f6c <_getpid_r>
 8007f0c:	4622      	mov	r2, r4
 8007f0e:	4601      	mov	r1, r0
 8007f10:	4628      	mov	r0, r5
 8007f12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007f16:	f000 b817 	b.w	8007f48 <_kill_r>
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d00a      	beq.n	8007f34 <_raise_r+0x4c>
 8007f1e:	1c59      	adds	r1, r3, #1
 8007f20:	d103      	bne.n	8007f2a <_raise_r+0x42>
 8007f22:	2316      	movs	r3, #22
 8007f24:	6003      	str	r3, [r0, #0]
 8007f26:	2001      	movs	r0, #1
 8007f28:	e7e7      	b.n	8007efa <_raise_r+0x12>
 8007f2a:	2100      	movs	r1, #0
 8007f2c:	4620      	mov	r0, r4
 8007f2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007f32:	4798      	blx	r3
 8007f34:	2000      	movs	r0, #0
 8007f36:	e7e0      	b.n	8007efa <_raise_r+0x12>

08007f38 <raise>:
 8007f38:	4b02      	ldr	r3, [pc, #8]	@ (8007f44 <raise+0xc>)
 8007f3a:	4601      	mov	r1, r0
 8007f3c:	6818      	ldr	r0, [r3, #0]
 8007f3e:	f7ff bfd3 	b.w	8007ee8 <_raise_r>
 8007f42:	bf00      	nop
 8007f44:	20000048 	.word	0x20000048

08007f48 <_kill_r>:
 8007f48:	b538      	push	{r3, r4, r5, lr}
 8007f4a:	2300      	movs	r3, #0
 8007f4c:	4d06      	ldr	r5, [pc, #24]	@ (8007f68 <_kill_r+0x20>)
 8007f4e:	4604      	mov	r4, r0
 8007f50:	4608      	mov	r0, r1
 8007f52:	4611      	mov	r1, r2
 8007f54:	602b      	str	r3, [r5, #0]
 8007f56:	f7fa f8fc 	bl	8002152 <_kill>
 8007f5a:	1c43      	adds	r3, r0, #1
 8007f5c:	d102      	bne.n	8007f64 <_kill_r+0x1c>
 8007f5e:	682b      	ldr	r3, [r5, #0]
 8007f60:	b103      	cbz	r3, 8007f64 <_kill_r+0x1c>
 8007f62:	6023      	str	r3, [r4, #0]
 8007f64:	bd38      	pop	{r3, r4, r5, pc}
 8007f66:	bf00      	nop
 8007f68:	20000718 	.word	0x20000718

08007f6c <_getpid_r>:
 8007f6c:	f7fa b8ea 	b.w	8002144 <_getpid>

08007f70 <__swhatbuf_r>:
 8007f70:	b570      	push	{r4, r5, r6, lr}
 8007f72:	460c      	mov	r4, r1
 8007f74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f78:	4615      	mov	r5, r2
 8007f7a:	2900      	cmp	r1, #0
 8007f7c:	461e      	mov	r6, r3
 8007f7e:	b096      	sub	sp, #88	@ 0x58
 8007f80:	da0c      	bge.n	8007f9c <__swhatbuf_r+0x2c>
 8007f82:	89a3      	ldrh	r3, [r4, #12]
 8007f84:	2100      	movs	r1, #0
 8007f86:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007f8a:	bf14      	ite	ne
 8007f8c:	2340      	movne	r3, #64	@ 0x40
 8007f8e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007f92:	2000      	movs	r0, #0
 8007f94:	6031      	str	r1, [r6, #0]
 8007f96:	602b      	str	r3, [r5, #0]
 8007f98:	b016      	add	sp, #88	@ 0x58
 8007f9a:	bd70      	pop	{r4, r5, r6, pc}
 8007f9c:	466a      	mov	r2, sp
 8007f9e:	f000 f849 	bl	8008034 <_fstat_r>
 8007fa2:	2800      	cmp	r0, #0
 8007fa4:	dbed      	blt.n	8007f82 <__swhatbuf_r+0x12>
 8007fa6:	9901      	ldr	r1, [sp, #4]
 8007fa8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007fac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007fb0:	4259      	negs	r1, r3
 8007fb2:	4159      	adcs	r1, r3
 8007fb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007fb8:	e7eb      	b.n	8007f92 <__swhatbuf_r+0x22>

08007fba <__smakebuf_r>:
 8007fba:	898b      	ldrh	r3, [r1, #12]
 8007fbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007fbe:	079d      	lsls	r5, r3, #30
 8007fc0:	4606      	mov	r6, r0
 8007fc2:	460c      	mov	r4, r1
 8007fc4:	d507      	bpl.n	8007fd6 <__smakebuf_r+0x1c>
 8007fc6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007fca:	6023      	str	r3, [r4, #0]
 8007fcc:	6123      	str	r3, [r4, #16]
 8007fce:	2301      	movs	r3, #1
 8007fd0:	6163      	str	r3, [r4, #20]
 8007fd2:	b003      	add	sp, #12
 8007fd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007fd6:	466a      	mov	r2, sp
 8007fd8:	ab01      	add	r3, sp, #4
 8007fda:	f7ff ffc9 	bl	8007f70 <__swhatbuf_r>
 8007fde:	9f00      	ldr	r7, [sp, #0]
 8007fe0:	4605      	mov	r5, r0
 8007fe2:	4639      	mov	r1, r7
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7fe fed5 	bl	8006d94 <_malloc_r>
 8007fea:	b948      	cbnz	r0, 8008000 <__smakebuf_r+0x46>
 8007fec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff0:	059a      	lsls	r2, r3, #22
 8007ff2:	d4ee      	bmi.n	8007fd2 <__smakebuf_r+0x18>
 8007ff4:	f023 0303 	bic.w	r3, r3, #3
 8007ff8:	f043 0302 	orr.w	r3, r3, #2
 8007ffc:	81a3      	strh	r3, [r4, #12]
 8007ffe:	e7e2      	b.n	8007fc6 <__smakebuf_r+0xc>
 8008000:	89a3      	ldrh	r3, [r4, #12]
 8008002:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800800a:	81a3      	strh	r3, [r4, #12]
 800800c:	9b01      	ldr	r3, [sp, #4]
 800800e:	6020      	str	r0, [r4, #0]
 8008010:	b15b      	cbz	r3, 800802a <__smakebuf_r+0x70>
 8008012:	4630      	mov	r0, r6
 8008014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008018:	f000 f81e 	bl	8008058 <_isatty_r>
 800801c:	b128      	cbz	r0, 800802a <__smakebuf_r+0x70>
 800801e:	89a3      	ldrh	r3, [r4, #12]
 8008020:	f023 0303 	bic.w	r3, r3, #3
 8008024:	f043 0301 	orr.w	r3, r3, #1
 8008028:	81a3      	strh	r3, [r4, #12]
 800802a:	89a3      	ldrh	r3, [r4, #12]
 800802c:	431d      	orrs	r5, r3
 800802e:	81a5      	strh	r5, [r4, #12]
 8008030:	e7cf      	b.n	8007fd2 <__smakebuf_r+0x18>
	...

08008034 <_fstat_r>:
 8008034:	b538      	push	{r3, r4, r5, lr}
 8008036:	2300      	movs	r3, #0
 8008038:	4d06      	ldr	r5, [pc, #24]	@ (8008054 <_fstat_r+0x20>)
 800803a:	4604      	mov	r4, r0
 800803c:	4608      	mov	r0, r1
 800803e:	4611      	mov	r1, r2
 8008040:	602b      	str	r3, [r5, #0]
 8008042:	f7fa f8e5 	bl	8002210 <_fstat>
 8008046:	1c43      	adds	r3, r0, #1
 8008048:	d102      	bne.n	8008050 <_fstat_r+0x1c>
 800804a:	682b      	ldr	r3, [r5, #0]
 800804c:	b103      	cbz	r3, 8008050 <_fstat_r+0x1c>
 800804e:	6023      	str	r3, [r4, #0]
 8008050:	bd38      	pop	{r3, r4, r5, pc}
 8008052:	bf00      	nop
 8008054:	20000718 	.word	0x20000718

08008058 <_isatty_r>:
 8008058:	b538      	push	{r3, r4, r5, lr}
 800805a:	2300      	movs	r3, #0
 800805c:	4d05      	ldr	r5, [pc, #20]	@ (8008074 <_isatty_r+0x1c>)
 800805e:	4604      	mov	r4, r0
 8008060:	4608      	mov	r0, r1
 8008062:	602b      	str	r3, [r5, #0]
 8008064:	f7fa f8e3 	bl	800222e <_isatty>
 8008068:	1c43      	adds	r3, r0, #1
 800806a:	d102      	bne.n	8008072 <_isatty_r+0x1a>
 800806c:	682b      	ldr	r3, [r5, #0]
 800806e:	b103      	cbz	r3, 8008072 <_isatty_r+0x1a>
 8008070:	6023      	str	r3, [r4, #0]
 8008072:	bd38      	pop	{r3, r4, r5, pc}
 8008074:	20000718 	.word	0x20000718

08008078 <log>:
 8008078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800807a:	4604      	mov	r4, r0
 800807c:	460d      	mov	r5, r1
 800807e:	f000 f833 	bl	80080e8 <__ieee754_log>
 8008082:	4622      	mov	r2, r4
 8008084:	4606      	mov	r6, r0
 8008086:	460f      	mov	r7, r1
 8008088:	462b      	mov	r3, r5
 800808a:	4620      	mov	r0, r4
 800808c:	4629      	mov	r1, r5
 800808e:	f7f8 fcbd 	bl	8000a0c <__aeabi_dcmpun>
 8008092:	b998      	cbnz	r0, 80080bc <log+0x44>
 8008094:	2200      	movs	r2, #0
 8008096:	2300      	movs	r3, #0
 8008098:	4620      	mov	r0, r4
 800809a:	4629      	mov	r1, r5
 800809c:	f7f8 fcac 	bl	80009f8 <__aeabi_dcmpgt>
 80080a0:	b960      	cbnz	r0, 80080bc <log+0x44>
 80080a2:	2200      	movs	r2, #0
 80080a4:	2300      	movs	r3, #0
 80080a6:	4620      	mov	r0, r4
 80080a8:	4629      	mov	r1, r5
 80080aa:	f7f8 fc7d 	bl	80009a8 <__aeabi_dcmpeq>
 80080ae:	b140      	cbz	r0, 80080c2 <log+0x4a>
 80080b0:	f7fd ff62 	bl	8005f78 <__errno>
 80080b4:	2322      	movs	r3, #34	@ 0x22
 80080b6:	2600      	movs	r6, #0
 80080b8:	4f06      	ldr	r7, [pc, #24]	@ (80080d4 <log+0x5c>)
 80080ba:	6003      	str	r3, [r0, #0]
 80080bc:	4630      	mov	r0, r6
 80080be:	4639      	mov	r1, r7
 80080c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80080c2:	f7fd ff59 	bl	8005f78 <__errno>
 80080c6:	2321      	movs	r3, #33	@ 0x21
 80080c8:	6003      	str	r3, [r0, #0]
 80080ca:	4803      	ldr	r0, [pc, #12]	@ (80080d8 <log+0x60>)
 80080cc:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80080d0:	f000 b804 	b.w	80080dc <nan>
 80080d4:	fff00000 	.word	0xfff00000
 80080d8:	0800a256 	.word	0x0800a256

080080dc <nan>:
 80080dc:	2000      	movs	r0, #0
 80080de:	4901      	ldr	r1, [pc, #4]	@ (80080e4 <nan+0x8>)
 80080e0:	4770      	bx	lr
 80080e2:	bf00      	nop
 80080e4:	7ff80000 	.word	0x7ff80000

080080e8 <__ieee754_log>:
 80080e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080ec:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80080f0:	4602      	mov	r2, r0
 80080f2:	460b      	mov	r3, r1
 80080f4:	460d      	mov	r5, r1
 80080f6:	b087      	sub	sp, #28
 80080f8:	da24      	bge.n	8008144 <__ieee754_log+0x5c>
 80080fa:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80080fe:	4304      	orrs	r4, r0
 8008100:	d108      	bne.n	8008114 <__ieee754_log+0x2c>
 8008102:	2200      	movs	r2, #0
 8008104:	2300      	movs	r3, #0
 8008106:	2000      	movs	r0, #0
 8008108:	49cb      	ldr	r1, [pc, #812]	@ (8008438 <__ieee754_log+0x350>)
 800810a:	f7f8 fb0f 	bl	800072c <__aeabi_ddiv>
 800810e:	b007      	add	sp, #28
 8008110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008114:	2900      	cmp	r1, #0
 8008116:	da04      	bge.n	8008122 <__ieee754_log+0x3a>
 8008118:	f7f8 f826 	bl	8000168 <__aeabi_dsub>
 800811c:	2200      	movs	r2, #0
 800811e:	2300      	movs	r3, #0
 8008120:	e7f3      	b.n	800810a <__ieee754_log+0x22>
 8008122:	2200      	movs	r2, #0
 8008124:	4bc5      	ldr	r3, [pc, #788]	@ (800843c <__ieee754_log+0x354>)
 8008126:	f7f8 f9d7 	bl	80004d8 <__aeabi_dmul>
 800812a:	460b      	mov	r3, r1
 800812c:	460d      	mov	r5, r1
 800812e:	4602      	mov	r2, r0
 8008130:	f06f 0135 	mvn.w	r1, #53	@ 0x35
 8008134:	48c2      	ldr	r0, [pc, #776]	@ (8008440 <__ieee754_log+0x358>)
 8008136:	4285      	cmp	r5, r0
 8008138:	dd06      	ble.n	8008148 <__ieee754_log+0x60>
 800813a:	4610      	mov	r0, r2
 800813c:	4619      	mov	r1, r3
 800813e:	f7f8 f815 	bl	800016c <__adddf3>
 8008142:	e7e4      	b.n	800810e <__ieee754_log+0x26>
 8008144:	2100      	movs	r1, #0
 8008146:	e7f5      	b.n	8008134 <__ieee754_log+0x4c>
 8008148:	152c      	asrs	r4, r5, #20
 800814a:	f2a4 34ff 	subw	r4, r4, #1023	@ 0x3ff
 800814e:	f3c5 0513 	ubfx	r5, r5, #0, #20
 8008152:	440c      	add	r4, r1
 8008154:	f505 2115 	add.w	r1, r5, #610304	@ 0x95000
 8008158:	f601 7164 	addw	r1, r1, #3940	@ 0xf64
 800815c:	f401 1680 	and.w	r6, r1, #1048576	@ 0x100000
 8008160:	f086 517f 	eor.w	r1, r6, #1069547520	@ 0x3fc00000
 8008164:	f481 1140 	eor.w	r1, r1, #3145728	@ 0x300000
 8008168:	ea41 0305 	orr.w	r3, r1, r5
 800816c:	4610      	mov	r0, r2
 800816e:	4619      	mov	r1, r3
 8008170:	2200      	movs	r2, #0
 8008172:	4bb4      	ldr	r3, [pc, #720]	@ (8008444 <__ieee754_log+0x35c>)
 8008174:	f7f7 fff8 	bl	8000168 <__aeabi_dsub>
 8008178:	1cab      	adds	r3, r5, #2
 800817a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800817e:	2b02      	cmp	r3, #2
 8008180:	4682      	mov	sl, r0
 8008182:	468b      	mov	fp, r1
 8008184:	f04f 0200 	mov.w	r2, #0
 8008188:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800818c:	dc53      	bgt.n	8008236 <__ieee754_log+0x14e>
 800818e:	2300      	movs	r3, #0
 8008190:	f7f8 fc0a 	bl	80009a8 <__aeabi_dcmpeq>
 8008194:	b1d0      	cbz	r0, 80081cc <__ieee754_log+0xe4>
 8008196:	2c00      	cmp	r4, #0
 8008198:	f000 8120 	beq.w	80083dc <__ieee754_log+0x2f4>
 800819c:	4620      	mov	r0, r4
 800819e:	f7f8 f931 	bl	8000404 <__aeabi_i2d>
 80081a2:	a391      	add	r3, pc, #580	@ (adr r3, 80083e8 <__ieee754_log+0x300>)
 80081a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081a8:	4606      	mov	r6, r0
 80081aa:	460f      	mov	r7, r1
 80081ac:	f7f8 f994 	bl	80004d8 <__aeabi_dmul>
 80081b0:	a38f      	add	r3, pc, #572	@ (adr r3, 80083f0 <__ieee754_log+0x308>)
 80081b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081b6:	4604      	mov	r4, r0
 80081b8:	460d      	mov	r5, r1
 80081ba:	4630      	mov	r0, r6
 80081bc:	4639      	mov	r1, r7
 80081be:	f7f8 f98b 	bl	80004d8 <__aeabi_dmul>
 80081c2:	4602      	mov	r2, r0
 80081c4:	460b      	mov	r3, r1
 80081c6:	4620      	mov	r0, r4
 80081c8:	4629      	mov	r1, r5
 80081ca:	e7b8      	b.n	800813e <__ieee754_log+0x56>
 80081cc:	a38a      	add	r3, pc, #552	@ (adr r3, 80083f8 <__ieee754_log+0x310>)
 80081ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081d2:	4650      	mov	r0, sl
 80081d4:	4659      	mov	r1, fp
 80081d6:	f7f8 f97f 	bl	80004d8 <__aeabi_dmul>
 80081da:	4602      	mov	r2, r0
 80081dc:	460b      	mov	r3, r1
 80081de:	2000      	movs	r0, #0
 80081e0:	4999      	ldr	r1, [pc, #612]	@ (8008448 <__ieee754_log+0x360>)
 80081e2:	f7f7 ffc1 	bl	8000168 <__aeabi_dsub>
 80081e6:	4652      	mov	r2, sl
 80081e8:	4606      	mov	r6, r0
 80081ea:	460f      	mov	r7, r1
 80081ec:	465b      	mov	r3, fp
 80081ee:	4650      	mov	r0, sl
 80081f0:	4659      	mov	r1, fp
 80081f2:	f7f8 f971 	bl	80004d8 <__aeabi_dmul>
 80081f6:	4602      	mov	r2, r0
 80081f8:	460b      	mov	r3, r1
 80081fa:	4630      	mov	r0, r6
 80081fc:	4639      	mov	r1, r7
 80081fe:	f7f8 f96b 	bl	80004d8 <__aeabi_dmul>
 8008202:	4606      	mov	r6, r0
 8008204:	460f      	mov	r7, r1
 8008206:	b914      	cbnz	r4, 800820e <__ieee754_log+0x126>
 8008208:	4632      	mov	r2, r6
 800820a:	463b      	mov	r3, r7
 800820c:	e0a0      	b.n	8008350 <__ieee754_log+0x268>
 800820e:	4620      	mov	r0, r4
 8008210:	f7f8 f8f8 	bl	8000404 <__aeabi_i2d>
 8008214:	a374      	add	r3, pc, #464	@ (adr r3, 80083e8 <__ieee754_log+0x300>)
 8008216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800821a:	4680      	mov	r8, r0
 800821c:	4689      	mov	r9, r1
 800821e:	f7f8 f95b 	bl	80004d8 <__aeabi_dmul>
 8008222:	a373      	add	r3, pc, #460	@ (adr r3, 80083f0 <__ieee754_log+0x308>)
 8008224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008228:	4604      	mov	r4, r0
 800822a:	460d      	mov	r5, r1
 800822c:	4640      	mov	r0, r8
 800822e:	4649      	mov	r1, r9
 8008230:	f7f8 f952 	bl	80004d8 <__aeabi_dmul>
 8008234:	e0a5      	b.n	8008382 <__ieee754_log+0x29a>
 8008236:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800823a:	f7f7 ff97 	bl	800016c <__adddf3>
 800823e:	4602      	mov	r2, r0
 8008240:	460b      	mov	r3, r1
 8008242:	4650      	mov	r0, sl
 8008244:	4659      	mov	r1, fp
 8008246:	f7f8 fa71 	bl	800072c <__aeabi_ddiv>
 800824a:	e9cd 0100 	strd	r0, r1, [sp]
 800824e:	4620      	mov	r0, r4
 8008250:	f7f8 f8d8 	bl	8000404 <__aeabi_i2d>
 8008254:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800825c:	4610      	mov	r0, r2
 800825e:	4619      	mov	r1, r3
 8008260:	f7f8 f93a 	bl	80004d8 <__aeabi_dmul>
 8008264:	4602      	mov	r2, r0
 8008266:	460b      	mov	r3, r1
 8008268:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800826c:	f7f8 f934 	bl	80004d8 <__aeabi_dmul>
 8008270:	a363      	add	r3, pc, #396	@ (adr r3, 8008400 <__ieee754_log+0x318>)
 8008272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008276:	4680      	mov	r8, r0
 8008278:	4689      	mov	r9, r1
 800827a:	f7f8 f92d 	bl	80004d8 <__aeabi_dmul>
 800827e:	a362      	add	r3, pc, #392	@ (adr r3, 8008408 <__ieee754_log+0x320>)
 8008280:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008284:	f7f7 ff72 	bl	800016c <__adddf3>
 8008288:	4642      	mov	r2, r8
 800828a:	464b      	mov	r3, r9
 800828c:	f7f8 f924 	bl	80004d8 <__aeabi_dmul>
 8008290:	a35f      	add	r3, pc, #380	@ (adr r3, 8008410 <__ieee754_log+0x328>)
 8008292:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008296:	f7f7 ff69 	bl	800016c <__adddf3>
 800829a:	4642      	mov	r2, r8
 800829c:	464b      	mov	r3, r9
 800829e:	f7f8 f91b 	bl	80004d8 <__aeabi_dmul>
 80082a2:	a35d      	add	r3, pc, #372	@ (adr r3, 8008418 <__ieee754_log+0x330>)
 80082a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082a8:	f7f7 ff60 	bl	800016c <__adddf3>
 80082ac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80082b0:	f7f8 f912 	bl	80004d8 <__aeabi_dmul>
 80082b4:	a35a      	add	r3, pc, #360	@ (adr r3, 8008420 <__ieee754_log+0x338>)
 80082b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082ba:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80082be:	4640      	mov	r0, r8
 80082c0:	4649      	mov	r1, r9
 80082c2:	f7f8 f909 	bl	80004d8 <__aeabi_dmul>
 80082c6:	a358      	add	r3, pc, #352	@ (adr r3, 8008428 <__ieee754_log+0x340>)
 80082c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082cc:	f7f7 ff4e 	bl	800016c <__adddf3>
 80082d0:	4642      	mov	r2, r8
 80082d2:	464b      	mov	r3, r9
 80082d4:	f7f8 f900 	bl	80004d8 <__aeabi_dmul>
 80082d8:	a355      	add	r3, pc, #340	@ (adr r3, 8008430 <__ieee754_log+0x348>)
 80082da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80082de:	f7f7 ff45 	bl	800016c <__adddf3>
 80082e2:	4642      	mov	r2, r8
 80082e4:	464b      	mov	r3, r9
 80082e6:	f7f8 f8f7 	bl	80004d8 <__aeabi_dmul>
 80082ea:	4602      	mov	r2, r0
 80082ec:	460b      	mov	r3, r1
 80082ee:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80082f2:	f7f7 ff3b 	bl	800016c <__adddf3>
 80082f6:	f5a5 26c2 	sub.w	r6, r5, #397312	@ 0x61000
 80082fa:	f5c5 25d7 	rsb	r5, r5, #440320	@ 0x6b800
 80082fe:	f2a6 467a 	subw	r6, r6, #1146	@ 0x47a
 8008302:	3551      	adds	r5, #81	@ 0x51
 8008304:	4335      	orrs	r5, r6
 8008306:	2d00      	cmp	r5, #0
 8008308:	4680      	mov	r8, r0
 800830a:	4689      	mov	r9, r1
 800830c:	dd48      	ble.n	80083a0 <__ieee754_log+0x2b8>
 800830e:	2200      	movs	r2, #0
 8008310:	4b4d      	ldr	r3, [pc, #308]	@ (8008448 <__ieee754_log+0x360>)
 8008312:	4650      	mov	r0, sl
 8008314:	4659      	mov	r1, fp
 8008316:	f7f8 f8df 	bl	80004d8 <__aeabi_dmul>
 800831a:	4652      	mov	r2, sl
 800831c:	465b      	mov	r3, fp
 800831e:	f7f8 f8db 	bl	80004d8 <__aeabi_dmul>
 8008322:	4602      	mov	r2, r0
 8008324:	460b      	mov	r3, r1
 8008326:	4606      	mov	r6, r0
 8008328:	460f      	mov	r7, r1
 800832a:	4640      	mov	r0, r8
 800832c:	4649      	mov	r1, r9
 800832e:	f7f7 ff1d 	bl	800016c <__adddf3>
 8008332:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008336:	f7f8 f8cf 	bl	80004d8 <__aeabi_dmul>
 800833a:	4680      	mov	r8, r0
 800833c:	4689      	mov	r9, r1
 800833e:	b964      	cbnz	r4, 800835a <__ieee754_log+0x272>
 8008340:	4602      	mov	r2, r0
 8008342:	460b      	mov	r3, r1
 8008344:	4630      	mov	r0, r6
 8008346:	4639      	mov	r1, r7
 8008348:	f7f7 ff0e 	bl	8000168 <__aeabi_dsub>
 800834c:	4602      	mov	r2, r0
 800834e:	460b      	mov	r3, r1
 8008350:	4650      	mov	r0, sl
 8008352:	4659      	mov	r1, fp
 8008354:	f7f7 ff08 	bl	8000168 <__aeabi_dsub>
 8008358:	e6d9      	b.n	800810e <__ieee754_log+0x26>
 800835a:	a323      	add	r3, pc, #140	@ (adr r3, 80083e8 <__ieee754_log+0x300>)
 800835c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008360:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008364:	f7f8 f8b8 	bl	80004d8 <__aeabi_dmul>
 8008368:	a321      	add	r3, pc, #132	@ (adr r3, 80083f0 <__ieee754_log+0x308>)
 800836a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800836e:	4604      	mov	r4, r0
 8008370:	460d      	mov	r5, r1
 8008372:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008376:	f7f8 f8af 	bl	80004d8 <__aeabi_dmul>
 800837a:	4642      	mov	r2, r8
 800837c:	464b      	mov	r3, r9
 800837e:	f7f7 fef5 	bl	800016c <__adddf3>
 8008382:	4602      	mov	r2, r0
 8008384:	460b      	mov	r3, r1
 8008386:	4630      	mov	r0, r6
 8008388:	4639      	mov	r1, r7
 800838a:	f7f7 feed 	bl	8000168 <__aeabi_dsub>
 800838e:	4652      	mov	r2, sl
 8008390:	465b      	mov	r3, fp
 8008392:	f7f7 fee9 	bl	8000168 <__aeabi_dsub>
 8008396:	4602      	mov	r2, r0
 8008398:	460b      	mov	r3, r1
 800839a:	4620      	mov	r0, r4
 800839c:	4629      	mov	r1, r5
 800839e:	e7d9      	b.n	8008354 <__ieee754_log+0x26c>
 80083a0:	4602      	mov	r2, r0
 80083a2:	460b      	mov	r3, r1
 80083a4:	4650      	mov	r0, sl
 80083a6:	4659      	mov	r1, fp
 80083a8:	f7f7 fede 	bl	8000168 <__aeabi_dsub>
 80083ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 80083b0:	f7f8 f892 	bl	80004d8 <__aeabi_dmul>
 80083b4:	4606      	mov	r6, r0
 80083b6:	460f      	mov	r7, r1
 80083b8:	2c00      	cmp	r4, #0
 80083ba:	f43f af25 	beq.w	8008208 <__ieee754_log+0x120>
 80083be:	a30a      	add	r3, pc, #40	@ (adr r3, 80083e8 <__ieee754_log+0x300>)
 80083c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083c8:	f7f8 f886 	bl	80004d8 <__aeabi_dmul>
 80083cc:	a308      	add	r3, pc, #32	@ (adr r3, 80083f0 <__ieee754_log+0x308>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	4604      	mov	r4, r0
 80083d4:	460d      	mov	r5, r1
 80083d6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80083da:	e729      	b.n	8008230 <__ieee754_log+0x148>
 80083dc:	2000      	movs	r0, #0
 80083de:	2100      	movs	r1, #0
 80083e0:	e695      	b.n	800810e <__ieee754_log+0x26>
 80083e2:	bf00      	nop
 80083e4:	f3af 8000 	nop.w
 80083e8:	fee00000 	.word	0xfee00000
 80083ec:	3fe62e42 	.word	0x3fe62e42
 80083f0:	35793c76 	.word	0x35793c76
 80083f4:	3dea39ef 	.word	0x3dea39ef
 80083f8:	55555555 	.word	0x55555555
 80083fc:	3fd55555 	.word	0x3fd55555
 8008400:	df3e5244 	.word	0xdf3e5244
 8008404:	3fc2f112 	.word	0x3fc2f112
 8008408:	96cb03de 	.word	0x96cb03de
 800840c:	3fc74664 	.word	0x3fc74664
 8008410:	94229359 	.word	0x94229359
 8008414:	3fd24924 	.word	0x3fd24924
 8008418:	55555593 	.word	0x55555593
 800841c:	3fe55555 	.word	0x3fe55555
 8008420:	d078c69f 	.word	0xd078c69f
 8008424:	3fc39a09 	.word	0x3fc39a09
 8008428:	1d8e78af 	.word	0x1d8e78af
 800842c:	3fcc71c5 	.word	0x3fcc71c5
 8008430:	9997fa04 	.word	0x9997fa04
 8008434:	3fd99999 	.word	0x3fd99999
 8008438:	c3500000 	.word	0xc3500000
 800843c:	43500000 	.word	0x43500000
 8008440:	7fefffff 	.word	0x7fefffff
 8008444:	3ff00000 	.word	0x3ff00000
 8008448:	3fe00000 	.word	0x3fe00000

0800844c <_init>:
 800844c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800844e:	bf00      	nop
 8008450:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008452:	bc08      	pop	{r3}
 8008454:	469e      	mov	lr, r3
 8008456:	4770      	bx	lr

08008458 <_fini>:
 8008458:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800845a:	bf00      	nop
 800845c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800845e:	bc08      	pop	{r3}
 8008460:	469e      	mov	lr, r3
 8008462:	4770      	bx	lr
